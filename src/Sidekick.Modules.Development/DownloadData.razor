@using System.Text.Json
@using Sidekick.Apis.Poe.Items
@using Sidekick.Apis.Poe.Languages
@using Sidekick.Apis.Poe.Trade.Clients
@using Sidekick.Apis.Poe.Trade.Clients.Models
@using Sidekick.Common.Enums
@using Sidekick.Common.Ui.Buttons
@using Sidekick.Common.Ui.Forms

<FormFieldset Legend="Preload Data">
    <FormInput Label="Folder Path (/data)"
               @bind-Value="DataFolder"/>
    <div class="flex flex-wrap gap-3">
        <ButtonPrimary OnClick="Download">Download</ButtonPrimary>
        <ButtonSecondary OnClick="Analyze">Analyze</ButtonSecondary>
    </div>

    <div>
        @foreach (var message in Messages)
        {
            <p class="mb-1">@message</p>
        }
    </div>
</FormFieldset>

@inject ITradeApiClient ApiClient
@inject IGameLanguageProvider GameLanguageProvider

@code {


    private static List<GameType> games = [GameType.PathOfExile, GameType.PathOfExile2];
    private static string[] paths =
    [
        "items",
        "stats",
        "static",
        "filters",
    ];

    private string DataFolder { get; set; } = string.Empty;

    private List<string> Messages { get; set; } = [];

    public async Task Download()
    {
        // List of languages
        var languages = GameLanguageProvider.GetList();

        try
        {
            foreach (var game in games)
            {
                await DownloadLeagues(game);

                foreach (var languageAttribute in languages)
                {
                    var language = languageAttribute.Build();

                    foreach (var path in paths)
                    {
                        var fileName = ApiClient.GetDataFileName(game, language, path);
                        var data = await ApiClient.FetchData(game, language, path);
                        await SaveToDisk(fileName, data);
                    }
                }
            }

            LogMessage("All data downloaded successfully.");
        }
        catch (Exception ex)
        {
            LogMessage($"An error occurred: {ex.Message}");
        }
    }

    private async Task DownloadLeagues(GameType game)
    {
        var fileName = ApiClient.GetDataFileName(game, GameLanguageProvider.InvariantLanguage, "leagues");
        var data = await ApiClient.FetchData(game, GameLanguageProvider.InvariantLanguage, "leagues");
        await SaveToDisk(fileName, data);
    }

    private async Task SaveToDisk(string fileName, Stream stream)
    {
        try
        {
            var filePath = Path.Combine(DataFolder, fileName);
            Directory.CreateDirectory(Path.GetDirectoryName(filePath)!);// Ensure directory creation

            await using var fileStream = new FileStream(filePath, FileMode.Create, FileAccess.Write);
            await stream.CopyToAsync(fileStream);

            LogMessage($"Downloaded and saved: {fileName}");
        }
        catch (Exception ex)
        {
            LogMessage($"Failed to download {fileName}: {ex.Message}");
        }
    }

    private void LogMessage(string message)
    {
        Messages.Add(message);
        StateHasChanged();
    }

    private async Task Analyze()
    {
        foreach (var game in games)
        {
            LogMessage($"[{game.GetValueAttribute()}] Analyzing items.");
            await AnalyzePath<Sidekick.Apis.Poe.Trade.Items.Models.ApiCategory>(game, "items", AnalyzeItems);
        }
    }

    private async Task AnalyzePath<TReturn>(GameType game, string path, Action<IGameLanguage, FetchResult<TReturn>> analyzeFunc)
    {
        var languages = GameLanguageProvider.GetList();
        foreach (var languageAttribute in languages)
        {
            var language = languageAttribute.Build();
            var fileName = ApiClient.GetDataFileName(game, language, path);
            var filePath = Path.Combine(DataFolder, fileName);

            await using var fileStream = File.OpenRead(filePath);
            var result = await JsonSerializer.DeserializeAsync<FetchResult<TReturn>>(fileStream, TradeApiClient.JsonSerializerOptions);
            if (result == null)
            {
                LogMessage($"{path} result is null.");
                continue;
            }

            analyzeFunc.Invoke(language, result);
        }
    }

    private void AnalyzeItems(IGameLanguage language,
        FetchResult<Sidekick.Apis.Poe.Trade.Items.Models.ApiCategory> result)
    {
        var itemCount = result.Result.SelectMany(x => x.Entries).Count();
        LogMessage($"[{language.Code}] {itemCount} items found.");
    }
}
