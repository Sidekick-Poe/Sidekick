@page "/development"
@using Microsoft.Extensions.DependencyInjection
@using Sidekick.Common.Platform
@using Sidekick.Common.Ui.Views
@using Sidekick.Common.Ui.App
@using Sidekick.Common.Ui.Forms
@using Sidekick.Common.Ui.Buttons
@using Sidekick.Common.Ui.Layouts

<LayoutMenu>
    <AppSmallContainer>
        <FormFieldset Legend="Custom actions">
            <div class="flex gap-3">
                @if (ApplicationService.SupportsKeybinds)
                {
                    <ButtonPrimary OnClick="RegisterHooks">Bind keyboard hooks</ButtonPrimary>
                }
                <ButtonPrimary OnClick="ThrowException">Throw an exception</ButtonPrimary>
            </div>
        </FormFieldset>
        <DownloadData/>
    </AppSmallContainer>
</LayoutMenu>

@inject IApplicationService ApplicationService
@inject IServiceProvider ServiceProvider
@inject ICurrentView CurrentView

@code {

    private IKeyboardProvider? KeyboardProvider { get; set; }

    protected override void OnInitialized()
    {
        CurrentView.Initialize(new ViewOptions());
        if (ApplicationService.SupportsKeybinds)
        {
            KeyboardProvider = ServiceProvider.GetService<IKeyboardProvider>();
        }
        base.OnInitialized();
    }

    private void ThrowException()
    {
#pragma warning disable S112 // General exceptions should never be thrown
        throw new Exception("[Development] This is a test exception.");
#pragma warning restore S112 // General exceptions should never be thrown
    }

    private void RegisterHooks()
    {
        KeyboardProvider?.RegisterHooks();
    }

}
