@using Sidekick.Common.Exceptions

<LoggingErrorBoundary @ref="Boundary">
    <ChildContent>
        @ChildContent
    </ChildContent>
    <ErrorContent>
        @if (ErrorContent != null)
        {
            @ErrorContent(this)
        }
        else if (SidekickException != null)
        {
            <AlertException Exception="SidekickException"/>
        }
        else
        {
            <AlertError IsCritical="@IsCritical">
                <TextBase>@Message</TextBase>

                @foreach (var additionalInformation in AdditionalInformation)
                {
                    <div>
                        <TextCaption Class="mt-1">@additionalInformation</TextCaption>
                    </div>
                }

                <div class="hidden mt-1">
                    <div>
                        @Exception?.Message
                    </div>
                    <div>
                        @((MarkupString)(Exception?.StackTrace?.Replace("\n", "<br/>") ?? ""))
                    </div>
                </div>
            </AlertError>
        }
    </ErrorContent>
</LoggingErrorBoundary>

@inject ICurrentView CurrentView

@code {

    /// <summary>
    /// Gets or sets the content of the wrapper.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Gets or sets the content of the wrapper.
    /// </summary>
    [Parameter]
    public RenderFragment<SidekickErrorBoundary>? ErrorContent { get; set; }

    [Parameter]
    public bool Root { get; set; }

    private LoggingErrorBoundary? Boundary { get; set; }

    public Exception? Exception => Boundary?.CapturedException;

    public SidekickException? SidekickException => Exception as SidekickException;

    public string Message => SidekickException?.Message ?? "This application may no longer respond until reloaded. If this issue keeps reoccurring, please open a ticket on our github page.";

    public List<string> AdditionalInformation => SidekickException?.AdditionalInformation ?? [];

    public bool IsCritical => SidekickException?.IsCritical ?? true;

    public void Recover()
    {
        InvokeAsync(() =>
        {
            Boundary?.Recover();
            StateHasChanged();
        });
    }

}
