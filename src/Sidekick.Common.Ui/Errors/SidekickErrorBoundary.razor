@using Sidekick.Common.Exceptions

<LoggingErrorBoundary @ref="Boundary">
    <ChildContent>
        @ChildContent
    </ChildContent>
    <ErrorContent>
        @if (ErrorContent != null)
        {
            @ErrorContent(this)
        }
        else
        {
            <AlertError>
                <TextBase>@Message</TextBase>

                @if (AdditionalInformation.Any())
                {
                    <Heading3 Class="mt-2">Additional Information</Heading3>
                    @foreach (var additionalInformation in AdditionalInformation)
                    {
                        <div>
                            <TextCaption Class="mt-1">@additionalInformation</TextCaption>
                        </div>
                    }
                }

                <div class="hidden mt-1">
                    <div>
                        @Exception?.Message
                    </div>
                    <div>
                        @((MarkupString)(Exception?.StackTrace?.Replace("\n", "<br/>") ?? ""))
                    </div>
                </div>
            </AlertError>
        }
    </ErrorContent>
</LoggingErrorBoundary>

@inject ICurrentView CurrentView

@code {

    /// <summary>
    /// Gets or sets the content of the wrapper.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Gets or sets the content of the wrapper.
    /// </summary>
    [Parameter]
    public RenderFragment<SidekickErrorBoundary>? ErrorContent { get; set; }

    [Parameter]
    public bool Root { get; set; }

    private LoggingErrorBoundary? Boundary { get; set; }

    public Exception? Exception => Boundary?.CurrentException;

    protected override void OnAfterRender(bool firstRender)
    {
        if (Boundary?.CurrentException != null)
        {
            CurrentView.Close();
        }

        base.OnAfterRender(firstRender);
    }

    public string Message
    {
        get
        {
            if (Boundary?.CurrentException is SidekickException sidekickException)
            {
                return sidekickException.Message;
            }

            return "This application may no longer respond until reloaded. If this issue keeps reoccurring, please open a ticket on our github page.";
        }
    }

    public List<string> AdditionalInformation
    {
        get
        {
            if (Boundary?.CurrentException is SidekickException sidekickException)
            {
                return sidekickException.AdditionalInformation;
            }

            return [];
        }
    }

    public bool IsCritical
    {
        get
        {
            if (Boundary?.CurrentException is SidekickException sidekickException)
            {
                return sidekickException.IsCritical;
            }

            return true;
        }
    }

}
