@using Sidekick.Common.Exceptions
@using Sidekick.Common.Platform

<SidekickErrorBoundary @ref="ErrorBoundary">
    <ChildContent>
        @ChildContent
    </ChildContent>
    <ErrorContent>
        <div class="fixed top-0 left-0 h-full w-full @BackgroundClass(context.IsCritical) text-xl overflow-auto">
            <div class="flex min-w-full min-h-full items-center justify-center text-center p-4 flex-col">
                <div>
                    @if (!string.IsNullOrEmpty(context.Message))
                    {
                        <Heading1>@context.Message</Heading1>

                        @if (context.AdditionalInformation.Any())
                        {
                            <Heading3 Class="mt-4">Additional Information</Heading3>
                            <ul>
                                @foreach (var additionalInformation in context.AdditionalInformation)
                                {
                                    <li>
                                        <TextBase Class="mt-1">@additionalInformation</TextBase>
                                    </li>
                                }
                            </ul>
                        }
                    }
                    else
                    {
                        <span>An error has occurred. This application may no longer respond until reloaded.<br/>If this issue keeps reoccurring, please open a ticket on our github page.</span>
                    }
                </div>

                @{
                    var actions = ExceptionActions.CloseWindow;
                    if (context.SidekickException != null)
                    {
                        actions = context.SidekickException.Actions;
                    }

                    if (actions == 0)
                    {
                        actions = ExceptionActions.CloseWindow;
                    }
                }

                <div class="flex items-center justify-center gap-2">
                    @if (actions.HasFlag(ExceptionActions.ExitApplication))
                    {
                        <a href="javascript:" class="@ButtonClass(context.IsCritical) px-8 py-4 m-4"
                           @onclick="ApplicationService.Shutdown">Exit Application</a>
                    }
                    @if (actions.HasFlag(ExceptionActions.CloseWindow))
                    {
                        <a href="javascript:" class="@ButtonClass(context.IsCritical) px-8 py-4 m-4"
                           @onclick="Close">Close</a>
                    }
                </div>
            </div>
        </div>
    </ErrorContent>
</SidekickErrorBoundary>

@inject ICurrentView CurrentView
@inject IApplicationService ApplicationService
@inject NavigationManager NavigationManager

@code {

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private string BackgroundClass(bool isCritical) => isCritical ? "bg-red-700 text-white" : "bg-orange-700 text-white";

    private string ButtonClass(bool isCritical) => isCritical ? "bg-white text-red-700" : "bg-white text-orange-700";

    private SidekickErrorBoundary? ErrorBoundary { get; set; }

    private void Close()
    {
        NavigationManager.LocationChanged += RecoverAfterNavigation;
        NavigationManager.NavigateTo("/empty");
    }

    private void RecoverAfterNavigation(object? sender, LocationChangedEventArgs e)
    {
        ErrorBoundary?.Recover();
        NavigationManager.LocationChanged -= RecoverAfterNavigation;
        CurrentView.Close();
    }

}
