@using Sidekick.Common.Exceptions
@using Sidekick.Common.Platform

<SidekickErrorBoundary @ref="ErrorBoundary">
    <ChildContent>
        @ChildContent
    </ChildContent>
    <ErrorContent>
        <div class="fixed top-0 left-0 h-full w-full text-xl overflow-auto">
            <div class="flex min-w-full min-h-full items-center justify-center text-center p-4 flex-col">
                @if (context.IsCritical)
                {
                    <Icon Svg="@UiIcons.Error" Class="text-red-600" Size="@UiIconSize.Large" />
                }
                else
                {
                    <Icon Svg="@UiIcons.Warning" Class="text-orange-600" Size="@UiIconSize.Large" />
                }

                <div class="my-3">
                    @if (!string.IsNullOrEmpty(context.Message))
                    {
                        <Heading1>@context.Message</Heading1>

                        @if (context.AdditionalInformation.Any())
                        {
                            <Heading3 Class="mt-4">Additional Information</Heading3>
                            <ul>
                                @foreach (var additionalInformation in context.AdditionalInformation)
                                {
                                    <li>
                                        <TextBase Class="mt-1">@additionalInformation</TextBase>
                                    </li>
                                }
                            </ul>
                        }

                        @if (context.SidekickException is UnparsableException unparsableException && !string.IsNullOrWhiteSpace(unparsableException.ItemText))
                        {
                            <label class="w-full h-64 mt-2">
                                <TextBase>Here's the item's text</TextBase>
                                <textarea class="@UiClasses.FormInputClasses mt-2 p-2 text-base w-full h-64 resize-none">@unparsableException.ItemText</textarea>
                            </label>
                        }
                    }
                    else
                    {
                        <span>An error has occurred. This application may no longer respond until reloaded.<br />If this issue keeps reoccurring, please open a ticket on our github page.</span>
                    }
                </div>

                @{
                    var actions = ExceptionActions.CloseWindow;
                    if (context.SidekickException != null)
                    {
                        actions = context.SidekickException.Actions;
                    }

                    if (actions == 0)
                    {
                        actions = ExceptionActions.CloseWindow;
                    }
                }

                <div class="flex items-center justify-center gap-2">
                    @if (actions.HasFlag(ExceptionActions.ExitApplication))
                    {
                        <a href="javascript:" class="@GetButtonClass(context.IsCritical)" @onclick="ApplicationService.Shutdown">Exit Application</a>
                    }
                    @if (actions.HasFlag(ExceptionActions.CloseWindow))
                    {
                        <a href="javascript:" class="@GetButtonClass(context.IsCritical)" @onclick="Close">Close</a>
                    }
                </div>
            </div>
        </div>
    </ErrorContent>
</SidekickErrorBoundary>

@inject ICurrentView CurrentView
@inject IApplicationService ApplicationService
@inject NavigationManager NavigationManager

@code {

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private SidekickErrorBoundary? ErrorBoundary { get; set; }

    private string GetButtonClass(bool isCritical)
    {
        var colors = isCritical ? "bg-red-600 hover:bg-red-400" : "bg-orange-600 hover:bg-orange-400";
        return $"disabled:opacity-50 inline-flex items-center justify-center px-6 py-3 text-lg font-medium tracking-wide text-white transition-colors duration-200 rounded-md {colors} {UiClasses.FocusClasses}";
    }

    private void Close()
    {
        NavigationManager.LocationChanged += RecoverAfterNavigation;
        NavigationManager.NavigateTo("/empty");
    }

    private void RecoverAfterNavigation(object? sender, LocationChangedEventArgs e)
    {
        ErrorBoundary?.Recover();
        NavigationManager.LocationChanged -= RecoverAfterNavigation;
        CurrentView.Close();
    }

}
