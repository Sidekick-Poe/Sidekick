@using Sidekick.Apis.GitHub;
@using Sidekick.Apis.GitHub.Models;
@using Sidekick.Common.Ui.Localization

@if (Release is
     {
         IsNewerVersion: true
     })
{
    <button type="button"
            @onclick="OnClick"
            @onclick:preventDefault="true"
            @onclick:stopPropagation="true"
            tabindex="-1"
            title="@Resources["Update"]"
            class="flex items-center p-2 text-white transition-colors duration-200 bg-violet-700 hover:bg-violet-500">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="w-6 h-6 fill-current">
            <path
                d="M21,10.12H14.22L16.96,7.3C14.23,4.6 9.81,4.5 7.08,7.2C4.35,9.91 4.35,14.28 7.08,17C9.81,19.7 14.23,19.7 16.96,17C18.32,15.65 19,14.08 19,12.1H21C21,14.08 20.12,16.65 18.36,18.39C14.85,21.87 9.15,21.87 5.64,18.39C2.14,14.92 2.11,9.28 5.62,5.81C9.13,2.34 14.76,2.34 18.27,5.81L21,3V10.12M12.5,8V12.25L16,14.33L15.28,15.54L11,13V8H12.5Z"/>
        </svg>
    </button>
}

@inject IGitHubClient GitHubClient
@inject IStringLocalizer<UiResources> Resources
@inject IViewLocator ViewLocator

@code {

    private GitHubRelease? Release { get; set; }

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        Release = await GitHubClient.GetLatestRelease();

        await base.OnInitializedAsync();
    }

    private void OnClick()
    {
        ViewLocator.Open(SidekickViewType.Modal, "/update");
    }

}
