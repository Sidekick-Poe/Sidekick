
@if (new Uri(NavigationManager.Uri).PathAndQuery != "/home")
{
    <button type="button"
            @onclick="OnClick"
            @onclick:preventDefault="true"
            @onclick:stopPropagation="true"
            tabindex="-1"
            title="@Resources["Home"]"
            class="p-2 text-base font-medium tracking-wide text-white transition-colors duration-200 bg-violet-900 hover:bg-violet-700">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"
             class="size-6">
            <path stroke-linecap="round" stroke-linejoin="round"
                  d="m2.25 12 8.954-8.955c.44-.439 1.152-.439 1.591 0L21.75 12M4.5 9.75v10.125c0 .621.504 1.125 1.125 1.125H9.75v-4.875c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125V21h4.125c.621 0 1.125-.504 1.125-1.125V9.75M8.25 21h8.25"/>
        </svg>
    </button>
}

@inject IStringLocalizer<AppResources> Resources
@inject NavigationManager NavigationManager
@implements IDisposable

@code {

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += NavigationManagerOnLocationChanged;

        await base.OnInitializedAsync();
    }

    private void NavigationManagerOnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _ = InvokeAsync(StateHasChanged);
    }

    private void OnClick()
    {
        NavigationManager.NavigateTo("/home");
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= NavigationManagerOnLocationChanged;
    }

}
