@using Sidekick.Common.Settings
@using Sidekick.Common.Ui.Sections

<ErrorFullScreenBoundary>
    <div
        class="font-sans w-full h-[calc(var(--sidekick-vh))] overflow-y-auto overflow-x-hidden dark:bg-stone-900 text-white text-base [zoom:var(--sidekick-zoom)]">
        @ChildContent
    </div>

    <BodySectionOutlets/>
</ErrorFullScreenBoundary>

@inject IJSRuntime JsRuntime
@inject ISettingsService SettingsService
@implements IAsyncDisposable

@code {

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private IJSObjectReference? Module { get; set; }

    private IJSObjectReference? ZoomHandler { get; set; }

    protected override void OnInitialized()
    {
        SettingsService.OnSettingsChanged += SettingsServiceOnOnSettingsChanged;
        base.OnInitialized();
    }

    private void SettingsServiceOnOnSettingsChanged(string[] keys)
    {
        if (keys.Contains(SettingKeys.Zoom))
        {
            InvokeAsync(UpdateZoom);
        }
    }

    public async Task UpdateZoom()
    {
        if (ZoomHandler != null)
        {
            var zoom = await SettingsService.GetString(SettingKeys.Zoom);
            await ZoomHandler.InvokeVoidAsync("update", zoom);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                Module = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/Sidekick.Common.Ui/App/AppWrapper.razor.js");
                ZoomHandler = await Module.InvokeAsync<IJSObjectReference>("initializeZoomHandling");
                await UpdateZoom();
            }
            catch (Exception)
            {
                // Do nothing if the zoom handler fails to load.
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async ValueTask DisposeAsync()
    {
        if (ZoomHandler != null)
        {
            await ZoomHandler.DisposeAsync();
        }

        if (Module != null)
        {
            await Module.DisposeAsync();
        }

        SettingsService.OnSettingsChanged -= SettingsServiceOnOnSettingsChanged;
    }

}
