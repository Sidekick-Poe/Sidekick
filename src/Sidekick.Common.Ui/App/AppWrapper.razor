@using Microsoft.AspNetCore.Components.Sections
@using Sidekick.Common.Settings

<ErrorFullScreenBoundary>
    <div id="@ElementId" class="w-full h-full min-w-full min-h-full resizer-handler block select-none touch-none pr-2 pb-2 bg-transparent overflow-hidden">
        <div class="w-full h-full dark bg-stone-800 font-sans dark:bg-stone-900 text-white text-base [zoom:var(--sidekick-zoom)]">
            @ChildContent
        </div>

        <div class="font-sans text-base">
            <SectionOutlet SectionName="sidekick-overlay" />
        </div>
    </div>
</ErrorFullScreenBoundary>

@inject IJSRuntime JsRuntime
@inject ISettingsService SettingsService
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@inherits FlowbiteComponent

@code {

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public EventCallback<(int width, int height)> OnResizeChanged { get; set; }

    private string ElementId { get; } = UiUtilities.GenerateId();

    private DotNetObjectReference<AppWrapper>? Reference { get; set; }

    private IJSObjectReference? Module { get; set; }

    private IJSObjectReference? ZoomHandler { get; set; }

    protected override void OnInitialized()
    {
        SettingsService.OnSettingsChanged += SettingsServiceOnOnSettingsChanged;
        base.OnInitialized();
    }

    private void SettingsServiceOnOnSettingsChanged(string[] keys)
    {
        if (keys.Contains(SettingKeys.Zoom))
        {
            InvokeAsync(UpdateZoom);
        }
    }

    public async Task UpdateZoom()
    {
        if (ZoomHandler != null)
        {
            var zoom = await SettingsService.GetString(SettingKeys.Zoom);
            await ZoomHandler.InvokeVoidAsync("update", zoom);
        }
    }

    [JSInvokable]
    public async Task OnResize(int width, int height)
    {
        await OnResizeChanged.InvokeAsync((width, height));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Module = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/Sidekick.Common.Ui/App/AppWrapper.razor.js");
            ZoomHandler = await Module.InvokeAsync<IJSObjectReference>("initializeZoomHandling");

            Reference = DotNetObjectReference.Create(this);
            await Module.InvokeVoidAsync("initializeResizeHandling", ElementId, Reference);

            await UpdateZoom();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async ValueTask DisposeAsync()
    {
        if (ZoomHandler != null)
        {
            await ZoomHandler.DisposeAsync();
        }

        if (Module != null)
        {
            await Module.DisposeAsync();
        }

        SettingsService.OnSettingsChanged -= SettingsServiceOnOnSettingsChanged;
    }

}
