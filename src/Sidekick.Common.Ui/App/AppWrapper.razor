@using Microsoft.AspNetCore.Components.Sections
@using Sidekick.Common.Settings

<ErrorFullScreenBoundary>
    <div
        class="font-sans w-full h-[calc(var(--vh))] overflow-y-auto overflow-x-hidden dark:bg-stone-900 text-white text-base"
        style="@Style">
        @ChildContent
    </div>

    <div class="font-sans text-base">
        <SectionOutlet SectionName="sidekick-overlay"/>
    </div>
</ErrorFullScreenBoundary>

@inject IJSRuntime JsRuntime
@inject ISettingsService SettingsService
@implements IAsyncDisposable

@code {

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private IJSObjectReference? Module { get; set; }

    private IJSObjectReference? ZoomHandler { get; set; }

    private string? Style { get; set; }

    protected override void OnInitialized()
    {
        SettingsService.OnSettingsChanged += SettingsServiceOnOnSettingsChanged;
        base.OnInitialized();
    }

    private void SettingsServiceOnOnSettingsChanged()
    {
        InvokeAsync(UpdateZoom);
    }

    public async Task UpdateZoom()
    {
        var zoom = await SettingsService.GetString(SettingKeys.Zoom);
        Style = $"zoom: {zoom};";
        StateHasChanged();
        if (ZoomHandler != null)
        {
            await ZoomHandler.InvokeVoidAsync("update", zoom);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Module = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/Sidekick.Common.Ui/App/AppWrapper.razor.js");
            ZoomHandler = await Module.InvokeAsync<IJSObjectReference>("initializeZoomHandling");

            await UpdateZoom();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async ValueTask DisposeAsync()
    {
        if (ZoomHandler != null)
        {
            await ZoomHandler.DisposeAsync();
        }

        if (Module != null)
        {
            await Module.DisposeAsync();
        }

        SettingsService.OnSettingsChanged -= SettingsServiceOnOnSettingsChanged;
    }

}
