<label @onmouseenter="OnMouseEnter"
       @onmousedown="OnMouseDown"
       @onkeydown="OnKeyDown"
       @onclick:preventDefault="true"
       class="flex items-center leading-none select-none @(Dense ? "min-h-4 gap-[3px]" : "min-h-5 gap-2")">
    <input type="checkbox"
           checked="@Value"
           @onchange="OnChange"
           class="@(Dense ? "w-4 h-4 min-w-4 min-h-4" : "w-5 h-5 min-w-5 min-h-5") border-2 rounded-sm bg-zinc-700 border-zinc-600 text-zinc-600 @UiClasses.FocusClasses">
    <span class="text-zinc-200 font-medium @(Dense ? "text-sm" : "text-base")">
        @ChildContent
    </span>
</label>

@code {

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool Value { get; set; }

    [Parameter]
    public EventCallback<bool> ValueChanged { get; set; }

    [Parameter]
    public bool Dense { get; set; }

    private async Task OnChange(ChangeEventArgs args)
    {
        if (bool.TryParse(args.Value?.ToString(), out var boolValue))
        {
            await ValueChanged.InvokeAsync(boolValue);
        }
        else
        {
            await ValueChanged.InvokeAsync(!Value);
        }
    }

    private async Task OnMouseEnter(MouseEventArgs args)
    {
        if (args.Buttons == 1)
        {
            Value = !Value;
            await ValueChanged.InvokeAsync(Value);
        }
    }

    private async Task OnMouseDown(MouseEventArgs args)
    {
        if (args.Buttons == 1)
        {
            Value = !Value;
            await ValueChanged.InvokeAsync(Value);
        }
    }

    private async Task OnKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == " ")
        {
            Value = !Value;
            await ValueChanged.InvokeAsync(Value);
        }
    }

}
