<div>

    @if (!string.IsNullOrEmpty(Label))
    {
        <label for="@Id"
               class="block mb-1 text-base font-medium dark:text-zinc-300">
            @Label
        </label>
    }

    <select id="@Id"
            @onchange="OnChange"
            class="@UiClasses.FormInputClasses p-2 text-base w-full">
        @if (Options.All(x => GetOptionValue(x.Value) != GetOptionValue(Value)))
        {
            <option selected></option>
        }

        @if (Options.All(x => x.Group != null))
        {
            foreach (var group in Options.GroupBy(x => x.Group))
            {
                <optgroup label="@group.Key">
                    @foreach (var option in group)
                    {
                        <option selected="@(GetOptionValue(option.Value) == GetOptionValue(Value))" value="@GetOptionValue(option.Value)" disabled="@option.Disabled">@option.Label</option>
                    }
                </optgroup>
            }
        }
        else
        {
            foreach (var option in Options)
            {
                <option selected="@(GetOptionValue(option.Value) == GetOptionValue(Value))" value="@GetOptionValue(option.Value)" disabled="@option.Disabled">@option.Label</option>
            }
        }
    </select>

</div>

@code {

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public string? Value { get; set; }

    [Parameter]
    public EventCallback<string?> ValueChanged { get; set; }

    [Parameter]
    public List<SelectOption> Options { get; set; } = new();

    protected string Id { get; } = UiUtilities.GenerateId();

    protected string GetOptionValue(string? value) => value ?? "null";

    protected async Task OnChange(ChangeEventArgs args)
    {
        var newValue = args.Value?.ToString();
        if (newValue == "null")
        {
            newValue = null;
        }

        await ValueChanged.InvokeAsync(newValue);
    }
}
