<label class="flex items-center leading-none select-none @(Dense ? "min-h-4 gap-[3px]" : "min-h-5 gap-2")">
    <input id="@ElementId"
           type="checkbox"
           checked="@Value"
           @onchange="OnChange"
           class="@(Dense ? "w-4 h-4 min-w-4 min-h-4" : "w-5 h-5 min-w-5 min-h-5") border-2 rounded-sm bg-zinc-700 border-zinc-600 text-zinc-600 @UiClasses.FocusClasses">
    <span class="text-zinc-200 font-medium @(Dense ? "text-sm" : "text-base")">
        @ChildContent
    </span>
</label>

@inject IJSRuntime JsRuntime

@code {

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool? Value { get; set; }

    [Parameter]
    public EventCallback<bool?> ValueChanged { get; set; }

    [Parameter]
    public bool Dense { get; set; }

    private string ElementId { get; } = UiUtilities.GenerateId();

    private IJSObjectReference? Module { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Module = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/Sidekick.Common.Ui/Forms/FormTriStateCheckbox.razor.js");
            await Module.InvokeVoidAsync("setIndeterminate", ElementId, Value == null);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnChange(ChangeEventArgs args)
    {
        bool? checkboxValue = Value switch
        {
            null => true,
            true => false,
            false => null
        };

        await ValueChanged.InvokeAsync(checkboxValue);

        if (Module != null)
        {
            await Module.InvokeVoidAsync("setIndeterminate", ElementId, checkboxValue == null);
        }
    }

}
