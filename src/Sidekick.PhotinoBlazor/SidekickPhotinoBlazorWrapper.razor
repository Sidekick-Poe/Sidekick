@using Photino.Blazor
@using Sidekick.Common.Platform
@using Sidekick.Common.Platform.EventArgs
@using Sidekick.Common.Ui.Views
@using Sidekick.PhotinoBlazor.Services

<Sidekick.Common.Blazor.Main />

@inject ICurrentView CurrentView
@inject PhotinoBlazorViewLocator ViewLocator
@inject PhotinoBlazorApp PhotinoBlazorApp
@inject IKeyboardProvider KeyboardProvider
@inject IApplicationService ApplicationService
@implements IDisposable

@code {

    [Inject]
    public required NavigationManager NavigationManager { get; set; }

    protected override void OnInitialized()
    {
        ViewLocator.Views.Add(this);

        CurrentView.ViewMinimized += CurrentViewMinimized;
        CurrentView.ViewMaximized += CurrentViewMaximized;
        CurrentView.ViewClosed += CurrentViewClosed;
        CurrentView.ViewStartDragging += ViewStartDragging;

        base.OnInitialized();
    }

    private void CurrentViewMinimized()
    {
        PhotinoBlazorApp.MainWindow.SetMinimized(true);
    }

    private void CurrentViewMaximized()
    {
        PhotinoBlazorApp.MainWindow.SetMaximized(!PhotinoBlazorApp.MainWindow.Maximized);
    }

    private void CurrentViewClosed()
    {
        if (new Uri(NavigationManager.Uri).PathAndQuery == "/home")
        {
            ApplicationService.Shutdown();
        }
    }

    private void ViewStartDragging(int offsetX, int offsetY)
    {
        void OnMouseDrag(DraggedEventArgs args)
        {
            PhotinoBlazorApp.MainWindow.SetTop(args.Y - offsetY);
            PhotinoBlazorApp.MainWindow.SetLeft(args.X - offsetX);
        }

        KeyboardProvider.OnMouseDrag += OnMouseDrag;

        CurrentView.ViewStopDragging += Unsubscribe;
        void Unsubscribe()
        {
            KeyboardProvider.OnMouseDrag -= OnMouseDrag;
            CurrentView.ViewStopDragging -= Unsubscribe;
        }
    }

    public void Dispose()
    {
        ViewLocator.Views.Remove(this);
        CurrentView.ViewClosed -= CurrentViewClosed;
    }

}
