@page "/map/{itemText}"
@layout OverlayLayout

<MudPaper Class="pa-2 mb-2">
    <MudText Typo="Typo.h1" Align="Align.Center" Color="@(DangerousMods.Any() ? Color.Error: Color.Success)" Class="d-flex justify-center align-center">
        <MudIcon Icon="@(DangerousMods.Any() ? Icons.Filled.ThumbDown : Icons.Filled.ThumbUp)" Size="Size.Large" Class="mr-2" />
        @(DangerousMods.Any() ? Resources.Is_Unsafe : Resources.Is_Safe)
    </MudText>
</MudPaper>

<MudGrid Spacing="2">
    <MudItem xs="12" sm="@(PoeWikiClient.IsEnabled ? 6 : 12)" Class="d-flex flex-grow-1">
        <MudPaper Class="pa-4 flex-grow-1">
            @foreach (var mod in DangerousMods)
            {
                <MudText Typo="Typo.body1" Class="d-flex align-center">
                    <MudIcon Icon="@Icons.Filled.ThumbDown" Size="Size.Small" Color="Color.Error" Class="mr-2" />
                    @mod
                </MudText>
            }

            @if (DangerousMods.Any() && OkMods.Any())
            {
                <MudDivider Class="ma-2" />
            }

            @foreach (var mod in OkMods)
            {
                <MudText Typo="Typo.body2" Class="d-flex align-center">
                    <MudIcon Icon="@Icons.Filled.ThumbUp" Size="Size.Small" Color="Color.Success" Class="mr-2" />
                    @mod
                </MudText>
            }
        </MudPaper>
    </MudItem>
    @if (PoeWikiClient.IsEnabled)
    {
        <MudItem xs="12" sm="6" Class="d-flex flex-grow-1">
            @if (Item != null)
            {
                <MudPaper Class="d-flex flex-grow-1 pa-4">
                    <PoeWikiMapInfo Item="Item" />
                </MudPaper>
            }
        </MudItem>
    }
</MudGrid>

@code {
    [Inject] private MapInfoResources Resources { get; set; }
    [Inject] private IViewInstance ViewInstance { get; set; }
    [Inject] private IItemParser ItemParser { get; set; }
    [Inject] private ISettings Settings { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }
    [Inject] private IPoeWikiClient PoeWikiClient { get; set; }

    [Parameter] public string ItemText { get; set; }

    private List<string> DangerousMods { get; set; } = new();
    private List<string> OkMods { get; set; } = new();
    private Item Item { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Item = ItemParser.ParseItem(ItemText.DecodeBase64Url());
        if (Item == null)
        {
            NavigationManager.NavigateTo("/error/unparsable");
            return;
        }
        if (Item.Metadata.Category != Category.Map && Item.Metadata.Category != Category.Contract)
        {
            NavigationManager.NavigateTo("/error/invalid");
            return;
        }

        await ViewInstance.Initialize(Item.Original.Type, isOverlay: true, closeOnBlur: Settings.Map_CloseWithMouse);

        DangerousMods.Clear();
        OkMods.Clear();

        var dangerousModsRegex = new Regex(Settings.Map_Dangerous_Regex, RegexOptions.IgnoreCase);
        FilterMods(dangerousModsRegex, Item.Modifiers.Enchant);
        FilterMods(dangerousModsRegex, Item.Modifiers.Implicit);
        FilterMods(dangerousModsRegex, Item.Modifiers.Explicit);
        FilterMods(dangerousModsRegex, Item.Modifiers.Fractured);
        FilterMods(dangerousModsRegex, Item.Modifiers.Crafted);
        FilterMods(dangerousModsRegex, Item.Modifiers.Scourge);

        await base.OnInitializedAsync();
    }

    private void FilterMods(Regex modRegex, List<Modifier> modifiers)
    {
        if (string.IsNullOrWhiteSpace(Settings.Map_Dangerous_Regex))
        {
            OkMods.AddRange(modifiers.Select(x => x.Text));
            return;
        }

        foreach (var mod in modifiers)
        {
            if (modRegex.IsMatch(mod.Text))
            {
                DangerousMods.Add(mod.Text);
            }
            else
            {
                OkMods.Add(mod.Text);
            }
        }
    }
}
