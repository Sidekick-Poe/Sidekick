@page "/map/{itemText}"
@layout OverlayLayout

@if (Item == null)
{
    <LoadingAlert Text="@Resources.Parsing" />
}
else
{
    <MudDrawer Open="true"
           Variant="@DrawerVariant.Persistent"
           Width="22em"
           Class="black"
           ClipMode="DrawerClipMode.Always">
        <ItemHeaderComponent Name="@Item.Original.Name"
                         Type="@Item.Original.Type"
                         Rarity="Item.Metadata.Rarity"
                         Influences="Item.Influences"
                         IsRelic="Item.Properties.IsRelic" />

        <MudText Typo="Typo.h1" Align="Align.Center" Color="@(DangerousMods.Any() ? Color.Error: Color.Success)" Class="d-flex justify-center align-center pa-4">
            <MudIcon Icon="@(DangerousMods.Any() ? Icons.Filled.ThumbDown : Icons.Filled.ThumbUp)" Size="Size.Large" Class="mr-2" />
            @(DangerousMods.Any() ? Resources.Is_Unsafe : Resources.Is_Safe)
        </MudText>

        <ItemSeparator Rarity="Item.Metadata.Rarity" />

        @foreach (var mod in DangerousMods)
        {
            <div class="d-flex align-center px-4 py-1">
                <MudIcon Icon="@Icons.Filled.ThumbDown" Size="Size.Small" Color="Color.Error" Class="mr-2" />
                <ItemModifierText Text="@mod" />
            </div>
        }

        @if (DangerousMods.Any() && OkMods.Any())
        {
            <ItemSeparator Rarity="Item.Metadata.Rarity" />
        }

        @foreach (var mod in OkMods)
        {
            <div class="d-flex align-center px-4 py-1">
                <MudIcon Icon="@Icons.Filled.ThumbUp" Size="Size.Small" Color="Color.Success" Class="mr-2" />
                <ItemModifierText Text="@mod" />
            </div>
        }
    </MudDrawer>

    <div class="ml-0">
        <PoeWikiMapInfo Item="Item" />
    </div>
}

@code {
    [Inject] private MapInfoResources Resources { get; set; }
    [Inject] private IViewInstance ViewInstance { get; set; }
    [Inject] private IItemParser ItemParser { get; set; }
    [Inject] private ISettings Settings { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }
    [Inject] private IPoeWikiClient PoeWikiClient { get; set; }

    [Parameter] public string ItemText { get; set; }

    private List<string> DangerousMods { get; set; } = new();
    private List<string> OkMods { get; set; } = new();
    private Item Item { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (PoeWikiClient.IsEnabled)
        {
            await ViewInstance.Initialize(Resources.Title, width: 616, isOverlay: true, closeOnBlur: Settings.Map_CloseWithMouse);
        }
        else
        {
            await ViewInstance.Initialize(Resources.Title, width: 308, isOverlay: true, closeOnBlur: Settings.Map_CloseWithMouse);
        }
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        Item = await ItemParser.ParseItemAsync(ItemText.DecodeBase64Url());

        if (Item == null)
        {
            NavigationManager.NavigateTo(ErrorType.Unparsable.ToUrl());
            return;
        }

        if (Item.Metadata.Category != Category.Map && Item.Metadata.Category != Category.Contract)
        {
            NavigationManager.NavigateTo(ErrorType.InvalidItem.ToUrl());
            return;
        }

        DangerousMods.Clear();
        OkMods.Clear();

        var dangerousModsRegex = new Regex(Settings.Map_Dangerous_Regex, RegexOptions.IgnoreCase);
        FilterMods(dangerousModsRegex, Item.ModifierLines);

        await base.OnParametersSetAsync();
    }

    private void FilterMods(Regex modRegex, List<ModifierLine> modifierLines)
    {
        if (string.IsNullOrWhiteSpace(Settings.Map_Dangerous_Regex))
        {
            OkMods.AddRange(modifierLines.Select(x => x.Text));
            return;
        }

        foreach (var mod in modifierLines)
        {
            if (modRegex.IsMatch(mod.Text))
            {
                DangerousMods.Add(mod.Text);
            }
            else
            {
                OkMods.Add(mod.Text);
            }
        }
    }
}
