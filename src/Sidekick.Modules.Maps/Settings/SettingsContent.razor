@using Sidekick.Common.Blazor.Settings
@using Sidekick.Common.Platform
@using Sidekick.Common.Blazor.Settings.Components
@using Sidekick.Modules.Maps.Localization
@using Sidekick.Common.Settings
@implements IDisposable
@inject IApplicationService ApplicationService

@if (ApplicationService.SupportsKeybinds)
{
    <FormFieldset Legend="@SettingResources["Keybindings"]">
        <SettingKeybindEditor SettingKey="@SettingKeys.KeyOpenMapCheck" Label="@Resources["Map_Key_Check"]" />
    </FormFieldset>
}

<FormFieldset Legend="@Resources["Dangerous_Modifiers"]">
    <SettingTextEditor SettingKey="@SettingKeys.MapCheckDangerousRegex" Label="@Resources["Map_Dangerous_Regex"]" Tooltip="@SettingResources["Regex_Hint"]" />
</FormFieldset>

<div class="flex justify-center mb-1">
    <ButtonPrimary Disabled="!AreSettingsModified" OnClick="RestoreDefaults">@SettingResources["Restore_Defaults"]</ButtonPrimary>
</div>

@inject IStringLocalizer<SettingsResources> SettingResources
@inject IStringLocalizer<MapInfoResources> Resources
@inject ISettingsService SettingsService

@code {

    private bool AreSettingsModified { get; set; }

    private string[] SettingKeysUsed { get; } =
    {
        SettingKeys.KeyOpenMapCheck,
        SettingKeys.MapCheckDangerousRegex,
    };

    protected override async Task OnInitializedAsync()
    {
        SettingsService.OnSettingsChanged += CheckIfSettingsAreModified;

        CheckIfSettingsAreModified(SettingKeysUsed);

        await base.OnInitializedAsync();
    }

    private async void CheckIfSettingsAreModified(string[] keys)
    {
        if (!keys.Any(key => SettingKeysUsed.Contains(key)))
        {
            return;
        }

        AreSettingsModified = await SettingsService.IsSettingModified(SettingKeysUsed);
        await InvokeAsync(StateHasChanged);
    }

    private async void RestoreDefaults()
    {
        await SettingsService.DeleteSetting(SettingKeysUsed);

        AreSettingsModified = false;

        StateHasChanged();
    }

    public void Dispose()
    {
        SettingsService.OnSettingsChanged -= CheckIfSettingsAreModified;
    }

}
