@using Sidekick.Common.Blazor.Settings
@using Sidekick.Common.Settings

<FormInput Value="@MapCheckDangerousRegex"
           ValueChanged="@MapCheckDangerousRegexChanged"
           Label="@Resources["Map_Dangerous_Regex"]" />

@inject IStringLocalizer<SettingsResources> Resources
@inject ISettingsService SettingsService

@code {

    private string? MapCheckDangerousRegex { get; set; }

    protected override async Task OnInitializedAsync()
    {
        MapCheckDangerousRegex = await SettingsService.GetString(SettingKeys.MapCheckDangerousRegex);
        SettingsService.OnSettingsChanged += OnSettingsChanged;

        await base.OnInitializedAsync();
    }

    private async Task MapCheckDangerousRegexChanged(string? value)
    {
        MapCheckDangerousRegex = value;
        await SettingsService.Set(SettingKeys.MapCheckDangerousRegex, value);
    }

    private async void OnSettingsChanged(string[] keys)
    {
        if (keys.Contains(SettingKeys.MapCheckDangerousRegex))
        {
            MapCheckDangerousRegex = await SettingsService.GetString(SettingKeys.MapCheckDangerousRegex);
            await InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        SettingsService.OnSettingsChanged -= OnSettingsChanged;
    }

}
