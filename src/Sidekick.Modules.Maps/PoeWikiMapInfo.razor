<div class="d-flex flex-column flex-grow-1">
    <MudText Typo="Typo.h5" Color="Color.Info" Align="Align.Center">@Resources.PoeWikiTitle</MudText>

    @if (Loading)
    {
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Class="flex-grow-1 d-flex my-2" Style="height: 100%;" />
    }
    else if (Map != null)
    {
        <div>
            <MudText>@Map.Name</MudText>
            @if (Map.Drops.Any())
            {
                <MudText Typo="Typo.subtitle2" Class="my-2">@Resources.DropsTitle</MudText>
                <MudPaper Class="mb-2" Elevation="2" Outlined>
                    <MudList Clickable Dense DisablePadding Class="info-section">
                        @foreach (var drop in Map.Drops.OrderBy(x => x.Name))
                        {
                            <MudListItem OnClick="@(() => PoeWikiClient.OpenUri(drop))">@drop.Name</MudListItem>
                        }
                    </MudList>
                </MudPaper>
            }
            else
            {
                <MudText>@Resources.NoDropsTitle</MudText>
            }

            @if (Map.Bosses.Any())
            {
                <MudText Typo="Typo.subtitle2" Class="my-2">@Resources.MapBossesTitle</MudText>
                <MudPaper Class="mb-2" Elevation="2" Outlined>
                    <MudList Clickable Dense DisablePadding Class="info-section">
                        @foreach (var boss in Map.Bosses.OrderBy(x => x.Name))
                        {
                            <MudListItem OnClick="@(() => PoeWikiClient.OpenUri(boss))">@boss.Name</MudListItem>
                        }
                    </MudList>
                </MudPaper>
            }
        </div>

        <MudButton Class="mt-2" Variant="Variant.Filled" Size="Size.Small" EndIcon="@Icons.Material.Filled.OpenInBrowser" OnClick="@(() => PoeWikiClient.OpenUri(Map))">@Resources.OpenInPoeWiki</MudButton>
    }
    else
    {
        <div>
            <MudText Color="Color.Error" Class="mb-2">@Resources.PoeWikiError</MudText>
        </div>
    }

</div>

@code {
    [Inject] private MapInfoResources Resources { get; set; }
    [Inject] private IPoeWikiClient PoeWikiClient { get; set; }

    [Parameter] public Item Item { get; set; }

    private bool Loading { get; set; } = true;
    private Map Map { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Loading)
        {
            Map = await PoeWikiClient.GetMap(Item);
            Loading = false;
        }
    }
}
