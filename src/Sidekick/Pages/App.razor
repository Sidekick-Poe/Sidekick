<Router AppAssembly="@typeof(Program).Assembly" AdditionalAssemblies="Sidekick.Common.Blazor.SidekickModule.Modules.Select(x=>x.Assembly)">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(WindowLayout)" />
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(WindowLayout)">
            <MudPaper Class="pa-3 mb-4 d-flex flex-row align-center">
                <MudIcon Size="Size.Large" Color="Color.Error" Icon="@Icons.Filled.Error" Class="mr-3" />
                <MudText Align="Align.Center">
                    Page not found.
                </MudText>
            </MudPaper>
        </LayoutView>
    </NotFound>
</Router>

<MudThemeProvider Theme="Theme" />
<MudDialogProvider />
<MudSnackbarProvider />

@if (Startup.IsDevelopmentSite)
{
    <style>
        html, body {
            background: #303030;
        }
    </style>
}

@code {
    [Inject] private ISettings Settings { get; set; }

    private MudTheme Theme { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Theme = new MudTheme()
        {
            Palette = GetPalette(),

            LayoutProperties = new LayoutProperties()
            {
                AppbarHeight = "32px",
            },

            Typography = new Typography()
            {
                H1 = CreateTypography<H1>("1.5rem"),
                H2 = CreateTypography<H2>("1.375rem"),
                H3 = CreateTypography<H3>("1.25rem"),
                H4 = CreateTypography<H4>("1.125rem"),
                H5 = CreateTypography<H5>("1rem"),
                H6 = CreateTypography<H6>("0.875rem"),
                Subtitle1 = CreateTypography<Subtitle1>("1.25rem"),
                Subtitle2 = CreateTypography<Subtitle2>("1.125rem"),
                Body1 = CreateTypography<Body1>("0.875rem"),
                Body2 = CreateTypography<Body2>("0.875rem"),
                Button = CreateTypography<Button>("1rem"),
                Caption = CreateTypography<Caption>("0.75rem"),
                Overline = CreateTypography<Overline>("0.875rem"),
                Default = CreateTypography<Default>("0.875rem"),
            },
        };
    }

    private T CreateTypography<T>(string fontSize)
        where T : BaseTypography, new()
    {
        var typo = new T();
        if (typo is BaseTypography baseTypo)
        {
            baseTypo.FontFamily = new[] { "fontin", "system-ui", "-apple-system", "Arial", "sans-serif" };
            baseTypo.FontSize = fontSize;
            baseTypo.FontWeight = 400;
            baseTypo.LetterSpacing = "none";
            baseTypo.LineHeight = 1.2;
        }
        return typo;
    }

    private Palette GetPalette()
    {
        return Settings.Theme switch
        {
            "Transparent" => GetTransparentPalette(),
            "Cyan" => GetCyanPalette(),
            "Default" => GetDefaultPalette(),
            _ => GetDefaultPalette(),
        };
    }

    private Palette GetDefaultPalette() => new Palette()
    {
        Black = "#27272f",
        Background = "#32333d",
        BackgroundGrey = "#27272f",
        Surface = "#373740",
        Divider = "#757575",
        DividerLight = "#E0E0E0",

        DrawerBackground = "#27272f",
        DrawerText = "rgba(255,255,255, 0.50)",
        DrawerIcon = "rgba(255,255,255, 0.50)",

        AppbarBackground = "#27272f",
        AppbarText = "rgba(255,255,255, 0.70)",

        TextPrimary = "rgba(255,255,255, 0.70)",
        TextSecondary = "rgba(255,255,255, 0.50)",
        TextDisabled = "rgba(255,255,255, 0.40)",

        ActionDefault = "#adadb1",
        ActionDisabled = "rgba(255,255,255, 0.26)",
        ActionDisabledBackground = "rgba(255,255,255, 0.12)",
    };

    private Palette GetCyanPalette() => new Palette()
    {
        Black = "#212121",
        Background = "#212121",
        BackgroundGrey = "#212121",
        Surface = "#424242",
        Divider = "#757575",
        DividerLight = "#E0E0E0",

        DrawerBackground = "#006064",
        DrawerText = "rgba(255,255,255, 0.90)",
        DrawerIcon = "rgba(255,255,255, 0.90)",

        AppbarBackground = "#0097A7",
        AppbarText = "rgba(255,255,255, 0.90)",

        TextPrimary = "rgba(255,255,255, 0.80)",
        TextSecondary = "rgba(255,255,255, 0.70)",
        TextDisabled = "rgba(255,255,255, 0.40)",

        ActionDefault = "#00ACC1",
        ActionDisabled = "rgba(255,255,255, 0.30)",
        ActionDisabledBackground = "rgba(255,255,255, 0.15)",

        Primary = "#00ACC1",
        PrimaryContrastText = "rgba(255,255,255, 0.90)",
        PrimaryLighten = "#80DEEA",
        PrimaryDarken = "#00838F",
    };

    private Palette GetTransparentPalette() => new Palette()
    {
        Black = Rgba("#000000", 0.5),
        Background = Rgba("#000000", 0.7),
        BackgroundGrey = Rgba("#212121", 0.5),
        Surface = Rgba("#000000", 0.4),
        Divider = Rgba("#FFFFFF", 0.25),
        DividerLight = Rgba("#E0E0E0", 0.5),

        DrawerBackground = Rgba("#212121", 0.85),
        DrawerText = "rgba(255,255,255, 0.90)",
        DrawerIcon = "rgba(255,255,255, 0.90)",

        AppbarBackground = Rgba("#424242", 0.6),
        AppbarText = "rgba(255,255,255, 0.90)",

        TextPrimary = "rgba(255,255,255, 0.80)",
        TextSecondary = "rgba(255,255,255, 0.70)",
        TextDisabled = "rgba(255,255,255, 0.40)",

        ActionDefault = "#283593",
        ActionDisabled = "rgba(255,255,255, 0.30)",
        ActionDisabledBackground = "rgba(255,255,255, 0.15)",

        Primary = "#283593",
        PrimaryContrastText = "rgba(255,255,255, 0.90)",
        PrimaryLighten = "#5C6BC0",
        PrimaryDarken = "#1A237E",
    };

    private static string Rgba(string hexString, double transparency)
    {
        hexString = hexString.Replace("#", "");

        var r = int.Parse(hexString.Substring(0, 2), System.Globalization.NumberStyles.AllowHexSpecifier);
        var g = int.Parse(hexString.Substring(2, 2), System.Globalization.NumberStyles.AllowHexSpecifier);
        var b = int.Parse(hexString.Substring(4, 2), System.Globalization.NumberStyles.AllowHexSpecifier);

        return $"rgba({r}, {g}, {b}, {transparency})";
    }
}
