@page "/error/{type}"
@page "/error/{type}/{additionalInformation}"
@layout OverlayLayout

<div class="d-flex justify-center pa-8">
    <MudAlert Severity="Severity.Error" Variant="Variant.Filled">
        @Text

        @if (!string.IsNullOrEmpty(AdditionalInformation))
        {
            <div class="mt-3">
                @Resources.AdditionalInformation <b>@AdditionalInformation</b>
            </div>
        }
    </MudAlert>
</div>

<div class="d-flex justify-center">
    <MudButton Variant="Variant.Filled"
               Color="Color.Primary"
               OnClick="ViewInstance.Close">
        @Resources.Close
    </MudButton>
</div>

@code {
    [Inject] private IViewInstance ViewInstance { get; set; }
    [Inject] private ErrorResources Resources { get; set; }

    [Parameter] public string Type { get; set; }
    [Parameter] public string AdditionalInformation { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await ViewInstance.Initialize(Resources.Title, width: 400, height: 260, isModal: true);
        await base.OnInitializedAsync();
    }

    private string Text => Enum.Parse<ErrorType>(Type) switch
    {
        ErrorType.InvalidItem => Resources.InvalidItemError,
        ErrorType.UnavailableTranslation => Resources.AvailableInEnglishError,
        ErrorType.Unparsable => Resources.ParserError,
        ErrorType.ApiError => Resources.ApiError,
        _ => Resources.Error,
    };
}
