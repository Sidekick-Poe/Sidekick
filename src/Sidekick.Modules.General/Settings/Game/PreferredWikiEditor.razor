@using Microsoft.Extensions.Localization
@using Sidekick.Common.Blazor.Settings
@using Sidekick.Common.Enums
@using Sidekick.Common.Settings
@using Sidekick.Common.Ui.Forms
@using Sidekick.Common.Ui.Icons
@using Sidekick.Common.Ui.Buttons
@using Sidekick.Modules.General.Localization

<FormSelect Value="@Value"
            ValueChanged="ValueChanged"
            Label="@Resources["Wiki_Preferred"]"
            Options="Options">
    <AdornmentContent>
        @if (ShowResetButton)
        {
            <ButtonIcon OnClick="Reset" title="@SettingResources["Reset"]">
                <Icon Svg="@UiIcons.Reset"/>
            </ButtonIcon>
        }
    </AdornmentContent>
</FormSelect>

@inject IStringLocalizer<SettingsResources> SettingResources
@inject IStringLocalizer<GeneralResources> Resources
@inject ISettingsService SettingsService
@implements IDisposable

@code {

    private string? Value { get; set; }

    private List<SelectOption> Options { get; set; } = new();

    private const string SettingKey = SettingKeys.PreferredWiki;

    private bool ShowResetButton { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Value = await SettingsService.GetString(SettingKey);
        ShowResetButton = await SettingsService.IsSettingModified(SettingKey);

        SettingsService.OnSettingsChanged += OnSettingsChanged;

        Options = Enum.GetValues<WikiSetting>()
            .Select(x => new SelectOption()
            {
                Value = x.GetValueAttribute().ToString(),
                Label = Resources[x.GetValueAttribute()],
            })
            .ToList();

        await base.OnInitializedAsync();
    }

    private async Task ValueChanged(string? value)
    {
        Value = value;
        await SettingsService.Set(SettingKey, Value);
    }

    private async void OnSettingsChanged(string[] keys)
    {
        if (!keys.Contains(SettingKey)) return;

        Value = await SettingsService.GetString(SettingKey);
        ShowResetButton = await SettingsService.IsSettingModified(SettingKey);
        await InvokeAsync(StateHasChanged);
    }

    private async Task Reset()
    {
        await SettingsService.DeleteSetting(SettingKey);
    }

    public void Dispose()
    {
        SettingsService.OnSettingsChanged -= OnSettingsChanged;
    }

}
