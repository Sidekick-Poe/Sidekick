@using Microsoft.Extensions.Localization
@using Sidekick.Common.Platform
@using Sidekick.Common.Settings
@using Sidekick.Common.Ui.Forms
@using Sidekick.Common.Ui.App
@using Sidekick.Common.Ui.Buttons
@using Sidekick.Common.Cache
@using Sidekick.Modules.General.Localization
@using Sidekick.Common.Ui.Layouts
@using Sidekick.Common.Ui.Localization
@using Sidekick.Modules.General.Settings.Components
@using Sidekick.Common.Ui.Settings

<LayoutMenu>
    <AppContainer>
        <FormFieldset Legend="@SettingResources["General_Settings"]">
            <LanguageParserEditor/>
            <LeagueIdEditor/>

            <div class="py-2">
                <ButtonPrimary OnClick="ResetCache">@SettingResources["Reset_Cache"]</ButtonPrimary>
            </div>
        </FormFieldset>

        @if (ApplicationService.SupportsKeybinds)
        {
            <FormFieldset Legend="@Resources["Wiki"]">
                <SettingKeybindEditor SettingKey="@SettingKeys.KeyOpenWiki" Label="@Resources["Wiki_Key_Open"]"/>
                <PreferredWikiEditor/>
            </FormFieldset>
        }

        @if (ApplicationService.SupportsKeybinds)
        {
            <FormFieldset Legend="@SettingResources["Other_Settings"]">
                <SettingCheckboxEditor SettingKey="@SettingKeys.MouseWheelNavigateStash">
                    <TextWithKeybinds Text="@Resources["MouseWheelNavigateStash"]"
                                      Keybinds="@(["Ctrl+MWheel"])" />
                </SettingCheckboxEditor>
                <SettingCheckboxEditor SettingKey="@SettingKeys.MouseWheelNavigateStashReverse"
                                       Label="@Resources["MouseWheelNavigateStashReverse"]"/>
                <SettingKeybindEditor SettingKey="@SettingKeys.KeyFindItems" Label="@Resources["Key_FindItems"]"/>
                <SettingKeybindEditor SettingKey="@SettingKeys.KeyOpenInCraftOfExile"
                                      Label="@Resources["Key_Open_In_Craft_Of_Exile"]"/>
            </FormFieldset>
        }

        <div class="flex justify-center mb-1">
            <ButtonPrimary Disabled="!AreSettingsModified"
                           OnClick="RestoreDefaults">@UiResources["Restore_Defaults"]</ButtonPrimary>
        </div>
    </AppContainer>
</LayoutMenu>

@page "/settings/game"
@inject IApplicationService ApplicationService
@inject IStringLocalizer<SettingsResources> SettingResources
@inject IStringLocalizer<UiResources> UiResources
@inject IStringLocalizer<GeneralResources> Resources
@inject ISettingsService SettingsService
@inject ICacheProvider CacheProvider
@inject NavigationManager NavigationManager
@implements IDisposable

@code {

    private bool AreSettingsModified { get; set; }

    private string[] SettingKeysUsed { get; } =
    [
        SettingKeys.KeyOpenWiki,
        SettingKeys.PreferredWiki,
        SettingKeys.MouseWheelNavigateStash,
        SettingKeys.MouseWheelNavigateStashReverse,
        SettingKeys.KeyFindItems,
        SettingKeys.KeyOpenInCraftOfExile,
    ];

    public async Task ResetCache()
    {
        await CacheProvider.Clear();
        NavigationManager.NavigateTo("/initialize");
    }

    protected override async Task OnInitializedAsync()
    {
        SettingsService.OnSettingsChanged += CheckIfSettingsAreModified;

        CheckIfSettingsAreModified(SettingKeysUsed);

        await base.OnInitializedAsync();
    }

    private async void CheckIfSettingsAreModified(string[] keys)
    {
        if (!keys.Any(key => SettingKeysUsed.Contains(key)))
        {
            return;
        }

        AreSettingsModified = await SettingsService.IsSettingModified(SettingKeysUsed);
        await InvokeAsync(StateHasChanged);
    }

    private async void RestoreDefaults()
    {
        await SettingsService.DeleteSetting(SettingKeysUsed);

        AreSettingsModified = false;

        StateHasChanged();
    }

    public void Dispose()
    {
        SettingsService.OnSettingsChanged -= CheckIfSettingsAreModified;
    }

}
