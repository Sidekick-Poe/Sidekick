@using Microsoft.Extensions.Localization
@using Sidekick.Common.Blazor.Settings
@using Sidekick.Common.Settings
@using Sidekick.Common.Ui.Forms
@using Sidekick.Common.Ui.Icons
@using Sidekick.Common.Ui.Buttons
@using Sidekick.Modules.General.Localization

<FormSelect Value="@Value"
            ValueChanged="ValueChanged"
            Label="@Resources["Zoom"]"
            Options="Options"
            Tooltip="@Resources["Zoom_Hint"]">
    <AdornmentContent>
        <div class="flex ml-1 gap-1 align-center">
            @if (ShowResetButton)
            {
                <ButtonIcon OnClick="Reset" title="@SettingResources["Reset"]">
                    <Icon Svg="@UiIcons.Reset" />
                </ButtonIcon>
            }
        </div>
    </AdornmentContent>
</FormSelect>

@inject IStringLocalizer<SettingsResources> SettingResources
@inject IStringLocalizer<GeneralResources> Resources
@inject ISettingsService SettingsService
@implements IDisposable

@code {

    private string? Value { get; set; }

    private List<SelectOption> Options { get; set; } = new();

    private const string SettingKey = SettingKeys.Zoom;

    private bool ShowResetButton { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Value = await SettingsService.GetString(SettingKey);
        ShowResetButton = await SettingsService.IsSettingModified(SettingKey);

        SettingsService.OnSettingsChanged += OnSettingsChanged;

        Options = [
            new()
            {
                Label = "75%",
                Value = "0.75",
            },
            new()
            {
                Label = "100%",
                Value = "1",
            },
            new()
            {
                Label = "125%",
                Value = "1.25",
            },
            new()
            {
                Label = "150%",
                Value = "1.5",
            },
            new()
            {
                Label = "175%",
                Value = "1.75",
            },
            new()
            {
                Label = "200%",
                Value = "2",
            },
        ];

        await base.OnInitializedAsync();
    }

    private async Task ValueChanged(string? value)
    {
        Value = value;

        await SettingsService.Set(SettingKey, value);
    }

    private async void OnSettingsChanged(string[] keys)
    {
        if (!keys.Contains(SettingKey)) return;

        Value = await SettingsService.GetString(SettingKey);
        ShowResetButton = await SettingsService.IsSettingModified(SettingKey);
        await InvokeAsync(StateHasChanged);
    }

    private async Task Reset()
    {
        await SettingsService.DeleteSetting(SettingKey);
    }

    public void Dispose()
    {
        SettingsService.OnSettingsChanged -= OnSettingsChanged;
    }

}


