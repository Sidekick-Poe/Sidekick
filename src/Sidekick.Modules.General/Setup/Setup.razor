@page "/setup"
@using System.Text.Json
@using Microsoft.Extensions.Localization
@using Sidekick.Apis.Poe.Trade
@using Sidekick.Common.Cache
@using Sidekick.Common.Extensions
@using Sidekick.Common.Platform
@using Sidekick.Common.Settings
@using Sidekick.Common.Ui.Views
@using Sidekick.Common.Ui.Layouts
@using Sidekick.Common.Ui.App
@using Sidekick.Common.Ui.Alerts
@using Sidekick.Common.Ui.Typography
@using Sidekick.Common.Ui.Progress
@using Sidekick.Common.Ui.Buttons
@using Sidekick.Modules.General.Settings.Components

<LayoutSimple>
    <TopContent>
        <AppLogo/>
    </TopContent>

    <ChildContent>
        @if (RequiresSetup)
        {
            if (NewLeagues)
            {
                <AlertInfo>@Resources["New_League_Alert"]</AlertInfo>
            }

            @if (FormInvalid)
            {
                <AlertError>@Resources["Valid_Language_Alert"]</AlertError>
            }

            <AppContainer>
                <LanguageParserEditor/>
                <LeagueIdEditor AutoRefresh="false"/>
            </AppContainer>
        }
        else
        {
            <AppContainer>
                <Heading3 Class="mb-2 text-center">@Resources["Loading"]</Heading3>
                <ProgressBar Indeterminate="true"/>
            </AppContainer>
        }
    </ChildContent>
    <BottomContent>
        @if (RequiresSetup)
        {
            <div class="px-3 py-2 flex justify-center gap-2">
                <ButtonSecondary OnClick="Exit">
                    @Resources["Exit"]
                </ButtonSecondary>
                <ButtonPrimary OnClick="() => Save()">
                    @Resources["Save"]
                </ButtonPrimary>
            </div>
        }
        else
        {
            <div class="px-3 py-2 flex justify-center gap-2">
                <ButtonPrimary OnClick="Exit">
                    @Resources["Exit"]
                </ButtonPrimary>
            </div>
        }
    </BottomContent>
</LayoutSimple>

@if (RequiresSetup)
{
    <ViewOptions Width="400" Height="360" Title="@Resources["Setup"]"/>
}
else
{
    <ViewOptions Width="@ICurrentView.DialogWidth" Height="@ICurrentView.DialogHeight" Title="@Resources["Setup"]"/>
}

@inject ISettingsService SettingsService
@inject IApplicationService ApplicationService
@inject ILeagueProvider LeagueProvider
@inject ICacheProvider CacheProvider
@inject IStringLocalizer<Setup> Resources
@inject NavigationManager NavigationManager
@inject ICurrentView CurrentView

@code {

    private bool RequiresSetup { get; set; }

    private bool NewLeagues { get; set; }

    private bool FormInvalid { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var leagues = await LeagueProvider.GetList(false);
        var apiLeaguesHash = JsonSerializer.Serialize(leagues).GetDeterministicHashCode();
        var settingsLeaguesHash = await SettingsService.GetInt(SettingKeys.LeaguesHash);
        if (apiLeaguesHash != settingsLeaguesHash)
        {
            NewLeagues = true;
            await CacheProvider.Clear();
        }

        // Check to see if we should run Setup first before running the rest of the initialization process
        var leagueId = await SettingsService.GetString(SettingKeys.LeagueId);
        var parserLanguage = await SettingsService.GetString(SettingKeys.LanguageParser);
        if (string.IsNullOrEmpty(leagueId) || leagues.All(x => x.Id != leagueId) || NewLeagues || parserLanguage == null)
        {
            RequiresSetup = true;
        }
        else
        {
            var silentStart = await SettingsService.GetBool(SettingKeys.SilentStart);
            if (silentStart)
            {
                CurrentView.Close();
            }

            NavigationManager.NavigateTo("/initialize");
        }

        await base.OnInitializedAsync();
    }

    public void Exit()
    {
        ApplicationService.Shutdown();
    }

    public async Task Save()
    {
        var leagueId = await SettingsService.GetString(SettingKeys.LeagueId);
        var leagues = await LeagueProvider.GetList(true);
        if (leagues.All(x => x.Id != leagueId))
        {
            FormInvalid = true;
            return;
        }

        var apiLeaguesHash = JsonSerializer.Serialize(leagues).GetDeterministicHashCode();
        await SettingsService.Set(SettingKeys.LeaguesHash, apiLeaguesHash);
        NavigationManager.NavigateTo("/initialize");
    }

}
