@using Sidekick.Apis.Poe.Account.Stash
@using Sidekick.Apis.Poe.Account.Stash.Models
@using Sidekick.Common.Settings
@using Sidekick.Common.Ui.Popovers
@using Sidekick.Modules.Wealth.Localization
@using Sidekick.Common.Blazor.Authentication

<Popover Placement="TooltipPlacement.Bottom">
    <PopoverAnchor>
        <ButtonSecondary>Select Tabs</ButtonSecondary>
    </PopoverAnchor>
    <PopoverContent>
        <AuthenticationStatusBar/>
        <Heading3>Stash Tabs</Heading3>
        <ButtonSecondary OnClick="Refresh">Refresh Tabs</ButtonSecondary>

        @if (TabsLoading)
        {
            <LayoutDivider/>
            <ProgressBar Indeterminate="true"/>
        }
        else if (StashTabs != null)
        {
            <LayoutDivider/>
            <AlertInfo>
                <TextBase
                    Class="mb-3">@Resources["Note that selecting too many tabs may result in a worse experience and refresh rate due to the high number of requests."]</TextBase>
                <TextBase>@Resources["Selecting the unique items or map stash tabs are not recommended due to very low performance on these tabs."]</TextBase>
            </AlertInfo>

            @foreach (var stashTab in StashTabs)
            {
                <FormCheckbox Value="IsChecked(stashTab)"
                              ValueChanged="() => Toggle(stashTab)">
                    @stashTab.Name
                </FormCheckbox>
            }
        }
    </PopoverContent>
</Popover>

@inject IStringLocalizer<WealthResources> Resources
@inject ISettingsService SettingsService
@inject IStashService StashService

@code {

    private List<string> SelectedTabs { get; set; } = [];

    private List<StashTab>? StashTabs { get; set; }

    private bool TabsLoading { get; set; }

    private async Task Refresh()
    {
        SelectedTabs = (await SettingsService.GetString(SettingKeys.WealthTrackedTabs))?.Split(',').ToList() ?? [];
        await LoadStashTabs();
    }

    private async Task LoadStashTabs()
    {
        StashTabs = await StashService.GetStashTabList();
        StateHasChanged();
    }

    private bool IsChecked(StashTab tab) => SelectedTabs.Contains(tab.Id);

    private async Task Toggle(StashTab tab)
    {
        if (IsChecked(tab))
        {
            SelectedTabs.Remove(tab.Id);
        }
        else
        {
            SelectedTabs.Add(tab.Id);
        }

        await SettingsService.Set(SettingKeys.WealthTrackedTabs, string.Join(',', SelectedTabs));
    }

}
