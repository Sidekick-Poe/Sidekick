@using MudBlazor
<div class="pl-4">
    @if (WealthParserBkp.Logs.Any())
    {
        <MudPaper Outlined="true" Class="d-flex flex-column" Style="@($"max-height:{WealthViewBkp.InventoryHeight}; background-color:transparent;")">
            <MudText Typo="Typo.h3" Class="py-2 px-4">Logs</MudText>
            <div class="flex-grow-1" style="overflow-y: scroll;">
                @for (var index = WealthParserBkp.Logs.Count - 1; index >= 0 && index > WealthParserBkp.Logs.Count - 100; index--)
                {
                    var log = WealthParserBkp.Logs.ElementAt(index);
                    <div class="d-flex align-center flex-nowrap px-2 my-2" @key="@log.Id">
                        <MudIcon Icon="@log.Icon" Color="@log.Color"></MudIcon>
                        <div class="pl-2">
                            <MudText Typo="Typo.caption">@log.Date.ToString("hh:mm:ss")</MudText>
                            <br />
                            @log.Message
                        </div>
                    </div>
                }
            </div>
        </MudPaper>
    }
</div>

@inject WealthParserBkp WealthParserBkp
@implements IDisposable
@code {
    protected override void OnInitialized()
    {
        WealthParserBkp.OnLogsChanged += OnLogEvent;
        base.OnInitialized();
    }

    private void OnLogEvent()
    {
        _ = InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        WealthParserBkp.OnLogsChanged -= OnLogEvent;
    }
}
