@using MudBlazor
@using Sidekick.Common.Database
@using ApexCharts
@using Microsoft.EntityFrameworkCore
@using Sidekick.Common.Settings

<div style="@($"height:{WealthView.ChartHeight}")" class="pb-2 pr-10 d-flex flex-column">
    <WealthHourlyRate/>

    @*
    <div class="d-flex">
    <MudButtonGroup OverrideStyles="false">
    <MudButton Color="MudBlazor.Color.Primary"
    Variant="HourlyMode ? Variant.Outlined : Variant.Filled"
    Size="MudBlazor.Size.Small"
    OnClick="() => HourlyMode = false">Net Worth</MudButton>
    <MudButton Color="MudBlazor.Color.Primary"
    Variant="HourlyMode ? Variant.Filled : Variant.Outlined"
    Size="MudBlazor.Size.Small"
    OnClick="() => HourlyMode = true">Hourly</MudButton>
    </MudButtonGroup>
    <WealthHourlyRate />
    </div>
    *@
    <div class="flex-grow-1">
        @if (Series.Any())
        {
            <ApexChart @ref="Chart"
                       TItem="DataPoint"
                       Options="Options"
                       Height="@("100%")">
                @foreach (var serie in Series)
                {
                    <ApexPointSeries TItem="DataPoint"
                                     Items="serie.Points"
                                     Name="@serie.Name"
                                     SeriesType="SeriesType.Line"
                                     XValue="@(e => e.DateString)"
                                     YValue="@(e => (decimal?)e.Value)"/>
                }
            </ApexChart>
        }
        else
        {
            <MudAlert Dense="true" Variant="Variant.Outlined" Severity="Severity.Info">The tracker needs to run for 30 minutes to start generating this graph.</MudAlert>
        }
    </div>
</div>

@inject DbContextOptions<SidekickDbContext> DbContextOptions
@inject ISettingsService SettingsService
@inject WealthParser WealthParser
@implements IDisposable

@code {

    [CascadingParameter]
    public WealthView View { get; set; } = null!;

    private List<DataSerie> Series { get; set; } =
    [
    ];

    private ApexChartOptions<DataPoint> Options { get; set; } = new();

    private ApexChart<DataPoint>? Chart { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Options = new()
        {
            Chart = new Chart
            {
                Background = "transparent",
                Toolbar = new Toolbar { Show = false },
            },
            Theme = new Theme
            {
                Mode = Mode.Dark,
                Palette = PaletteType.Palette1,
            },
            Legend = new Legend
            {
                Show = false,
                Labels = new LegendLabels
                {
                    Colors = "#999",
                }
            },
            Yaxis =
            [
                new YAxis
                {
                    Show = false,
                },],
            Xaxis = new XAxis
            {
                Labels = new XAxisLabels
                {
                    Show = false,
                },
                AxisTicks = new AxisTicks
                {
                    Color = "#666666",
                },
            },
            Grid = new Grid
            {
                Xaxis = new GridXAxis
                {
                    Lines = new Lines
                    {
                        Show = false,
                    }
                },
                Yaxis = new GridYAxis
                {
                    Lines = new Lines
                    {
                        Show = false,
                    }
                },
            },
            Tooltip = new Tooltip
            {
                Y = new TooltipY
                {
                    Formatter = @"
                      function (value) {
                        if (!value) return null;
                        return parseInt(value);
                      }"
                },
                Fixed = new TooltipFixed
                {
                    Enabled = true,
                    Position = TooltipPosition.TopLeft,
                }
            },
        };

        WealthParser.OnSnapshotTaken += Update;
        View.OnSelectedStashIdsChanged += Update;
        await LoadData();
        await base.OnInitializedAsync();
    }

    public void Update()
    {
        _ = InvokeAsync(
            async () =>
            {
                await LoadData();
                StateHasChanged();

                if (Chart != null)
                {
                    await Chart.RenderAsync();
                }
            });
    }

    private async Task LoadData()
    {
        Series.Clear();

        await using var database = new SidekickDbContext(DbContextOptions);
        var stashes = await database
                            .WealthStashes.Where(x => View.SelectedStashIds.Contains(x.Id))
                            .ToListAsync();
        var stashIds = stashes
                       .Select(x => x.Id)
                       .ToList();

        var stashSnapshots = await database
                                   .WealthStashSnapshots.Where(x => stashIds.Contains(x.StashId))
                                   .OrderByDescending(x => x.Total)
                                   .ToListAsync();
        Series.AddRange(
            stashSnapshots
                .GroupBy(x => x.StashId)
                .Select(
                    snapshot => new DataSerie()
                    {
                        Name = stashes.First(
                                          y => snapshot.First()
                                                       .StashId
                                               == y.Id)
                                      .Name,
                        Points = snapshot
                                 .GroupBy(x => $"{x.Date.Year}-{x.Date.Month:00}-{x.Date.Day:00} {x.Date.Hour:00}:{(x.Date.Minute / 30 == 0 ? "00" : "30")}")
                                 .Select(
                                     x => new DataPoint()
                                     {
                                         DateString = x.Key,
                                         Value = x.Max(row => row.Total)
                                     })
                                 .ToList(),
                    })
                .ToList());

        var labels = Series
                     .SelectMany(x => x.Points)
                     .Select(x => x.DateString)
                     .Distinct()
                     .ToList();

        Series.ForEach(
            serie =>
            {
                labels.ForEach(
                    label =>
                    {
                        if (serie.Points.All(x => x.DateString != label))
                        {
                            serie.Points.Add(
                                new DataPoint()
                                {
                                    DateString = label,
                                    Value = null,
                                });
                        }
                    });

                serie.Points = serie
                               .Points.OrderBy(x => x.DateString)
                               .ToList();
                for (var i = 1; i < serie.Points.Count; i++)
                {
                    serie.Points[i].Value ??= serie.Points[i - 1].Value;
                }
            });

        var totalPoints = Series
                          .SelectMany(x => x.Points)
                          .GroupBy(x => x.DateString)
                          .Select(
                              x => new DataPoint()
                              {
                                  DateString = x.Key,
                                  Value = x.Sum(y => y.Value),
                              })
                          .ToList();
        Series.Add(
            new DataSerie()
            {
                Name = "Total",
                Points = totalPoints,
            });
    }

    public void Dispose()
    {
        WealthParser.OnSnapshotTaken -= Update;
        View.OnSelectedStashIdsChanged -= Update;
    }

    private class DataSerie
    {
        public required string Name { get; init; }

        public required List<DataPoint> Points { get; set; }
    }

    private class DataPoint
    {
        public required string DateString { get; init; }

        public decimal? Value { get; set; }
    }

}
