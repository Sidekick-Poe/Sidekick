@if (CurrencyPerHour == null)
{
    <div class="d-flex align-center flex-nowrap">
        <MudIcon Size="Size.Small" Icon="Icons.Material.Filled.Warning" Color="Color.Warning"/>
        <div class="ml-3 font-smallcaps">Chaos per Hour will be calculated at the next snapshot.</div>
    </div>
}
else
{
    <div class="font-smallcaps"><span style="color:gold; font-size:1.5em;">@CurrencyPerHour</span> Chaos per Hour</div>
}

@using Microsoft.EntityFrameworkCore
@using MudBlazor
@using Sidekick.Common.Database
@inject DbContextOptions<SidekickDbContext> DbContextOptions
@inject WealthParserBkp WealthParserBkp
@implements IDisposable

@code {

    private int? CurrencyPerHour { get; set; }

    protected override async Task OnInitializedAsync()
    {
        WealthParserBkp.OnSnapshotTaken += Update;
        await LoadData();
        await base.OnInitializedAsync();
    }

    public void Update()
    {
        _ = InvokeAsync(
            async () =>
            {
                await LoadData();
                StateHasChanged();
            });
    }

    private async Task LoadData()
    {
        var oneHourAgo = DateTimeOffset.Now.AddHours(-1);
        await using var database = new SidekickDbContext(DbContextOptions);

        var oneHourAgoSnapshot = await database
                                       .WealthFullSnapshots.Where(x => x.Date > oneHourAgo)
                                       .OrderBy(x => x.Date)
                                       .FirstOrDefaultAsync();

        var latestSnapshot = await database
                                   .WealthFullSnapshots.OrderByDescending(x => x.Date)
                                   .FirstOrDefaultAsync();

        if (oneHourAgoSnapshot == null || latestSnapshot == null)
        {
            CurrencyPerHour = null;
            return;
        }

        var minutesBetweenSnapshots = (decimal)(latestSnapshot.Date - oneHourAgoSnapshot.Date).TotalMinutes;
        if (minutesBetweenSnapshots == 0)
        {
            CurrencyPerHour = null;
            return;
        }

        var currencyBetweenSnapshots = latestSnapshot.Total - oneHourAgoSnapshot.Total;
        CurrencyPerHour = (int)((60 / minutesBetweenSnapshots) * currencyBetweenSnapshots);
    }

    public void Dispose()
    {
        WealthParserBkp.OnSnapshotTaken -= Update;
    }

}
