@using Sidekick.Common.Database.Tables
@using Sidekick.Common.Database
@using Microsoft.EntityFrameworkCore
@using ApexCharts

<div style="@($"height:{WealthViewBkp.ChartHeight}")" class="pb-2">
    @if (Stashes.Any())
    {
        <ApexChart @ref="Chart"
                   TItem="WealthStash"
                   Options="Options"
                   Height="@("100%")">
            <ApexPointSeries TItem="WealthStash"
                             Items="Stashes"
                             SeriesType="SeriesType.Donut"
                             XValue="@(e => e.Name)"
                             YAggregate="@(e => (decimal?)e.Sum(stash => stash.Total))"
                             OrderByDescending="e => e.Y ?? 0"/>
        </ApexChart>
    }
</div>

@inject DbContextOptions<SidekickDbContext> DbContextOptions
@inject WealthParser WealthParser
@implements IDisposable

@code {

    [CascadingParameter]
    public WealthViewBkp View { get; set; } = null!;

    private List<WealthStash> Stashes { get; set; } = new();

    private ApexChartOptions<WealthStash> Options { get; set; } = new();

    private ApexChart<WealthStash>? Chart { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Options = new()
        {
            Chart = new Chart
            {
                Background = "transparent",
            },
            Theme = new Theme
            {
                Mode = Mode.Dark,
                Palette = PaletteType.Palette1,
            },
            PlotOptions = new PlotOptions
            {
                Pie = new PlotOptionsPie
                {
                    Donut = new PlotOptionsDonut
                    {
                        Labels = new DonutLabels
                        {
                            Total = new DonutLabelTotal
                            {
                                FontSize = "18px",
                                Color = "white",
                                Formatter = @"function (w) { return parseInt(w.globals.seriesTotals.reduce((a, b) => { return (a + b) }, 0)) }"
                            },
                            Value = new DonutLabelValue
                            {
                                Color = "gold",
                                Formatter = @"function (value) { return parseInt(value) }"
                            }
                        },
                    }
                }
            },
            Tooltip = new ApexCharts.Tooltip
            {
                Y = new TooltipY { Formatter = @"function (value) { return parseInt(value) }" },
            },
            Stroke = new Stroke
            {
                Show = false,
            },
            Legend = new Legend
            {
                Show = false,
                Labels = new LegendLabels
                {
                    Colors = "#999",
                }
            },
        };

        WealthParser.OnStashParsed += Update;
        View.OnSelectedStashIdsChanged += Update;
        await LoadData();
        await base.OnInitializedAsync();
    }

    public void Update()
    {
        _ = InvokeAsync(
            async () =>
            {
                await LoadData();
                StateHasChanged();

                if (Chart != null)
                {
                    await Chart.RenderAsync();
                }
            });
    }

    private async Task LoadData()
    {
        await using var database = new SidekickDbContext(DbContextOptions);
        Stashes = await database
                        .WealthStashes.Where(x => View.SelectedStashIds.Contains(x.Id))
                        .OrderByDescending(x => x.Total)
                        .ToListAsync();
    }

    public void Dispose()
    {
        WealthParser.OnStashParsed -= Update;
        View.OnSelectedStashIdsChanged -= Update;
    }

}
