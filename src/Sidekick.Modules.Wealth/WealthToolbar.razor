@using Microsoft.EntityFrameworkCore
@using Sidekick.Common.Database
@using Sidekick.Common.Settings
@using Sidekick.Modules.Wealth.Provider
@using Sidekick.Modules.Wealth.Authentication
@using Sidekick.Modules.Wealth.Localization

<div class="flex flex-wrap items-center justify-end gap-2 mb-3">
    @if (LastUpdated != null && LastUpdated != DateTimeOffset.MinValue)
    {
        <div class="flex items-center flex-nowrap justify-end gap-1">
            <TextCaption>@Resources["Last_Updated"]:</TextCaption>
            <TextAge Date="LastUpdated"/>
        </div>
    }

    <div>
        <AuthenticationStatus/>

        <HideIfUnauthenticated>
            <div class="flex items-center gap-2">
                @if (WealthProvider.Status == WealthRunStatus.Completed)
                {
                    <div class="bg-green-500 rounded-full w-2 h-2"></div>
                    <div class="text-green-600">@Resources["Completed"]</div>
                }
                else if (WealthProvider.Status == WealthRunStatus.Running)
                {
                    <div class="bg-blue-500 rounded-full w-2 h-2"></div>
                    <div class="text-blue-600">@Resources["Running"]</div>
                    <Tooltip
                        Text="Refreshing stash tab contents. This may take time due to API rate limits. To speed up, reduce selected tabs."/>
                }
                else if (WealthProvider.Status == WealthRunStatus.Failed)
                {
                    <div class="bg-red-500 rounded-full w-2 h-2"></div>
                    <div class="text-red-600">@Resources["Failed"]</div>
                    <Tooltip Text="The wealth tracker failed to run. Please check the logs for more information."/>
                }
            </div>
        </HideIfUnauthenticated>
    </div>

    <HideIfUnauthenticated>
        <ButtonPrimary Disabled="WealthProvider.Status == WealthRunStatus.Running"
                       OnClick="WealthProvider.Start">@Resources["Refresh"]
        </ButtonPrimary>
    </HideIfUnauthenticated>

    <WealthSettings/>
</div>

@inject IStringLocalizer<WealthResources> Resources
@inject WealthProvider WealthProvider
@inject DbContextOptions<SidekickDbContext> DbContextOptions
@inject ISettingsService SettingsService
@implements IDisposable

@code {

    private DateTimeOffset? LastUpdated { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var leagueId = await SettingsService.GetString(SettingKeys.LeagueId);
        await using var database = new SidekickDbContext(DbContextOptions);
        LastUpdated = await database.WealthFullSnapshots.Where(x => x.League == leagueId).Select(x => x.Date).OrderByDescending(x => x).FirstOrDefaultAsync();

        WealthProvider.OnStatusChanged += WealthStatusChanged;
        await base.OnInitializedAsync();
    }

    private void WealthStatusChanged()
    {
        InvokeAsync(() =>
        {
            LastUpdated = DateTimeOffset.Now;
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        WealthProvider.OnStatusChanged -= WealthStatusChanged;
    }

}
