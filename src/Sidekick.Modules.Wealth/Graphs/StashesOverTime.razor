@using Sidekick.Common.Database
@using ApexCharts
@using Microsoft.EntityFrameworkCore
@using Sidekick.Modules.Wealth.Provider
@using Sidekick.Modules.Wealth.Localization
@using Sidekick.Common.Settings

@if (Series.Any())
{
    <div>
        <FormFieldset Legend="@Resources["Stash_Value"]">
            <div class="h-[10rem] relative">
                <ApexChart @ref="Chart"
                           TItem="DataPoint"
                           Options="DataConstants.GetOptions()"
                           Height="@("100%")">
                    @foreach (var serie in Series)
                    {
                        <ApexPointSeries TItem="DataPoint"
                                         Items="serie.Points"
                                         Name="@serie.Name"
                                         SeriesType="SeriesType.Line"
                                         XValue="@(e => e.DateString)"
                                         YValue="@(e => e.Value)"/>
                    }
                </ApexChart>
            </div>
        </FormFieldset>
    </div>
}

@inject IStringLocalizer<WealthResources> Resources
@inject DbContextOptions<SidekickDbContext> DbContextOptions
@inject ISettingsService SettingsService
@inject WealthProvider WealthProvider
@implements IDisposable

@code {

    [CascadingParameter]
    public WealthView View { get; set; } = null!;

    private List<DataSerie> Series { get; } = [];

    private ApexChart<DataPoint>? Chart { get; set; }

    protected override async Task OnInitializedAsync()
    {
        WealthProvider.OnRefreshed += Update;
        WealthProvider.OnFilterChanged += Update;
        await LoadData();
        await base.OnInitializedAsync();
    }

    public void Update()
    {
        _ = InvokeAsync(async () =>
        {
            await LoadData();
            StateHasChanged();

            if (Chart != null)
            {
                await Chart.RenderAsync();
            }
        });
    }

    private async Task LoadData()
    {
        Series.Clear();

        var leagueId = await SettingsService.GetString(SettingKeys.LeagueId);
        await using var database = new SidekickDbContext(DbContextOptions);
        var stashes = await database.WealthStashes.Where(x => x.League == leagueId).Where(x => x.Selected).ToListAsync();
        var stashIds = stashes.Select(x => x.Id).ToList();

        var stashSnapshots = await database.WealthStashSnapshots.Where(x => stashIds.Contains(x.StashId)).ToListAsync();
        stashSnapshots = stashSnapshots.OrderByDescending(x => x.Total).ToList();

        Series.AddRange(stashSnapshots.GroupBy(x => x.StashId)
                            .Select(snapshot => new DataSerie()
                            {
                                Name = stashes.First(y => snapshot.First().StashId == y.Id).Name,
                                Points = snapshot.GroupBy(x => $"{x.Date.Year}-{x.Date.Month:00}-{x.Date.Day:00} {x.Date.Hour:00}:{(x.Date.Minute / 30 == 0 ? "00" : "30")}")
                                    .Select(x => new DataPoint()
                                    {
                                        DateString = x.Key,
                                        Value = x.Max(row => row.Total)
                                    })
                                    .ToList(),
                            })
                            .ToList());

        var labels = Series.SelectMany(x => x.Points).Select(x => x.DateString).Distinct().ToList();

        Series.ForEach(serie =>
        {
            labels.ForEach(label =>
            {
                if (serie.Points.All(x => x.DateString != label))
                {
                    serie.Points.Add(new DataPoint()
                    {
                        DateString = label,
                        Value = null,
                    });
                }
            });

            serie.Points = serie.Points.OrderBy(x => x.DateString).ToList();
            for (var i = 1; i < serie.Points.Count; i++)
            {
                serie.Points[i].Value ??= serie.Points[i - 1].Value;
            }
        });
    }

    public void Dispose()
    {
        WealthProvider.OnRefreshed -= Update;
        WealthProvider.OnFilterChanged -= Update;
    }

}
