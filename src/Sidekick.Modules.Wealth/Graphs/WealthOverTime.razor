@using Sidekick.Common.Database
@using ApexCharts
@using Microsoft.EntityFrameworkCore
@using Sidekick.Modules.Wealth.Provider
@using Sidekick.Modules.Wealth.Localization
@using Sidekick.Common.Settings

<div class="@(Series.Count == 0 ? "hidden" : "")">
    <FormFieldset Legend="@Resources["Total_Value"]">
        <div class="h-[10rem] relative">
            <ApexChart @ref="Chart"
                       TItem="DataPoint"
                       Options="DataConstants.GetOptions()"
                       Height="@("100%")">
                @foreach (var serie in Series)
                {
                    <ApexPointSeries TItem="DataPoint"
                                     Items="serie.Points"
                                     Name="@serie.Name"
                                     SeriesType="SeriesType.Line"
                                     XValue="@(e => e.DateString)"
                                     YValue="@(e => e.Value)"/>
                }
            </ApexChart>
        </div>
    </FormFieldset>
</div>

@inject IStringLocalizer<WealthResources> Resources
@inject DbContextOptions<SidekickDbContext> DbContextOptions
@inject ISettingsService SettingsService
@inject WealthProvider WealthProvider
@implements IDisposable

@code {

    [CascadingParameter]
    public WealthView View { get; set; } = null!;

    private List<DataSerie> Series { get; } = [];

    private ApexChart<DataPoint>? Chart { get; set; }

    protected override async Task OnInitializedAsync()
    {
        WealthProvider.OnRefreshed += Update;
        WealthProvider.OnFilterChanged += Update;
        await LoadData();
        await base.OnInitializedAsync();
    }

    public void Update()
    {
        _ = InvokeAsync(async () =>
        {
            await LoadData();
            StateHasChanged();

            if (Chart != null)
            {
                await Chart.RenderAsync();
            }
        });
    }

    private async Task LoadData()
    {
        Series.Clear();

        var leagueId = await SettingsService.GetString(SettingKeys.LeagueId);
        await using var database = new SidekickDbContext(DbContextOptions);
        var stashes = await database.WealthStashes.Where(x => x.League == leagueId).Where(x => x.Selected).ToListAsync();
        var stashIds = stashes.Select(x => x.Id).ToList();
        var stashSnapshots = await database.WealthStashSnapshots.Where(x => stashIds.Contains(x.StashId)).ToListAsync();

        if (stashSnapshots.Count == 0) return;

        Series.Add(new DataSerie()
        {
            Name = "Total",
            Points = stashSnapshots.GroupBy(x => $"{x.Date.Year}-{x.Date.Month:00}-{x.Date.Day:00} {x.Date.Hour:00}:{x.Date.Minute:00}")
                .Select(x => new DataPoint()
                {
                    DateString = x.Key,
                    Value = x.Sum(row => row.Total)
                })
                .ToList(),
        });
    }

    public void Dispose()
    {
        WealthProvider.OnRefreshed -= Update;
        WealthProvider.OnFilterChanged -= Update;
    }

}
