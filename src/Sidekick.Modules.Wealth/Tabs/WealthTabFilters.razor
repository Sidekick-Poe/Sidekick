@using Microsoft.EntityFrameworkCore
@using Sidekick.Common.Database
@using Sidekick.Common.Database.Tables
@using Sidekick.Common.Settings

@if (Loading)
{
    <ProgressBar Indeterminate="true"/>
    return;
}

@if (StashTabs.Count == 0)
{
    <AlertInfo>No stash tabs found. Select stashes by clicking 'change' above.</AlertInfo>
    return;
}

<div class="flex flex-col items-stretch gap-1">
    @foreach (var stashTab in StashTabs)
    {
        <FormCheckbox Value="stashTab.Selected"
                      ValueChanged="(v) => Toggle(stashTab, v)">
            <div class="flex flex-nowrap items-center justify-between gap-1">
                <div class="truncate">@stashTab.Name</div>
                <div class="flex-1 text-yellow-600">@stashTab.Total.ToString("N0")</div>
            </div>
        </FormCheckbox>
    }
</div>

@inject DbContextOptions<SidekickDbContext> DbContextOptions
@inject ISettingsService SettingsService
@inject WealthProvider WealthProvider
@implements IDisposable

@code {

    private List<WealthStash> StashTabs { get; set; } = [];

    private bool Loading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        WealthProvider.OnStashUpdated += WealthProviderOnOnStashUpdated;
        await RetrieveStashes();
        await base.OnInitializedAsync();
    }

    private void WealthProviderOnOnStashUpdated()
    {
        InvokeAsync(RetrieveStashes);
    }

    public async Task RetrieveStashes()
    {
        Loading = true;
        StateHasChanged();

        var leagueId = await SettingsService.GetString(SettingKeys.LeagueId);

        await using var database = new SidekickDbContext(DbContextOptions);
        StashTabs = await database.WealthStashes.Where(x => x.League == leagueId).ToListAsync();
        StashTabs = StashTabs.OrderByDescending(x => x.Total).ToList();

        Loading = false;
        StateHasChanged();
    }

    private async Task Toggle(WealthStash tab, bool isChecked)
    {
        tab.Selected = isChecked;

        await using var database = new SidekickDbContext(DbContextOptions);
        var dbTab = await database.WealthStashes.Where(x => x.Id == tab.Id).FirstOrDefaultAsync();
        if (dbTab != null)
        {
            dbTab.Selected = isChecked;
            await database.SaveChangesAsync();
        }
    }

    public void Dispose()
    {
        WealthProvider.OnStashUpdated -= WealthProviderOnOnStashUpdated;
    }

}
