@inherits LayoutComponentBase
@layout MenuLayout

<MudDrawer @bind-Open="@Layout.MenuOpened"
           Anchor="Anchor.Left"
           Variant="@DrawerVariant.Responsive"
           Breakpoint="Breakpoint.Lg"
           ClipMode="DrawerClipMode.Docked">
    <MudDrawerHeader>
        <MudText Typo="Typo.h5">@Resources.Cheatsheets</MudText>
    </MudDrawerHeader>
    <MudNavMenu>
        <MudNavGroup Title="@Resources.Leagues"
                     Expanded="true">
            <MudNavLink Match="NavLinkMatch.All"
                        Href="/cheatsheets/betrayal">
                @Resources.Betrayal
            </MudNavLink>
            <MudNavLink Match="NavLinkMatch.All"
                        Href="/cheatsheets/blight">
                @Resources.Blight
            </MudNavLink>
            <MudNavLink Match="NavLinkMatch.All"
                        Href="/cheatsheets/delve">
                @Resources.Delve
            </MudNavLink>
            <MudNavLink Match="NavLinkMatch.All"
                        Href="/cheatsheets/heist">
                @Resources.Heist
            </MudNavLink>
            <MudNavLink Match="NavLinkMatch.All"
                        Href="/cheatsheets/incursion">
                @Resources.Incursion
            </MudNavLink>
        </MudNavGroup>
    </MudNavMenu>
</MudDrawer>

<MudMainContent>
    <MudContainer>
        @Body
    </MudContainer>
</MudMainContent>

@code {
    [Inject] private CheatsheetResources Resources { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }
    [Inject] private ISettingsService SettingsService { get; set; }

    [CascadingParameter] public MenuLayout Layout { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var routeMatch = new System.Text.RegularExpressions.Regex("cheatsheets\\/([^\\\\\\/]*)").Match(NavigationManager.Uri);
        if (routeMatch.Success)
        {
            await SettingsService.Save(nameof(ISettings.Cheatsheets_Selected), routeMatch.Groups[1].Value);
        }
        await base.OnInitializedAsync();
    }
}
