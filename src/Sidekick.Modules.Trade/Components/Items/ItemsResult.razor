@using Sidekick.Modules.Trade.Localization
@using Sidekick.Modules.Trade.Components.Options
@using Sidekick.Common.Settings

@if (PriceCheckService.CurrentMode != TradeMode.Item)
{
    return;
}

@if (PriceCheckService.ItemTradeResult != null)
{
    <div class="flex items-center w-full justify-between dark:bg-stone-900 sticky top-0 z-10 mb-3">
        <div>
            <LeagueText/>
            <CountString Count="PriceCheckService.TradeItems?.Count ?? 0"
                         Total="PriceCheckService.ItemTradeResult.Total"/>
        </div>
        <div class="flex gap-4">
            <ToggleCompactView OnClick="@ToggleView" IsCompact="@IsCompact"/>
            <OpenWebsiteLink QueryId="@PriceCheckService.ItemTradeResult.Id"/>
        </div>
    </div>

    @if (PriceCheckService.TradeItems != null)
    {
        foreach (var result in PriceCheckService.TradeItems)
        {
            <ItemComponent @key="result.Id" Result="result" IsCompact="@IsCompact"/>
        }
    }

    @if (PriceCheckService.ResultError != null)
    {
        <AlertError>@PriceCheckService.ResultError</AlertError>
    }
    else if (!PriceCheckService.IsLoading && !FullyLoaded && PriceCheckService.TradeItems != null)
    {
        <div class="flex justify-center">
            <ButtonPrimary OnClick="PriceCheckService.LoadMoreItems">@Resources.LoadMoreData</ButtonPrimary>
        </div>
    }
}

@if (PriceCheckService.IsLoading)
{
    <AppLoading/>
}

@implements IDisposable

@inject TradeResources Resources
@inject PriceCheckService PriceCheckService
@inject ISettingsService SettingsService

@code {

    private bool FullyLoaded => (PriceCheckService.TradeItems?.Count ?? 0) == (PriceCheckService.ItemTradeResult?.Result?.Count ?? 0);

    private bool IsCompact { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsCompact = await SettingsService.GetBool(SettingKeys.PriceCheckCompactMode);
        PriceCheckService.Changed += StateHasChanged;
        await base.OnInitializedAsync();
    }

    private async void ToggleView()
    {
        IsCompact = !IsCompact;
        await SettingsService.Set(SettingKeys.PriceCheckCompactMode, IsCompact);
    }

    public void Dispose()
    {
        PriceCheckService.Changed -= StateHasChanged;
    }

}
