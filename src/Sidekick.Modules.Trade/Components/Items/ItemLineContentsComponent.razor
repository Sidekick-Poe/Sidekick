@using System.Text.RegularExpressions
@using Sidekick.Apis.Poe.Trade.Modifiers
@using Sidekick.Apis.Poe.Trade.Parser.Properties.Definitions
@using Sidekick.Apis.Poe.Trade.Trade.Results

@if (LineContents.Count > 0)
{
    @foreach (var line in LineContents)
    {
        var html = GetHtml(line);
        if (html == SeparatorProperty.Text)
        {
            <ItemSeparator Rarity="Result.Item.Rarity"/>
        }
        else
        {
            <TextBase
                Class="text-[#7f7f7f] font-caps text-center leading-none py-[1px]">@((MarkupString)html)</TextBase>
        }
    }

    <ItemSeparator Rarity="Result.Item.Rarity"/>
}

@code {

    public class LineContentValue
    {
        public string? Value { get; init; }

        public LineContentType Type { get; init; }
    }

    [Parameter]
    public required TradeResult Result { get; set; }

    [Parameter]
    public required List<ResultLineContent> LineContents { get; set; }

    protected override bool ShouldRender() => false;

    public static string GetHtml(ResultLineContent line)
    {
        var values = new List<LineContentValue>();
        foreach (var value in line.Values)
        {
            if (value.Count != 2)
            {
                continue;
            }

            values.Add(new LineContentValue()
            {
                Value = value[0].GetString(),
                Type = (LineContentType)value[1].GetInt32()
            });
        }

        var text = string.Empty;
        if (!string.IsNullOrEmpty(line.Icon))
        {
            text += $"<img src=\"{line.Icon}\" class=\"w-4 h-4 inline-block leading-none mr-1\" />";
        }

        text += line.Name;

        switch (line.DisplayMode)
        {
            case 0:
                if (values.Count > 0)
                {
                    if (!string.IsNullOrEmpty(line.Name))
                    {
                        text += ": ";
                    }

                    text += string.Join(", ", values.Select(x => x.Value));
                }

                break;

            case 1:
                if (values.Count > 0) text = $"{values[0].Value} {line.Name}";
                break;

            case 2:
                if (values.Count > 0) text = $"{values[0].Value}";
                break;

            case 3:
                var format = Regex.Replace(line.Name ?? string.Empty, "%(\\d)", "{$1}");
                text = string.Format(format, values.Select(x => (object?)x.Value).ToArray());
                break;

            case 4: text = SeparatorProperty.Text; break;

            default: text = $"{line.Name} {string.Join(", ", values.Select(x => x.Value))}"; break;
        }

        text = ModifierProvider.RemoveSquareBrackets(text ?? string.Empty);
        return MarkupValues(text, values);
    }

    private static string MarkupValues(string text, List<LineContentValue> values)
    {
        foreach (var value in values)
        {
            if (value.Value == null)
            {
                continue;
            }

            if (value.Type == LineContentType.Modifier)
            {
                text = $"<span class=\"{LineContentType.Modifier.GetColour()}\">{text}</span>";
                continue;
            }

            var color = value.Type.GetColour();
            text = text.Replace(value.Value, $"<span class=\"{color}\">{value.Value}</span>");
        }

        return text;
    }

}
