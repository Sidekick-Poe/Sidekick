@using Sidekick.Apis.Poe.Trade.Models
@using Sidekick.Common.Game.Items
@using Sidekick.Modules.Trade.Localization
@using Sidekick.Modules.Trade.Components.Prices
@using ItemHeader = Sidekick.Common.Ui.Poe.Items.ItemHeader

@if (!IsCompact && (Item.CanHaveModifiers || PriceCheckService.Item?.Header.Category == Category.Gem))
{
    <div class="mb-2 rounded-b-lg bg-stone-950">
        <ItemHeader Name="@Item.Header.Name"
                    Type="@Item.Header.Type"
                    Influences="Item.Properties.Influences"
                    Rarity="Item.Header.Rarity"
                    Game="Item.Header.Game"/>

        <div class="flex items-start flex-nowrap">
            <div class="w-3/4 p-2">
                <ItemLineContentsComponent Item="Item" LineContents="Item.PropertyContents"/>
                <ItemLineContentsComponent Item="Item" LineContents="Item.AdditionalPropertyContents"/>

                <ItemProperties Item="Item"/>
                <ItemRequirements Item="Item"/>

                @if (Item.ModifierLines.Count > 0)
                {
                    <ItemSeparator Rarity="Item.Header.Rarity"/>
                    @foreach (var line in Item.ModifierLines)
                    {
                        <ItemModifierLineComponent Item="Item" ModifierLine="line"/>
                    }
                }

                @if (Item.Properties.Unidentified)
                {
                    <ItemSeparator Rarity="Item.Header.Rarity"/>
                    <ItemModifierText
                        Category="ModifierCategory.Unidentified">@Resources["Unidentified"]</ItemModifierText>
                }
                @if (Item.Properties.Corrupted)
                {
                    <ItemSeparator Rarity="Item.Header.Rarity"/>
                    <ItemModifierText Category="ModifierCategory.Corrupted">@Resources["Corrupted"]</ItemModifierText>
                }
                @if (!string.IsNullOrEmpty(Item.Price?.Note))
                {
                    <ItemSeparator Rarity="Item.Header.Rarity"/>
                    <TextCaption
                        Class="font-caps text-[#AA9E82] text-center leading-none py-0.5">@Item.Price.Note</TextCaption>
                }
            </div>
            <div class="w-1/4 min-w-[135px] p-2">
                @if (Item.Price != null)
                {
                    <div class="flex flex-col w-full items-center">
                        <PriceDisplay Value="Item.Price.Amount" Currency="@Item.Price.Currency"/>
                        <TextBase
                            Class="text-ellipsis w-full overflow-hidden text-center">@Item.Price.AccountName</TextBase>
                        <PriceAge Date="Item.Price.Date"/>
                    </div>
                }

                <ItemImageComponent Item="Item"/>
            </div>
        </div>
    </div>
}
else
{
    <div class="flex items-start flex-nowrap rounded-b-lg bg-stone-950 mb-2 rounded-tr-lg">
        <div class="w-3/4">
            <ItemHeader Name="@Item.Header.Name"
                        Type="@Item.Header.Type"
                        Influences="Item.Properties.Influences"
                        Rarity="Item.Header.Rarity"
                        Game="Item.Header.Game"
                        SingleLine="true"/>

            @if (Item.Price != null)
            {
                <div class="flex items-center p-2">
                    <TextBase>@Item.Price.AccountName</TextBase>
                    <div class="text-[#a38d6d]">,&nbsp;</div>
                    <PriceAge Date="Item.Price.Date"/>
                </div>
            }
        </div>
        <div class="w-1/4 p-2 self-center">
            @if (Item.Price != null)
            {
                <PriceDisplay Value="Item.Price.Amount" Currency="@Item.Price.Currency"/>
            }
        </div>
    </div>
}

@inject IStringLocalizer<TradeResources> Resources
@inject PriceCheckService PriceCheckService

@code {

    [Parameter]
    public required TradeItem Item { get; set; }

    [Parameter]
    public bool IsCompact { get; set; } = false;

}
