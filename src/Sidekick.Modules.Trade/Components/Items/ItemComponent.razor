@using Sidekick.Apis.Poe.Trade.Trade.Results
@using Sidekick.Common.Game.Items
@using Sidekick.Modules.Trade.Localization
@using Sidekick.Modules.Trade.Components.Prices
@using ItemHeader = Sidekick.Common.Ui.Poe.Items.ItemHeader
@using Sidekick.Modules.Trade.Components

@if (!IsCompact && (Result.Item.HasModifiers || Item.Header.Category == Category.Gem))
{
    <div class="mb-2 rounded-b-lg bg-stone-950">
        <ItemHeader Name="@Result.Item.Name"
                    Type="@Result.Item.Type"
                    Influences="Result.Item.Influences"
                    Rarity="Result.Item.Rarity"
                    Game="Item.Header.Game"/>

        <div class="flex items-start flex-nowrap">
            <div class="w-3/4 p-2">
                <ItemLineContentsComponent Result="Result" LineContents="Result.Item.Properties"/>
                <ItemLineContentsComponent Result="Result" LineContents="Result.Item.AdditionalProperties"/>

                <ItemProperties Result="Result"/>
                <ItemRequirements Result="Result"/>
                <ItemGrantSkills Result="Result"/>
                <ItemModifiers Result="Result"/>

                @if (!Result.Item.Identified)
                {
                    <ItemSeparator Rarity="Result.Item.Rarity"/>
                    <ItemModifierText
                        Category="ModifierCategory.Unidentified">@Resources["Unidentified"]</ItemModifierText>
                }
                @if (Result.Item.Corrupted)
                {
                    <ItemSeparator Rarity="Result.Item.Rarity"/>
                    <ItemModifierText Category="ModifierCategory.Corrupted">@Resources["Corrupted"]</ItemModifierText>
                }
                @if (!string.IsNullOrEmpty(Result.Item.Note))
                {
                    <ItemSeparator Rarity="Result.Item.Rarity"/>
                    <TextCaption
                        Class="font-caps text-[#AA9E82] text-center leading-none py-[1px]">@Result.Item.Note</TextCaption>
                }

                <ExtendedAtMax Result="Result"/>
            </div>
            <div class="w-1/4 min-w-[135px] p-2">
                <div class="flex flex-col w-full items-center">
                    <PriceDisplay Value="Result.Listing.Price.Amount" Currency="@Result.Listing.Price.Currency"/>
                    <TextBase
                        Class="text-ellipsis w-full overflow-hidden text-center">@Result.Listing.Account.Name</TextBase>
                    <PriceAge Date="Result.Listing.Indexed"/>
                </div>

                <ItemImageComponent Result="Result"/>
            </div>
        </div>
    </div>
}
else
{
    <div class="flex items-start flex-nowrap rounded-b-lg bg-stone-950 mb-2 rounded-tr-lg">
        <div class="w-3/4">
            <ItemHeader Name="@Result.Item.Name"
                        Type="@Result.Item.Type"
                        Influences="Result.Item.Influences"
                        Rarity="Result.Item.Rarity"
                        Game="Item.Header.Game"
                        SingleLine="true"/>

            <div class="flex items-center p-2">
                <TextBase>@Result.Listing.Account.Name</TextBase>
                <div class="text-[#a38d6d]">,&nbsp;</div>
                <PriceAge Date="Result.Listing.Indexed"/>
            </div>
        </div>
        <div class="w-1/4 p-2 self-center">
            <PriceDisplay Value="Result.Listing.Price.Amount" Currency="@Result.Listing.Price.Currency"/>
        </div>
    </div>
}

@inject IStringLocalizer<TradeResources> Resources
@inject PriceCheckService PriceCheckService

@code {

    [CascadingParameter]
    public required Item Item { get; set; }

    [Parameter]
    public required TradeResult Result { get; set; }

    [Parameter]
    public bool IsCompact { get; set; }

}
