@using Sidekick.Common.Settings
@using Sidekick.Apis.Poe.Trade.Models
@using Sidekick.Modules.Trade.Localization
@using Sidekick.Modules.Trade.Components.Prices
@using Sidekick.Modules.Trade.Components.Options

@if (PriceCheckService.CurrentMode != TradeMode.Bulk)
{
    return;
}

@if (PriceCheckService.IsLoading)
{
    <AppLoading/>
}
else if (PriceCheckService.BulkTradeResult != null)
{
    <div class="max-w-[800px] mx-auto">
        <div class="flex items-center w-full justify-between w-full dark:bg-stone-900 sticky top-0 z-10 py-3 -mt-3">
            <div>
                <LeagueText/>
                <CountString Count="PriceCheckService.BulkTradeResult.Offers.Count"
                             Total="PriceCheckService.BulkTradeResult.TotalOffers"/>
            </div>
            <OpenWebsiteLink QueryId="@PriceCheckService.BulkTradeResult.QueryId"/>
        </div>

        @if (PriceCheckService.ResultError != null)
        {
            <AlertError>@PriceCheckService.ResultError</AlertError>
        }

        @foreach (var offer in PriceCheckService.BulkTradeResult.Offers)
        {
            <div class="mb-2 flex flex-nowrap items-center w-full bg-stone-950 rounded-lg">
                <div class="w-1/4 p-2 text-center">
                    <TextBase Class="text-ellipsis overflow-hidden">@offer.AccountName</TextBase>
                    <PriceAge Date="offer.Date"/>
                </div>
                <div class="w-5/12 p-2">
                    <div class="flex items-center w-full justify-center">
                        <PriceDisplay Value="offer.SaleAmount" Currency="@offer.SaleCurrency" Small="true"/>
                        <IconMedium Icon="@UiIcons.ArrowForward" Class="mx-1 text-[#a38d6d]"/>
                        <PriceDisplay Value="offer.ItemAmount" Currency="@offer.ItemCurrency" Small="true"/>
                    </div>
                    <TextBase Class="text-center">
                        <span class="text-[#a38d6d]">@Resources.Stock:</span>
                        @offer.ItemStock
                    </TextBase>
                </div>
                <div class="w-1/3 p-2 flex justify-end items-center">
                    <PriceDisplay Value="offer.SaleUnitPrice" Currency="@offer.SaleCurrency"/>
                </div>
            </div>
        }
    </div>
}

@implements IDisposable

@inject TradeResources Resources
@inject ISettingsService SettingsService
@inject PriceCheckService PriceCheckService

@code {

    protected override async Task OnInitializedAsync()
    {
        PriceCheckService.LoadingChanged += StateHasChanged;
        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        PriceCheckService.LoadingChanged -= StateHasChanged;
    }

}
