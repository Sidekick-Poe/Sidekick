@using Sidekick.Apis.Poe
@using Sidekick.Apis.Poe.Bulk
@using Sidekick.Common.Browser
@using Sidekick.Common.Game.Items
@using Sidekick.Modules.Trade.Localization
@using Sidekick.Common.Ui.Popovers

@if (string.IsNullOrEmpty(QueryId))
{
    return;
}

<div class="relative">
    <Tooltip Placement="TooltipPlacement.Left">
        <ChildContent>
            <button type="button"
                    @onclick="@OpenWebsite"
                    @onclick:preventDefault="true"
                    @onclick:stopPropagation="true"
                    @oncontextmenu="@OpenDetails"
                    @oncontextmenu:preventDefault="true"
                    @oncontextmenu:stopPropagation="true"
                    class="inline-flex items-center justify-center p-1 -m-1 text-xl font-medium tracking-wide transition-colors duration-200 rounded-md bg-transparent">
                <Icon Svg="@UiIcons.External" />
            </button>
        </ChildContent>
        <TooltipContent>
            <div class="min-w-60">@Resources["OpenQueryInWebsite"]</div>
        </TooltipContent>
    </Tooltip>

    <Popover @bind-Visible="DetailsOpened" Class="min-w-120 [&_.mb-3]:mb-0!">
        <FormInput Value="@TradeUri?.ToString()" readonly/>
    </Popover>
</div>

@inject IStringLocalizer<TradeResources> Resources
@inject ITradeSearchService TradeSearchService
@inject IBulkTradeService BulkTradeService
@inject IBrowserProvider BrowserProvider
@inject PriceCheckService PriceCheckService

@code {

    [CascadingParameter]
    public required Item Item { get; set; }

    [Parameter]
    public string? QueryId { get; set; }

    private bool DetailsOpened { get; set; }

    private Uri? TradeUri { get; set; }

    private async Task OpenWebsite()
    {
        if (QueryId == null)
        {
            return;
        }

        if (PriceCheckService.CurrentMode == TradeMode.Bulk)
        {
            var uri = await BulkTradeService.GetTradeUri(Item, QueryId);
            BrowserProvider.OpenUri(uri);
        }
        else
        {
            var uri = await TradeSearchService.GetTradeUri(Item.Header.Game, QueryId);
            BrowserProvider.OpenUri(uri);
        }
    }

    private async Task OpenDetails()
    {
        if (QueryId == null)
        {
            return;
        }

        if (PriceCheckService.CurrentMode == TradeMode.Bulk)
        {
            TradeUri = await BulkTradeService.GetTradeUri(Item, QueryId);
        }
        else
        {
            TradeUri = await TradeSearchService.GetTradeUri(Item.Header.Game, QueryId);
        }

        DetailsOpened = true;
    }

}


