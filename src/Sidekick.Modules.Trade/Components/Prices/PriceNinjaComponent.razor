@using Sidekick.Apis.PoeNinja
@using Sidekick.Apis.PoeNinja.Models
@using Sidekick.Common.Browser
@using Sidekick.Common.Game.Items
@using Sidekick.Common.Game.Items.AdditionalInformation;
@using Sidekick.Common.Settings
@using Sidekick.Modules.Trade.Localization
@using Sidekick.Common.Game
@using ApexCharts

@if (Loading)
{
    <AppLoading/>
}
else if (Price != null)
{
    <div class="flex flex-nowrap items-center">
        <div class="text-right w-1/2 pr-2">
            <Heading3>Poe.Ninja</Heading3>

            <Tooltip Text="@Resources["Last_Updated"]" Placement="TooltipPlacement.Right">
                <ChildContent>
                    @Price.LastUpdated.ToString("g")
                </ChildContent>
            </Tooltip>

            <ButtonLink OnClick="OpenWebsite">
                <TextCaption>@Resources["Open_Website"]</TextCaption>
            </ButtonLink>
        </div>
        <div class="text-left w-1/2 pl-2">
            <div class="flex">
                <PriceDisplay Value="Price.Price"/>
            </div>

            @if (Price.Links >= 5)
            {
                <TextCaption>@Price.Links @Resources["Links"]</TextCaption>
            }
        </div>

    </div>

    @if (Series != null)
    {
        <div class="py-2">
            <ApexChart TItem="DataPoint" Options="Options">
                <ApexPointSeries TItem="DataPoint"
                                 Items="Series"
                                 XValue="(x => x.Index)"
                                 YValue="(x => x.Value)"
                                 SeriesType="SeriesType.Line"/>
            </ApexChart>
        </div>
    }

    <ItemSeparator Rarity="Item.Header.Rarity"/>
}

@inject IStringLocalizer<TradeResources> Resources
@inject IPoeNinjaClient Client
@inject IBrowserProvider BrowserProvider
@inject ISettingsService SettingsService

@code {

    [CascadingParameter]
    public required Item Item { get; set; }

    private Guid ItemId { get; set; }

    private bool Loading { get; set; }

    private NinjaPrice? Price { get; set; }

    private List<DataPoint>? Series { get; set; }

    private ApexChartOptions<DataPoint>? Options { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (ItemId == Item.Id) return;
        ItemId = Item.Id;

        if (Item.Header.Game == GameType.PathOfExile2)
        {
            return;
        }

        if (!await SettingsService.GetBool(SettingKeys.PriceCheckMarketEnabled))
        {
            return;
        }

        Loading = true;
        StateHasChanged();

        if (Item.AdditionalInformation is ClusterJewelInformation clusterJewelInformation)
        {
            Price = await Client.GetClusterPrice(clusterJewelInformation.GrantText, clusterJewelInformation.SmallPassiveCount, Item.Properties.ItemLevel);
        }
        else
        {
            Price = await Client.GetPriceInfo(Item.Invariant?.Name, Item.Invariant?.Type, Item.Header.Category, gemLevel: Item.Properties.GemLevel, mapTier: Item.Properties.MapTier, numberOfLinks: Item.Properties.GetMaximumNumberOfLinks());
        }

        if (Price?.SparkLine?.Data.All(x => x.HasValue) == true)
        {
            Series = Price.SparkLine.Data.Select((value, index) => new DataPoint
                {
                    Index = index,
                    Value = (decimal?)value
                })
                .ToList();
            Options = new()
            {
                PlotOptions = new() { Line = new() { IsSlopeChart = true } },
                Tooltip = new() { Enabled = false },
                Chart =
                {
                    Sparkline = new() { Enabled = true },
                    Height = 40,
                },
                Markers = new() { Size = 0 },
                Stroke = new()
                {
                    Curve = Curve.Smooth,
                    Width = 2,
                    Colors = ["#8888ff",]
                },
            };
        }

        Loading = false;
        StateHasChanged();
    }

    class DataPoint
    {
        public int Index { get; set; }

        public decimal? Value { get; set; }
    }

    private async Task OpenWebsite()
    {
        if (Price == null)
        {
            return;
        }

        var uri = await Client.GetDetailsUri(Price);
        BrowserProvider.OpenUri(uri);
    }

}
