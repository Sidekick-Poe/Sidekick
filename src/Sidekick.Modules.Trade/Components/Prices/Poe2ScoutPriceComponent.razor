@using Sidekick.Apis.Poe2Scout
@using Sidekick.Apis.Poe2Scout.Models
@using Sidekick.Common.Browser
@using Sidekick.Common.Game.Items
@using Sidekick.Common.Game
@using Sidekick.Common.Settings
@using Sidekick.Modules.Trade.Localization
@using ApexCharts

@if (Loading)
{
    <AppLoading />
}
else if (Price != null)
{
    <div class="flex flex-nowrap items-center">
        <div class="text-right w-1/2 pr-2">
            <Heading3>Poe2Scout.com</Heading3>
            <TooltipRight>
                <ChildContent>
                    <TextCaption>@Price.LastUpdated.ToString("g")</TextCaption>
                </ChildContent>
                <TooltipContent>
                    @Resources["Last_Updated"]
                </TooltipContent>
            </TooltipRight>
            <ButtonLink OnClick="OpenWebsite">
                <TextCaption>@Resources["Open_Website"]</TextCaption>
            </ButtonLink>
        </div>
        <div class="text-left w-1/2 pl-2">
            <div class="flex">
                <PriceDisplay Value="Price.Price" Currency="exalt" />
            </div>
            @if (NumberOfListings.HasValue)
            {
                <TextCaption>(@NumberOfListings @Resources["Listings"])</TextCaption>
            }
        </div>
    </div>

    @if (Series != null)
    {
        <div class="py-2">
            <ApexChart TItem="DataPoint" Options="Options">
                <ApexPointSeries TItem="DataPoint"
                                 Items="Series"
                                 XValue="(x => x.Index)"
                                 YValue="(x => x.Value)"
                                 SeriesType="SeriesType.Line" />
            </ApexChart>
        </div>
    }

    <ItemSeparator Rarity="Item.Header.Rarity" />
}

@inject IStringLocalizer<TradeResources> Resources
@inject IPoe2ScoutClient Client
@inject IBrowserProvider BrowserProvider
@inject ISettingsService SettingsService

@code {

    [CascadingParameter]
    public required Item Item { get; set; }

    private Guid ItemId { get; set; }

    private bool Loading { get; set; }

    private Poe2ScoutPrice? Price { get; set; }

    private int? NumberOfListings { get; set; }

    private List<DataPoint>? Series { get; set; }

    private ApexChartOptions<DataPoint>? Options { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (ItemId == Item.Id) return;
        ItemId = Item.Id;

        if (Item.Header.Game == GameType.PathOfExile)
        {
            return;
        }

        if (!await SettingsService.GetBool(SettingKeys.PriceCheckMarketEnabled))
        {
            return;
        }

        Loading = true;
        StateHasChanged();

        Price = await Client.GetPriceInfo(Item);
        NumberOfListings = Price?.PriceLogs?.LastOrDefault(x => x?.Quantity != null)?.Quantity;

        if (Price?.PriceLogs?.Count > 1)
        {
            Series = Price.PriceLogs.Select((value, index) => new DataPoint
                {
                    Index = index,
                    Value = value?.Price
                })
                .ToList();
            Options = new()
                {
                    PlotOptions = new() { Line = new() { IsSlopeChart = true } },
                    Tooltip = new() { Enabled = false },
                    Chart =
                {
                    Sparkline = new() { Enabled = true },
                    Height = 40,
                },
                    Markers = new() { Size = 0 },
                    Stroke = new()
                    {
                        Curve = Curve.Smooth,
                        Width = 2,
                        Colors = ["#8888ff",]
                    },
                };
        }

        Loading = false;
        StateHasChanged();
    }

    private void OpenWebsite()
    {
        if (Price == null)
        {
            return;
        }

        var uri = Client.GetDetailsUri(Price);
        BrowserProvider.OpenUri(uri);
    }

    class DataPoint
    {
        public int Index { get; init; }
        public decimal? Value { get; init; }
    }
}
