@using Sidekick.Apis.Poe.Bulk;
@using Sidekick.Apis.Poe.Parser.Properties.Definitions
@using Sidekick.Apis.Poe.Parser.Properties.Filters
@using Sidekick.Common.Game.Items
@using Sidekick.Common.Settings
@using Sidekick.Modules.Trade.Localization
@using Sidekick.Modules.Trade.Components.Prices
@using ItemHeader = Sidekick.Common.Ui.Poe.Items.ItemHeader
@using Sidekick.Modules.Trade.Components.Filters.Properties

@if (PriceCheckService.Item == null)
{
    return;
}

<div class="flex flex-col h-full">
    <div>
        <ItemHeader Name="@PriceCheckService.Item.Header.Name"
                    Type="@PriceCheckService.Item.Header.Type"
                    Rarity="PriceCheckService.Item.Header.Rarity"
                    Game="PriceCheckService.Item.Header.Game"
                    Influences="PriceCheckService.Item.Properties.Influences"/>
    </div>

    <div class="grow overflow-y-auto py-2">
        <SidekickErrorBoundary>
            <PriceNinjaComponent/>
        </SidekickErrorBoundary>
        <SidekickErrorBoundary>
            <PricePredictionComponent/>
        </SidekickErrorBoundary>

        @if (PriceCheckService.PropertyFilters != null)
        {
            <HeaderFilters/>

            <div>
                @foreach (var filter in PriceCheckService.PropertyFilters.Filters)
                {
                    switch (filter)
                    {
                        case IntPropertyFilter intFilter: <IntPropertyFilterComponent Filter="intFilter" /> break;
                        case WeaponDamagePropertyFilter weaponDamageFilter: <WeaponDamagePropertyFilterComponent Filter="weaponDamageFilter" /> break;
                        case DoublePropertyFilter doubleFilter: <DoublePropertyFilterComponent Filter="doubleFilter" /> break;
                        case TriStatePropertyFilter triStateFilter: <TriStatePropertyFilterComponent Filter="triStateFilter"/> break;
                        case not null when filter.Definition is SeparatorProperty: <ItemSeparator Rarity="PriceCheckService.Item?.Header.Rarity ?? Rarity.Unknown"/> break;
                        default: <BooleanPropertyFilterComponent Filter="filter"/> break;
                    }
                }

                @if (PriceCheckService.PropertyFilters.Filters.Count > 0)
                {
                    <ItemSeparator Rarity="PriceCheckService.Item?.Header.Rarity ?? Rarity.Unknown"/>
                }
            </div>
        }

        <ModifierFiltersComponent />
        <PseudoFiltersComponent />
    </div>

    <div class="flex flex-nowrap items-center w-full py-2 px-1">
        <div class="flex flex-col items-stretch text-center px-1 grow">
            <ButtonPrimary OnClick="PriceCheckService.ItemSearch" Disabled="PriceCheckService.IsLoading">@Resources["Search"]</ButtonPrimary>
        </div>
        @if (PriceCheckService.SupportsBulk)
        {
            <div class="flex flex-col items-stretch text-center px-1 grow">
                <ButtonSecondary OnClick="PriceCheckService.BulkSearch" Disabled="PriceCheckService.IsLoading">@Resources["Bulk_Search"]</ButtonSecondary>
            </div>
        }
        <div class="px-1">
            <TradeFilters />
        </div>
    </div>
</div>

@implements  IDisposable

@inject IStringLocalizer<TradeResources> Resources
@inject ISettingsService SettingsService
@inject IBulkTradeService BulkTradeService
@inject PriceCheckService PriceCheckService

@code {

    private bool HasAnyFilter { get; set; }

    protected override async Task OnInitializedAsync()
    {
        PriceCheckService.FilterLoadingChanged += StateHasChanged;
        PriceCheckService.LoadingChanged += StateHasChanged;

        await base.OnInitializedAsync();

        var propertyCount = PriceCheckService.PropertyFilters?.Filters.Count ?? 0;
        var modifierCount = PriceCheckService.ModifierFilters.Count;
        HasAnyFilter = modifierCount + propertyCount > 0;
    }

    public void Dispose()
    {
        PriceCheckService.FilterLoadingChanged -= StateHasChanged;
        PriceCheckService.LoadingChanged -= StateHasChanged;
    }

}
