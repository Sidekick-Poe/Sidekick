@using Sidekick.Apis.Poe.Bulk;
@using Sidekick.Apis.Poe.Parser.Properties.Definitions
@using Sidekick.Apis.Poe.Parser.Properties.Filters
@using Sidekick.Apis.Poe.Trade.Filters
@using Sidekick.Common.Game.Items
@using Sidekick.Modules.Trade.Localization
@using Sidekick.Modules.Trade.Components.Prices
@using ItemHeader = Sidekick.Common.Ui.Poe.Items.ItemHeader
@using Sidekick.Modules.Trade.Components.Filters.Properties

<div class="flex flex-col h-full">
    <div>
        <ItemHeader Name="@Item.Header.Name"
                    Type="@Item.Header.Type"
                    Rarity="Item.Header.Rarity"
                    Game="Item.Header.Game"
                    Influences="Item.Properties.Influences"/>
    </div>

    <div class="grow overflow-y-auto py-2">
        <SidekickErrorBoundary>
            <PriceNinjaComponent/>
        </SidekickErrorBoundary>
        <SidekickErrorBoundary>
            <Poe2ScoutPriceComponent/>
        </SidekickErrorBoundary>
        <SidekickErrorBoundary>
            <PricePredictionComponent/>
        </SidekickErrorBoundary>

        <HeaderFilters PropertyFilters="PropertyFilters"/>

        <div>
            @for (var index = 0; index < PropertyFilters.Filters.Count; index++)
            {
                var filter = PropertyFilters.Filters[index];
                var key = $"{Item.Id}_property_{index}";
                switch (filter)
                {
                    case IntPropertyFilter intFilter:
                        <IntPropertyFilterComponent @key="key" Filter="intFilter"/>
                        break;

                    case WeaponDamagePropertyFilter weaponDamageFilter:
                        <WeaponDamagePropertyFilterComponent @key="key" Filter="weaponDamageFilter"/>
                        break;

                    case DoublePropertyFilter doubleFilter:
                        <DoublePropertyFilterComponent @key="key" Filter="doubleFilter"/>
                        break;

                    case TriStatePropertyFilter triStateFilter:
                        <TriStatePropertyFilterComponent @key="key" Filter="triStateFilter"/>
                        break;

                    case StringPropertyFilter stringFilter:
                        <StringPropertyFilterComponent @key="key" Filter="stringFilter"/>
                        break;

                    case not null when filter.Definition is SeparatorProperty:
                        <ItemSeparator @key="key" Rarity="Item.Header.Rarity"/>
                        break;

                    default:
                        <BooleanPropertyFilterComponent @key="key" Filter="filter"/>
                        break;
                }
            }

            @if (PropertyFilters.Filters.Count > 0)
            {
                <ItemSeparator Rarity="Item.Header.Rarity"/>
            }
        </div>

        <ModifierFiltersComponent ModifierFilters="ModifierFilters"/>
        <PseudoFiltersComponent PseudoFilters="PseudoFilters"/>

        <SidekickErrorBoundary>
            <Poe2ScoutChanceComponent/>
        </SidekickErrorBoundary>
    </div>

    <div class="flex flex-nowrap items-center w-full py-2 px-1">
        <div class="flex flex-col items-stretch text-center px-1 grow">
            <ButtonPrimary OnClick="() => PriceCheckService.SearchItems(Item, PropertyFilters, ModifierFilters, PseudoFilters)"
                           Disabled="PriceCheckService.IsLoading">@Resources["Search"]</ButtonPrimary>
        </div>
        @if (BulkTradeService.SupportsBulkTrade(Item))
        {
            <div class="flex flex-col items-stretch text-center px-1 grow">
                <ButtonSecondary OnClick="() => PriceCheckService.SearchBulk(Item)"
                                 Disabled="PriceCheckService.IsLoading">@Resources["Bulk_Search"]</ButtonSecondary>
            </div>
        }
        <div class="px-1">
            <TradeFilters/>
        </div>
    </div>
</div>

@inject IStringLocalizer<TradeResources> Resources
@inject IBulkTradeService BulkTradeService
@inject PriceCheckService PriceCheckService

@code {

    [CascadingParameter]
    public required Item Item { get; set; }

    [Parameter]
    public required PropertyFilters PropertyFilters { get; set; }

    [Parameter]
    public required List<ModifierFilter> ModifierFilters { get; set; }

    [Parameter]
    public required List<PseudoModifierFilter> PseudoFilters { get; set; }

}
