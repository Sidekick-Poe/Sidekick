
<div class="@Class">
    <MudCheckBox @bind-Checked="Filter.Enabled"
                 Color="Color.Primary"
                 Dense="true"
                 Size="Size.Small">
        <div class="d-flex align-center">
            @if (Filter.Line.Modifier.Category == ModifierCategory.Pseudo)
            {
                <ItemModifierCategoryChip Category="Filter.Line.Modifier.Category" />
            }
            <ItemModifierText Text="@Filter.Line.Text"
                              Category="Filter.Line.Modifier?.Category" />
        </div>
    </MudCheckBox>

    @if (Filter.Enabled)
    {
        <div class="pa-1">
            @if (Filter.Line.Alternates.Count > 0)
            {
                <div class="mb-2 d-flex align-center">
                    <MudSelect T="Modifier"
                       Value="Filter.Line.Modifier"
                       ValueChanged="ModifierChanged"
                       Variant="Variant.Text"
                       Dense="true"
                       Margin="Margin.None">
                        <MudSelectItem Value="Filter.Line.Modifier">
                            <ItemModifierCategoryChip Category="Filter.Line.Modifier.Category" />
                            <MudText Typo="Typo.caption">@Filter.Line.Modifier.Text</MudText>
                        </MudSelectItem>
                        @foreach (var alternate in Filter.Line.Alternates)
                        {
                            <MudSelectItem Value="alternate" Class="d-flex align-center">
                                <ItemModifierCategoryChip Category="alternate.Category" />
                                <MudText Typo="Typo.caption">@alternate.Text</MudText>
                            </MudSelectItem>
                        }
                    </MudSelect>
                    <Hint Text="@Resources.ModifierHint" />
                </div>
            }

            @if (Filter.Line.Modifier?.OptionValue == null && Filter.Line.Modifier?.Values.Count > 0)
            {
                <div class="d-flex align-center justify-end">
                    <MudIconButton Icon="@Icons.Material.Filled.SwapHoriz"
                           OnClick="SwapValues"
                           Size="Size.Small"
                           Class="mr-1" />
                    <div class="filter-min" @onwheel="OnWheelMin" @onwheel:preventDefault @oncontextmenu="ClearMin">
                        <MudTextField @bind-Value="Filter.Min"
                              Label="@Resources.Filters_Min"
                              Variant="Variant.Outlined"
                              Margin="Margin.Dense" />
                    </div>
                    <div class="filter-max" @onwheel="OnWheelMax" @onwheel:preventDefault @oncontextmenu="ClearMax">
                        <MudTextField @bind-Value="Filter.Max"
                              Label="@Resources.Filters_Max"
                              Variant="Variant.Outlined"
                              Margin="Margin.Dense" />
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    [Inject] public TradeResources Resources { get; set; }

    [Parameter] public ModifierFilter Filter { get; set; }

    private string Class
    {
        get
        {
            if (Filter.Enabled)
            {
                return "mb-2 mud-paper";
            }

            return "";
        }
    }

    private void SwapValues(MouseEventArgs args)
    {
        (Filter.Min, Filter.Max) = (Filter.Max, Filter.Min);
    }

    private void OnWheelMin(WheelEventArgs args)
    {
        if (!Filter.Min.HasValue) Filter.Min = 0;
        if (args.DeltaY < 0) Filter.Min += 1;
        else Filter.Min -= 1;
    }

    private void ClearMin()
    {
        Filter.Min = null;
    }

    private void OnWheelMax(WheelEventArgs args)
    {
        if (!Filter.Max.HasValue) Filter.Max = 0;
        if (args.DeltaY < 0) Filter.Max += 1;
        else Filter.Max -= 1;
    }

    private void ClearMax()
    {
        Filter.Max = null;
    }

    private void ModifierChanged(Modifier newValue)
    {
        Filter.Line.Alternates.Add(Filter.Line.Modifier);
        Filter.Line.Alternates.Remove(newValue);
        Filter.Line.Modifier = newValue;
    }
}
