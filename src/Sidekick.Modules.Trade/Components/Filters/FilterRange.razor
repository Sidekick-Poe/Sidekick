@using Sidekick.Common.Settings
@using Sidekick.Modules.Trade.Localization;

<div class="relative group/filter self-end">
    <ButtonIcon OnClick="ToggleType">
        <div class="flex flex-nowrap items-center gap-[2px]">
            <IconMedium Icon="@Icon"/>
            @if (Type == FilterType.Minimum || Type == FilterType.Equals || Type == FilterType.Range)
            {
                <span>@Min</span>
            }

            @if (Type == FilterType.Range)
            {
                <span>-</span>
            }

            @if (Type == FilterType.Maximum || Type == FilterType.Range)
            {
                <span>@Max</span>
            }
        </div>
    </ButtonIcon>

    <div class="group-hover/filter:flex flex-nowrap items-center gap-2 absolute top-full -right-2 bg-stone-800 rounded-b-lg py-1 px-2 hidden opacity-0 group-hover/filter:opacity-100 transition-opacity duration-200 z-10"
         id="@Id">
        @if (Type == FilterType.Equals)
        {
            <div class="w-[5rem]"
                 @onwheel="OnMinWheel"
                 @oncontextmenu="Clear">
                <FormNumberSmall Value="Min"
                                 ValueChanged="UpdateMinValue"
                                 Label="@Resources["Equals"]"/>
            </div>
        }

        @if (Type == FilterType.Minimum || Type == FilterType.Range)
        {
            <div class="w-[5rem]"
                 @onwheel="OnMinWheel"
                 @oncontextmenu="Clear">
                <FormNumberSmall Value="Min"
                                 ValueChanged="UpdateMinValue"
                                 Label="@Resources["Min"]"/>
            </div>
        }

        @if (Type == FilterType.Maximum || Type == FilterType.Range)
        {
            <div class="w-[5rem]"
                 @onwheel="OnMaxWheel"
                 @oncontextmenu="Clear">
                <FormNumberSmall Value="Max"
                                 ValueChanged="UpdateMaxValue"
                                 Label="@Resources["Max"]"/>
            </div>
        }
    </div>
</div>

@inject IStringLocalizer<TradeResources> Resources
@inject IJSRuntime JsRuntime

@code {

    [Parameter]
    public double? Min { get; set; }

    [Parameter]
    public EventCallback<double?> MinChanged { get; set; }

    [Parameter]
    public double? Max { get; set; }

    [Parameter]
    public EventCallback<double?> MaxChanged { get; set; }

    [Parameter]
    public EventCallback<FilterType> TypeChanged { get; set; }

    private FilterType Type { get; set; } = FilterType.Minimum;

    [Parameter]
    public required FilterType DefaultFilterType { get; set; }

    private string Id { get; } = UiUtilities.GenerateId();

    private string Icon => Type switch
    {
        FilterType.Maximum => @"<svg xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 24 24""><path d=""M18.5,2.27L5,10.14L18.5,18L19.5,16.27L8.97,10.14L19.5,4L18.5,2.27M5,20V22H20V20H5Z"" /></svg>",
        FilterType.Equals => @"<svg xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 24 24""><path d=""M19,10H5V8H19V10M19,16H5V14H19V16Z"" /></svg>",
        FilterType.Range => @"<svg xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 24 24""><path d=""M8,3A2,2 0 0,0 6,5V9A2,2 0 0,1 4,11H3V13H4A2,2 0 0,1 6,15V19A2,2 0 0,0 8,21H10V19H8V14A2,2 0 0,0 6,12A2,2 0 0,0 8,10V5H10V3M16,3A2,2 0 0,1 18,5V9A2,2 0 0,0 20,11H21V13H20A2,2 0 0,0 18,15V19A2,2 0 0,1 16,21H14V19H16V14A2,2 0 0,1 18,12A2,2 0 0,1 16,10V5H14V3H16Z"" /></svg>",
        _ => @"<svg xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 24 24""><path d=""M6.5,2.27L20,10.14L6.5,18L5.5,16.27L16.03,10.14L5.5,4L6.5,2.27M20,20V22H5V20H20Z"" /></svg>",
    };

    private bool IsChanging { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (IsChanging)
        {
            return;
        }

        Type = DefaultFilterType;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync(
                "eval",
                @"
                document.getElementById("""
                + Id
                + @""")?.addEventListener(""wheel"",function(e) {
                    e.preventDefault();
                }, { passive: false });
            ");
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task ToggleType()
    {
        Type = Type switch
        {
            FilterType.Minimum => FilterType.Maximum,
            FilterType.Maximum => FilterType.Equals,
            FilterType.Equals  => FilterType.Range,
            FilterType.Range   => FilterType.Minimum,
            _                 => FilterType.Minimum,
        };

        await TypeChanged.InvokeAsync(Type);
    }

    private async Task UpdateMinValue(double? value)
    {
        IsChanging = true;

        await MinChanged.InvokeAsync(value);
        if (Type == FilterType.Equals)
        {
            await MaxChanged.InvokeAsync(value);
        }

        IsChanging = false;
    }

    private async Task UpdateMaxValue(double? value)
    {
        IsChanging = true;

        await MaxChanged.InvokeAsync(value);

        IsChanging = false;
    }

    private async Task OnMinWheel(WheelEventArgs args)
    {
        var value = Min ?? 0;
        if (args.DeltaY < 0)
        {
            value = value + 1;
        }
        else
        {
            value = value - 1;
        }

        await UpdateMinValue(value);
    }

    private async Task OnMaxWheel(WheelEventArgs args)
    {
        var value = Max ?? 0;
        if (args.DeltaY < 0)
        {
            value = value + 1;
        }
        else
        {
            value = value - 1;
        }

        await UpdateMaxValue(value);
    }

    private async Task Clear()
    {
        await MinChanged.InvokeAsync(null);
        await MaxChanged.InvokeAsync(null);
    }

}
