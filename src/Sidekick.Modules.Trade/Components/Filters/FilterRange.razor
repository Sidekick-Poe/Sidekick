@using Sidekick.Common.Settings
@using Sidekick.Modules.Trade.Localization;

<div class="flex flex-nowrap items-center -mr-1 [&_button]:mr-1! [&_.range_[contenteditable]]:rounded-r-none! [&_.range:last-child_[contenteditable]]:rounded-r-md! [&_.range~.range_[contenteditable]]:rounded-l-none!" id="@Id">
	<Popover 
		Trigger="PopoverTrigger.Hover">
		<PopoverAnchor>
			<ButtonIcon OnClick="ToggleType">
				<Icon Svg="@CurrentFilter.Icon" />
			</ButtonIcon>
		</PopoverAnchor>
		<PopoverContent>
			@foreach ( Filter filter in AllFilters )
			{
				<ButtonIcon OnClick="() => SelectType(filter.FilterType)">
					<Icon Svg="@filter.Icon" />
				</ButtonIcon>
			}
		</PopoverContent>
	</Popover>

    @if (Type == FilterType.Minimum || Type == FilterType.Equals || Type == FilterType.Range)
    {
        <div @onwheel="OnMinWheel"
             @oncontextmenu="Clear"
             title="@(Type == FilterType.Equals ? Resources["Filters_Equals"] : Resources["Filters_Min"])"
             class="range">
            <FormContentEditable DoubleValue="Min"
                                 DoubleValueChanged="UpdateMinValue"/>
        </div>
    }

    @if (Type == FilterType.Maximum || Type == FilterType.Range)
    {
        <div @onwheel="OnMaxWheel"
             @oncontextmenu="Clear"
             title="@Resources["Filters_Max"]"
             class="range">
            <FormContentEditable DoubleValue="Max"
                                 DoubleValueChanged="UpdateMaxValue"/>
        </div>
    }
</div>

@inject IStringLocalizer<TradeResources> Resources
@inject IJSRuntime JsRuntime

@code {

	[Parameter]
	public double? Min { get; set; }

	[Parameter]
	public EventCallback<double?> MinChanged { get; set; }

	[Parameter]
	public double? Max { get; set; }

	[Parameter]
	public EventCallback<double?> MaxChanged { get; set; }

	[Parameter]
	public FilterType Type { get; set; }

	[Parameter]
	public EventCallback<FilterType> TypeChanged { get; set; }

	private string Id { get; } = UiUtilities.GenerateId();

	private Filter CurrentFilter { get; set; } = new Filter { FilterType = FilterType.Minimum, Icon = @"<svg xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 24 24""><path d=""M6.5,2.27L20,10.14L6.5,18L5.5,16.27L16.03,10.14L5.5,4L6.5,2.27M20,20V22H5V20H20Z"" /></svg>" };

	private List<Filter> AllFilters { get; } = Filters.All;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await JsRuntime.InvokeVoidAsync("eval",
                                            @"
                                            document.getElementById("""
											+ Id
											+ @""")?.addEventListener(""wheel"",function(e) {
                    e.preventDefault();
                }, { passive: false });
            ");
		}

		await base.OnAfterRenderAsync(firstRender);
	}

	private async Task SelectType(FilterType filterType)
	{
		Type = filterType;
		CurrentFilter = AllFilters.First(f => f.FilterType == filterType);

		await TypeChanged.InvokeAsync(Type);
	}

	private async Task ToggleType()
	{
		Type = Type switch
		{
			FilterType.Minimum => FilterType.Maximum,
			FilterType.Maximum => FilterType.Equals,
			FilterType.Equals => FilterType.Range,
			FilterType.Range => FilterType.Minimum,
			_ => FilterType.Minimum,
		};

		CurrentFilter = AllFilters.First(f => f.FilterType == Type);

        await TypeChanged.InvokeAsync(Type);
    }

    private async Task UpdateMinValue(double? value)
    {
        await MinChanged.InvokeAsync(value);
        if (Type == FilterType.Equals)
        {
            await MaxChanged.InvokeAsync(value);
        }
    }

    private async Task UpdateMaxValue(double? value)
    {
        await MaxChanged.InvokeAsync(value);
    }

    private async Task OnMinWheel(WheelEventArgs args)
    {
        var value = Min ?? 0;
        if (args.DeltaY < 0)
        {
            value = value + 1;
        }
        else
        {
            value = value - 1;
        }

        await UpdateMinValue(value);
    }

    private async Task OnMaxWheel(WheelEventArgs args)
    {
        var value = Max ?? 0;
        if (args.DeltaY < 0)
        {
            value = value + 1;
        }
        else
        {
            value = value - 1;
        }

        await UpdateMaxValue(value);
    }

    private async Task Clear()
    {
        await MinChanged.InvokeAsync(null);
        await MaxChanged.InvokeAsync(null);
    }

}
