
<div class="@Class">
    <MudCheckBox @bind-Checked="Filter.Enabled"
                 Color="Color.Primary"
                 Dense="true"
                 Size="Size.Small">
        <ItemPropertyText Label="@Filter.Text"
                          Value="Filter.Value" />
    </MudCheckBox>

    @if (Filter.Enabled)
    {
        <div class="pa-1">
            @if (Filter.ValueType == FilterValueType.Double || Filter.ValueType == FilterValueType.Int)
            {
                <div class="d-flex align-center justify-end">
                    <MudIconButton Icon="@Icons.Material.Filled.SwapHoriz"
                           OnClick="SwapValues"
                           Size="Size.Small"
                           Class="mr-1" />
                    <div class="filter-min" @onwheel="OnWheelMin" @onwheel:preventDefault @oncontextmenu="ClearMin">
                        <MudTextField @bind-Value="Filter.Min"
                              Label="@Resources.Filters_Min"
                              Variant="Variant.Outlined"
                              Margin="Margin.Dense" />
                    </div>
                    <div class="filter-max" @onwheel="OnWheelMax" @onwheel:preventDefault @oncontextmenu="ClearMax">
                        <MudTextField @bind-Value="Filter.Max"
                              Label="@Resources.Filters_Max"
                              Variant="Variant.Outlined"
                              Margin="Margin.Dense" />
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    [Inject] public TradeResources Resources { get; set; }

    [Parameter] public PropertyFilter Filter { get; set; }

    private string Class
    {
        get
        {
            if (Filter.Enabled)
            {
                return "mb-2 mud-paper";
            }

            return "";
        }
    }

    private string GetFilterTextClass()
    {
        return Filter.Type switch
        {
            PropertyFilterType.Misc_Corrupted => "corrupted-text",
            PropertyFilterType.Misc_Scourged => "scourge-text",
            _ => string.Empty
        };
    }

    private void SwapValues(MouseEventArgs args)
    {
        (Filter.Min, Filter.Max) = (Filter.Max, Filter.Min);
    }

    private void OnWheelMin(WheelEventArgs args)
    {
        if (!Filter.Min.HasValue) Filter.Min = 0;
        if (args.DeltaY < 0) Filter.Min += 1;
        else Filter.Min -= 1;
    }

    private void ClearMin()
    {
        Filter.Min = null;
    }

    private void OnWheelMax(WheelEventArgs args)
    {
        if (!Filter.Max.HasValue) Filter.Max = 0;
        if (args.DeltaY < 0) Filter.Max += 1;
        else Filter.Max -= 1;
    }

    private void ClearMax()
    {
        Filter.Max = null;
    }
}
