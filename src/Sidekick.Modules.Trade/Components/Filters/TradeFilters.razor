@using Sidekick.Common.Blazor.Settings
@using Sidekick.Common.Ui.Popovers
@using Sidekick.Common.Settings
@using Sidekick.Modules.Trade.Localization
@using Sidekick.Modules.Trade.Settings

<Popover>
    <PopoverAnchor>
        <ButtonIcon>
            <Icon Svg="@UiIcons.Adjustments" Size="@UiIconSize.Medium" AddBadge="AreSettingsModified"/>
        </ButtonIcon>
    </PopoverAnchor>
    <PopoverContent>
        <PriceCheckStatusEditor/>
        <PriceCheckItemCurrencyEditor/>
        <FormFieldset Legend="@Resources["Item_Trade_Settings"]"
                      Dense="true">
            <PriceCheckItemMinMaxPriceEditor/>
            <PriceCheckItemListedAgeEditor/>
        </FormFieldset>
        <FormFieldset Legend="@Resources["Bulk_Trade"]"
                      Dense="true">
            <PriceCheckBulkMinimumStockEditor/>
        </FormFieldset>

        <div class="flex justify-center mb-1">
            <ButtonPrimary Disabled="!AreSettingsModified"
                           OnClick="ClearFilters">@SettingsResources["Clear_Filters"]</ButtonPrimary>
        </div>
    </PopoverContent>
</Popover>

@inject IStringLocalizer<SettingsResources> SettingsResources
@inject IStringLocalizer<TradeResources> Resources
@inject ISettingsService SettingsService
@implements IDisposable

@code {

    private bool AreSettingsModified { get; set; }

    private string[] SettingKeysUsed { get; } =
    {
        SettingKeys.PriceCheckStatus,
        SettingKeys.PriceCheckCurrency,
        SettingKeys.PriceCheckCurrencyPoE2,
        SettingKeys.PriceCheckItemCurrencyMin,
        SettingKeys.PriceCheckItemCurrencyMax,
        SettingKeys.PriceCheckItemCurrencyMinPoE2,
        SettingKeys.PriceCheckItemCurrencyMaxPoE2,
        SettingKeys.PriceCheckItemListedAge,
        SettingKeys.PriceCheckBulkMinimumStock
    };

    protected override async Task OnInitializedAsync()
    {
        AreSettingsModified = await SettingsService.IsSettingModified(SettingKeysUsed);

        SettingsService.OnSettingsChanged += OnSettingsChanged;

        await base.OnInitializedAsync();
    }

    private async void OnSettingsChanged(string[] keys)
    {
        if (!keys.Any(key => SettingKeysUsed.Contains(key)))
        {
            return;
        }

        AreSettingsModified = await SettingsService.IsSettingModified(SettingKeysUsed);
        await InvokeAsync(StateHasChanged);
    }

    private async void ClearFilters()
    {
        await SettingsService.DeleteSetting(SettingKeysUsed);

        StateHasChanged();
    }

    public void Dispose()
    {
        SettingsService.OnSettingsChanged -= OnSettingsChanged;
    }

}
