@using Sidekick.Apis.Poe.Parser.Properties.Definitions
@using Sidekick.Apis.Poe.Parser.Properties.Filters
@using Sidekick.Apis.Poe.Trade.Models
@using Sidekick.Common.Game.Languages
@using Sidekick.Modules.Trade.Localization
@using Sidekick.Common.Settings

<FilterWrapper>
    <div class="flex flex-nowrap items-center">
        <div class="grow">
            <FormCheckbox Value="Filter.Checked"
                          ValueChanged="CheckedChanged">
                <ItemPropertyText Label="@Filter.Text"
                                  Value="@($"{Filter.ValuePrefix}{Filter.Value}{Filter.ValueSuffix}")"
                                  HasAdditionalInformation="Filter.Value != Filter.OriginalValue && Filter.OriginalValue > 0">
                    <AdditionalInformation>
                        <ItemPropertyText Label="@($"{GameLanguageProvider.Language.DescriptionQuality} {PriceCheckService.Item?.Properties.Quality}%")"
                                          Value="@($"{Filter.ValuePrefix}{Filter.OriginalValue}{Filter.ValueSuffix}")"/>
                        <ItemPropertyText Label="@($"{GameLanguageProvider.Language.DescriptionQuality} 20%")"
                                          Value="@($"{Filter.ValuePrefix}{Filter.Value}{Filter.ValueSuffix}")"/>
                    </AdditionalInformation>
                </ItemPropertyText>
            </FormCheckbox>
        </div>

        @if (Filter.Checked)
        {
            <FilterRange Min="@Filter.Min"
                         MinChanged="MinChanged"
                         Max="@Filter.Max"
                         MaxChanged="MaxChanged"
                         TypeChanged="TypeChanged"
                         DefaultRangeType="@DefaultRangeType"/>
        }
    </div>
</FilterWrapper>

@inject IStringLocalizer<TradeResources> Resources
@inject PriceCheckService PriceCheckService
@inject IGameLanguageProvider GameLanguageProvider
@inject ISettingsService SettingsService

@code {

    [Parameter]
    public required IntPropertyFilter Filter { get; set; }

    [Parameter]
    public required RangeType DefaultRangeType { get; set; }

    private async void CheckedChanged(bool value)
    {
        Filter.Checked = value;

        // We can change the settings in the Trade window, so we should fetch here every time.
        Filter.NormalizeValue = await SettingsService.GetObject<double>(SettingKeys.PriceCheckNormalizeValue);
        TypeChanged(DefaultRangeType);
    }

    private void MinChanged(double? value)
    {
        Filter.Min = value != null ? (int)value : null;
    }

    private void MaxChanged(double? value)
    {
        Filter.Max = value != null ? (int)value : null;
    }

    private void TypeChanged(RangeType type)
    {
        switch (type)
        {
            case RangeType.Minimum:
                Filter.NormalizeMinValue();
                Filter.Max = null;
                break;

            case RangeType.Maximum:
                Filter.NormalizeMaxValue();
                Filter.Min = null;
                break;

            case RangeType.Equals: Filter.SetExactValue(); break;

            case RangeType.Range:
                Filter.NormalizeMinValue();
                Filter.NormalizeMaxValue();
                break;
        }
    }

}
