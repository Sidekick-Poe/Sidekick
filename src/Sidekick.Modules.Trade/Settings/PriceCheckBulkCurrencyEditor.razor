@using Sidekick.Apis.Poe.Filters
@using Sidekick.Apis.Poe.Static
@using Sidekick.Common.Blazor.Settings
@using Sidekick.Common.Extensions
@using Sidekick.Common.Game
@using Sidekick.Common.Settings

<label class="block mb-1 text-base font-medium dark:text-zinc-300">
    @Resources["Currency"]
</label>
<div class="flex flex-wrap items-center gap-[2px] mb-3 pl-4">
    @foreach (var option in CheckboxOptions)
    {
        <div class="mr-2">
            <FormCheckbox Value="option.Value == Currency"
                          NoMargin="true"
                          Dense="true"
                          ValueChanged="@(() => CurrencyChanged(option.Value))">@option.Label</FormCheckbox>
        </div>
    }

    <div class="w-full"></div>

    @foreach (var option in ImageOptions)
    {
        var image = option.Value != null ? ItemStaticDataProvider.GetImage(option.Value) : null;
        var wrapperClass = "rounded-sm duration-200 transition-colors cursor-pointer p-[2px] leading-[0]";
        if (option.Value == Currency)
        {
            wrapperClass += " bg-violet-700 hover:bg-violet-500";
        }
        else
        {
            wrapperClass += " bg-transparent hover:bg-stone-800";
        }

        <div class="@wrapperClass" @onclick="@(() => CurrencyChanged(option.Value))">
            <TooltipRight>
                <ChildContent>
                    <img src="@image" class="h-6 w-6" alt="@option.Label"/>
                </ChildContent>
                <TooltipContent>@option.Label</TooltipContent>
            </TooltipRight>
        </div>
    }
</div>

@inject IStringLocalizer<SettingsResources> Resources
@inject ISettingsService SettingsService
@inject IFilterProvider FilterProvider
@inject IItemStaticDataProvider ItemStaticDataProvider

@code {

    private string? Currency { get; set; }

    private IEnumerable<SelectOption> ImageOptions => Options.Where(x => x.Value != null && !string.IsNullOrEmpty(ItemStaticDataProvider.GetImage(x.Value)));

    private IEnumerable<SelectOption> CheckboxOptions => Options.Where(x => x.Value == null || string.IsNullOrEmpty(ItemStaticDataProvider.GetImage(x.Value)));

    private List<SelectOption> Options { get; set; } =
    [
    ];

    protected override async Task OnInitializedAsync()
    {
        var league = await SettingsService.GetString(SettingKeys.LeagueId);
        var game = league.GetGameFromLeagueId();
        Currency = game == GameType.PathOfExile ? await SettingsService.GetString(SettingKeys.PriceCheckBulkCurrency) : await SettingsService.GetString(SettingKeys.PriceCheckBulkCurrencyPoE2);
        Currency = FilterProvider.GetPriceOption(Currency);

        Options = FilterProvider.TradePriceOptions.ConvertAll(x => new SelectOption()
        {
            Label = x.Text ?? string.Empty,
            Value = x.Id,
        });

        await base.OnInitializedAsync();
    }

    private async Task CurrencyChanged(string? value)
    {
        Currency = value;

        var league = await SettingsService.GetString(SettingKeys.LeagueId);
        var game = league.GetGameFromLeagueId();
        if (game == GameType.PathOfExile)
        {
            await SettingsService.Set(SettingKeys.PriceCheckBulkCurrency, value);
        }
        else
        {
            await SettingsService.Set(SettingKeys.PriceCheckBulkCurrencyPoE2, value);
        }
    }

}
