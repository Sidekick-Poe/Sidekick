@using Sidekick.Apis.Poe.Trade.Trade.Requests
@using Sidekick.Modules.Trade.Localization
@using Sidekick.Common.Settings

<FormFieldset Legend="@Resources["Player_Status"]"
              Dense="true">
    <div class="flex flex-wrap items-center gap-2">
        @foreach (var option in Options)
        {
            <FormCheckbox Value="option.Value == Value"
                          Dense="true"
                          ValueChanged="@(() => ValueChanged(option.Value))">@option.Label</FormCheckbox>
        }
    </div>
</FormFieldset>

@inject IStringLocalizer<TradeResources> Resources
@inject ISettingsService SettingsService
@implements IDisposable

@code {

    private string? Value { get; set; }

    private List<SelectOption> Options { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Value = await SettingsService.GetString(SettingKeys.PriceCheckStatus);
        SettingsService.OnSettingsChanged += OnSettingsChanged;
        Options =
        [
            new()
            {
                Label = Resources["Player_Status_Available"],
                Value = Status.Available,
            },
            new()
            {
                Label = Resources["Player_Status_Securable"],
                Value = Status.Securable,
            },
            new()
            {
                Label = Resources["Player_Status_Online"],
                Value = Status.Online,
            },
            new()
            {
                Label = Resources["Player_Status_Any"],
                Value = Status.Any,
            },
        ];

        await base.OnInitializedAsync();
    }

    private async Task ValueChanged(string? value)
    {
        Value = value;
        await SettingsService.Set(SettingKeys.PriceCheckStatus, value);
    }

    private async void OnSettingsChanged(string[] keys)
    {
        if (!keys.Contains(SettingKeys.PriceCheckStatus)) return;

        Value = await SettingsService.GetString(SettingKeys.PriceCheckStatus);
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        SettingsService.OnSettingsChanged -= OnSettingsChanged;
    }

}
