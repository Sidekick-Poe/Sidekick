@using Sidekick.Common.Blazor.Settings
@using Sidekick.Common.Enums
@using Sidekick.Common.Settings
@using Sidekick.Modules.Trade.Localization

<FormSelect Value="@Value"
            ValueChanged="ValueChanged"
            Label="@TradeResources["Default_FilterType"]"
            Options="Options">
    <AdornmentContent>
        <div class="flex ml-1 gap-1 align-center">
            @if (ShowResetButton)
            {
                <ButtonIcon OnClick="Reset" title="@SettingsResources["Reset"]">
                    <Icon Svg="@UiIcons.Reset" />
                </ButtonIcon>
            }
        </div>
    </AdornmentContent>
</FormSelect>

@inject IStringLocalizer<SettingsResources> SettingsResources
@inject IStringLocalizer<TradeResources> TradeResources
@inject ISettingsService SettingsService
@implements IDisposable

@code {

    private string? Value { get; set; }

    private List<SelectOption> Options { get; set; } = new();

    private const string SettingKey = SettingKeys.PriceCheckDefaultFilterType;

    private bool ShowResetButton { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Value = await SettingsService.GetString(SettingKey);
        ShowResetButton = await SettingsService.IsSettingModified(SettingKey);

        SettingsService.OnSettingsChanged += OnSettingsChanged;

        Options = [
            new()
            {
                Value = FilterType.Minimum.GetValueAttribute(),
                Label = TradeResources["FilterType_Minimum"],
            },
            new()
            {
                Value = FilterType.Maximum.GetValueAttribute(),
                Label = TradeResources["FilterType_Maximum"],
            },
            new()
            {
                Value = FilterType.Equals.GetValueAttribute(),
                Label = TradeResources["FilterType_Equals"],
            },
            new()
            {
                Value = FilterType.Range.GetValueAttribute(),
                Label = TradeResources["FilterType_Range"],
            },
    ];

        await base.OnInitializedAsync();
    }

    private async Task ValueChanged(string? value)
    {
        Value = value;

        await SettingsService.Set(SettingKey, value);
    }

    private async void OnSettingsChanged(string[] keys)
    {
        if (keys.Contains(SettingKey))
        {
            Value = await SettingsService.GetString(SettingKey);
            ShowResetButton = await SettingsService.IsSettingModified(SettingKey);

            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task Reset()
    {
        await SettingsService.DeleteSetting(SettingKey);
    }

    public void Dispose()
    {
        SettingsService.OnSettingsChanged -= OnSettingsChanged;
    }

}
