@using Sidekick.Apis.Poe.Trade.Filters
@using Sidekick.Modules.Trade.Localization
@using Sidekick.Common.Settings

<FormSelectInline Label="@Resources["Item_Listing_Age"]"
                  Value="@Value"
                  ValueChanged="@ValueChanged"
                  Options="@Options"/>

@inject IStringLocalizer<TradeResources> Resources
@inject ISettingsService SettingsService
@inject IFilterProvider FilterProvider
@implements IDisposable

@code {

    private string? Value { get; set; }

    private List<SelectOption> Options { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        Options = FilterProvider.TradeIndexedOptions.ConvertAll(x => new SelectOption()
        {
            Label = x.Text ?? string.Empty,
            Value = x.Id,
        });

        Value = await SettingsService.GetString(SettingKeys.PriceCheckItemListedAge);

        SettingsService.OnSettingsChanged += OnSettingsChanged;

        await base.OnInitializedAsync();
    }

    private async Task ValueChanged(string? value)
    {
        Value = value;
        await SettingsService.Set(SettingKeys.PriceCheckItemListedAge, value);
    }

    private async void OnSettingsChanged(string[] keys)
    {
        if (!keys.Contains(SettingKeys.PriceCheckItemListedAge)) return;

        Value = await SettingsService.GetString(SettingKeys.PriceCheckItemListedAge);
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        SettingsService.OnSettingsChanged -= OnSettingsChanged;
    }

}
