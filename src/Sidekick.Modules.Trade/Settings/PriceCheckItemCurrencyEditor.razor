@using Sidekick.Apis.Poe.Trade.Filters
@using Sidekick.Apis.Poe.Trade.Static
@using Sidekick.Common.Extensions
@using Sidekick.Common.Game
@using Sidekick.Modules.Trade.Localization
@using Sidekick.Common.Settings

<FormFieldset Legend="@Resources["Currency_of_Results"]"
              Dense="true">
    <div class="flex flex-wrap items-center gap-1">
        @foreach (var option in CheckboxOptions)
        {
            <div class="mr-2">
                <FormCheckbox Value="option.Value == Currency"
                              Dense="true"
                              ValueChanged="@(() => CurrencyChanged(option.Value))">@option.Label</FormCheckbox>
            </div>
        }

        <div class="w-full"></div>

        @foreach (var option in ImageOptions)
        {
            var image = option.Value != null ? ItemStaticDataProvider.GetImage(option.Value) : null;
            var wrapperClass = "rounded-xs duration-200 transition-colors cursor-pointer p-[2px] leading-[0] -m-px";
            if (option.Value == Currency)
            {
                wrapperClass += " bg-violet-700 hover:bg-violet-500";
            }
            else
            {
                wrapperClass += " bg-transparent hover:bg-stone-800";
            }

            <button class="@wrapperClass @UiClasses.FocusClasses" @onclick="@(() => CurrencyChanged(option.Value))">
                <Tooltip Text="@option.Label" Placement="TooltipPlacement.Top">
                    <ChildContent>
                        <img src="@image" class="h-6 w-6" alt="@option.Label"/>
                    </ChildContent>
                </Tooltip>
            </button>
        }
    </div>
</FormFieldset>

@inject IStringLocalizer<TradeResources> Resources
@inject ISettingsService SettingsService
@inject IFilterProvider FilterProvider
@inject IItemStaticDataProvider ItemStaticDataProvider
@implements IDisposable

@code {

    private string? Currency { get; set; }

    private IEnumerable<SelectOption> ImageOptions => Options.Where(x => x.Value != null && !string.IsNullOrEmpty(ItemStaticDataProvider.GetImage(x.Value)));

    private IEnumerable<SelectOption> CheckboxOptions => Options.Where(x => x.Value == null || string.IsNullOrEmpty(ItemStaticDataProvider.GetImage(x.Value)));

    private List<SelectOption> Options { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await FetchSettings();

        SettingsService.OnSettingsChanged += OnSettingsChanged;

        Options = FilterProvider.TradePriceOptions.ConvertAll(x => new SelectOption()
        {
            Label = x.Text ?? string.Empty,
            Value = x.Id,
        });

        await base.OnInitializedAsync();
    }

    private async Task FetchSettings()
    {
        var league = await SettingsService.GetString(SettingKeys.LeagueId);
        var game = league.GetGameFromLeagueId();
        Currency = game == GameType.PathOfExile ? await SettingsService.GetString(SettingKeys.PriceCheckCurrency) : await SettingsService.GetString(SettingKeys.PriceCheckCurrencyPoE2);
        Currency = FilterProvider.GetPriceOption(Currency);
    }

    private async Task CurrencyChanged(string? value)
    {
        Currency = value;

        var league = await SettingsService.GetString(SettingKeys.LeagueId);
        var game = league.GetGameFromLeagueId();
        if (game == GameType.PathOfExile)
        {
            await SettingsService.Set(SettingKeys.PriceCheckCurrency, value);
        }
        else
        {
            await SettingsService.Set(SettingKeys.PriceCheckCurrencyPoE2, value);
        }
    }

    private async void OnSettingsChanged(string[] keys)
    {
        if (!keys.Contains(SettingKeys.PriceCheckCurrency) && !keys.Contains(SettingKeys.PriceCheckCurrencyPoE2) && !keys.Contains(SettingKeys.LeagueId)) return;

        await FetchSettings();
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        SettingsService.OnSettingsChanged -= OnSettingsChanged;
    }

}
