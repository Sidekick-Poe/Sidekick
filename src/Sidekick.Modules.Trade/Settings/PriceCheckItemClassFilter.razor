@using Sidekick.Common.Enums
@using Sidekick.Modules.Trade.Localization
@using Sidekick.Common.Settings

<FormSelect Label="@Resources["Default_Item_Class_Filter"]"
            Value="@Mode"
            ValueChanged="ModeChanged"
            Options="Options" />

@inject IStringLocalizer<TradeResources> Resources
@inject ISettingsService SettingsService

@code {

    private string? Mode { get; set; }

    private List<SelectOption> Options { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        Options = [
            new()
            {
                Value = DefaultItemClassFilter.BaseType.GetValueAttribute(),
                Label = Resources["Base_Type"],
            },
            new()
            {
                Value = DefaultItemClassFilter.ItemClass.GetValueAttribute(),
                Label = Resources["Item_Class"],
            }
        ];

        Mode = await SettingsService.GetString(SettingKeys.PriceCheckItemClassFilter);

        SettingsService.OnSettingsChanged += OnSettingsChanged;

        await base.OnInitializedAsync();
    }

    private async Task ModeChanged(string? value)
    {
        Mode = value;
        await SettingsService.Set(SettingKeys.PriceCheckItemClassFilter, value);
    }

    private async void OnSettingsChanged(string[] keys)
    {
        if (keys.Contains(SettingKeys.PriceCheckItemClassFilter))
        {
            Mode = await SettingsService.GetString(SettingKeys.PriceCheckItemClassFilter);
            await InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        SettingsService.OnSettingsChanged -= OnSettingsChanged;
    }

}
