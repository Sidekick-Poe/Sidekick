@using Sidekick.Common.Blazor.Settings
@using Sidekick.Common.Enums
@using Sidekick.Common.Settings
@using Sidekick.Modules.Trade.Localization

<FormSelect Value="@Value"
            ValueChanged="ValueChanged"
            Label="@TradeResources["Default_Item_Class_Filter"]"
            Options="Options">
    <AdornmentContent>
        @if (ShowResetButton)
        {
            <ButtonIcon OnClick="Reset" title="@SettingsResources["Reset"]">
                <Icon Svg="@UiIcons.Reset"/>
            </ButtonIcon>
        }
    </AdornmentContent>
</FormSelect>

@inject IStringLocalizer<SettingsResources> SettingsResources
@inject IStringLocalizer<TradeResources> TradeResources
@inject ISettingsService SettingsService
@implements IDisposable

@code {

    private string? Value { get; set; }

    private List<SelectOption> Options { get; set; } = new();

    private const string SettingKey = SettingKeys.PriceCheckItemClassFilter;

    private bool ShowResetButton { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Value = await SettingsService.GetString(SettingKey);
        ShowResetButton = await SettingsService.IsSettingModified(SettingKey);

        SettingsService.OnSettingsChanged += OnSettingsChanged;

        Options =
        [
            new()
            {
                Value = DefaultItemClassFilter.BaseType.GetValueAttribute(),
                Label = TradeResources["Base_Type"],
            },
            new()
            {
                Value = DefaultItemClassFilter.ItemClass.GetValueAttribute(),
                Label = TradeResources["Item_Class"],
            }
        ];

        await base.OnInitializedAsync();
    }

    private async Task ValueChanged(string? value)
    {
        Value = value;

        await SettingsService.Set(SettingKey, value);
    }

    private async void OnSettingsChanged(string[] keys)
    {
        if (!keys.Contains(SettingKey)) return;

        Value = await SettingsService.GetString(SettingKey);
        ShowResetButton = await SettingsService.IsSettingModified(SettingKey);
        await InvokeAsync(StateHasChanged);
    }

    private async Task Reset()
    {
        await SettingsService.DeleteSetting(SettingKey);
    }

    public void Dispose()
    {
        SettingsService.OnSettingsChanged -= OnSettingsChanged;
    }

}
