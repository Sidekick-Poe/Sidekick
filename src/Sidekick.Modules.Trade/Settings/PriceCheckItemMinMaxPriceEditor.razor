@using Sidekick.Apis.Poe
@using Sidekick.Apis.Poe.Extensions
@using Sidekick.Apis.Poe.Models
@using Sidekick.Common.Extensions
@using Sidekick.Common.Game
@using Sidekick.Modules.Trade.Localization
@using Sidekick.Common.Settings

<div class="flex flex-nowrap items-center gap-4">
    <label class="block text-base font-medium dark:text-zinc-300 text-nowrap mb-3">
        @Resources["Buyout_Price"]
    </label>
    <div class="ml-auto flex flex-nowrap [&_input]:rounded-r-none! [&>:last-child_input]:rounded-r-lg! [&>:last-child_input]:rounded-l-none!">
        <FormNumberInline placeholder="Min"
                          min="0"
                          step="1"
                          Value="Minimum"
                          ValueChanged="MinimumChanged" />
        <FormNumberInline placeholder="Max"
                          min="0"
                          step="1"
                          Value="Maximum"
                          ValueChanged="MaximumChanged" />
    </div>
</div>

@inject IStringLocalizer<TradeResources> Resources
@inject ISettingsService SettingsService
@implements IDisposable

@code {

    private double? Minimum { get; set; }
    private double? Maximum { get; set; }
    private GameType Game { get; set; }

    private string[] SettingKeysUsed { get; } =
    {
        SettingKeys.LeagueId,
        SettingKeys.PriceCheckItemCurrencyMin,
        SettingKeys.PriceCheckItemCurrencyMax,
        SettingKeys.PriceCheckItemCurrencyMinPoE2,
        SettingKeys.PriceCheckItemCurrencyMaxPoE2
    };

    protected override async Task OnInitializedAsync()
    {
        await FetchSettings();

        SettingsService.OnSettingsChanged += OnSettingsChanged;

        await base.OnInitializedAsync();
    }

    private async Task FetchSettings()
    {
        Game = await SettingsService.GetGame();
        if (Game == GameType.PathOfExile)
        {
            Minimum = await SettingsService.GetInt(SettingKeys.PriceCheckItemCurrencyMin);
            Maximum = await SettingsService.GetInt(SettingKeys.PriceCheckItemCurrencyMax);
        }
        else
        {
            Minimum = await SettingsService.GetInt(SettingKeys.PriceCheckItemCurrencyMinPoE2);
            Maximum = await SettingsService.GetInt(SettingKeys.PriceCheckItemCurrencyMaxPoE2);
        }

        if (Minimum <= 0) Minimum = null;
        if (Maximum <= 0) Maximum = null;
    }

    private async Task MinimumChanged(double? value)
    {
        var intValue = (int?)value;
        if (intValue <= 0) intValue = null;

        Minimum = intValue;
        if (Game == GameType.PathOfExile)
        {
            await SettingsService.Set(SettingKeys.PriceCheckItemCurrencyMin, intValue);
        }
        else
        {
            await SettingsService.Set(SettingKeys.PriceCheckItemCurrencyMinPoE2, intValue);
        }
    }

    private async Task MaximumChanged(double? value)
    {
        var intValue = (int?)value;
        if (intValue <= 0) intValue = null;

        Maximum = intValue;
        if (Game == GameType.PathOfExile)
        {
            await SettingsService.Set(SettingKeys.PriceCheckItemCurrencyMax, intValue);
        }
        else
        {
            await SettingsService.Set(SettingKeys.PriceCheckItemCurrencyMaxPoE2, intValue);
        }
    }

    private async void OnSettingsChanged(string[] keys)
    {
        if (!keys.Any(key => SettingKeysUsed.Contains(key)))
        {
            return;
        }

        await FetchSettings();
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        SettingsService.OnSettingsChanged -= OnSettingsChanged;
    }

}
