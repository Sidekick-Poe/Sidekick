@using Sidekick.Apis.Poe.Items
@using Sidekick.Apis.Poe2Scout.History
@using Sidekick.Apis.Poe2Scout.History.Models
@using Sidekick.Apis.Poe2Scout.Items
@using Sidekick.Apis.Poe2Scout.Items.Models
@using Sidekick.Modules.Trade.Exchange.Localization
@using Sidekick.Modules.Trade.Poe2Scout

@if (Loading)
{
    <AppLoading/>
    return;
}

@if (ScoutHistory == null)
{
    <AlertInfo>@Resources["NoCurrencyExchangeData"]</AlertInfo>
}
else if (ScoutHistory != null)
{
    <Poe2ScoutWebsite History="ScoutHistory"/>
    <Poe2ScoutPanel Currency="exalted" Logs="@ScoutHistory.Exalted"/>
    <Poe2ScoutPanel Currency="chaos" Logs="@ScoutHistory.Chaos"/>
    <Poe2ScoutPanel Currency="divine" Logs="@ScoutHistory.Divine"/>
}

@inject IScoutHistoryProvider ScoutHistoryProvider
@inject IScoutItemProvider ScoutItemProvider
@inject IStringLocalizer<ExchangeResources> Resources

@code {

    [CascadingParameter]
    public required Item Item { get; set; }

    private ScoutHistory? ScoutHistory { get; set; }

    private ScoutItem? ScoutItem { get; set; }

    private bool Loading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Loading = true;
        StateHasChanged();

        ScoutItem = await ScoutItemProvider.GetItem(Item.Header.InvariantText);
        if (ScoutItem != null)
        {
            ScoutHistory = await ScoutHistoryProvider.GetItemHistory(ScoutItem.ItemId);
        }

        Loading = false;
        StateHasChanged();
    }

}
