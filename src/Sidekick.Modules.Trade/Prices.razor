@page "/trade/{itemText}"
@using Sidekick.Common.Extensions
@using Sidekick.Common.Settings
@using Sidekick.Modules.Trade.Localization
@using Sidekick.Modules.Trade.Components.Filters
@using Sidekick.Modules.Trade.Components.Bulk
@using Sidekick.Modules.Trade.Components.Items
@using Sidekick.Modules.Trade.Settings

<LayoutTwoColumn LeftContentWidth="@LeftContentWidth" OnLeftContentResize="@OnLeftContentResize">
    <TopContent>
        <AppBar>
            <AppSettings Href="/settings/price">
                <SettingsContent/>
            </AppSettings>
            <AppClose/>
        </AppBar>
    </TopContent>
    <LeftContent>
        @if (PriceCheckService.IsFilterLoading)
        {
            <AppLoading/>
        }
        else
        {
            <FiltersComponent/>
        }
    </LeftContent>
    <ChildContent>
        <AppContainer>
            <BulkResult/>
            <ItemsResult/>
        </AppContainer>
    </ChildContent>
</LayoutTwoColumn>

@implements IDisposable

@inject ISettingsService SettingsService
@inject TradeResources Resources
@inject PriceCheckService PriceCheckService
@inject ICurrentView CurrentView

@code {

    [Parameter]
    public required string ItemText { get; set; }

    private int LeftContentWidth { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CurrentView.Initialize(new ViewOptions()
        {
            Title = Resources.Trade,
        });
        await base.OnInitializedAsync();
        PriceCheckService.Changed += StateHasChanged;
        LeftContentWidth = await SettingsService.GetInt(SettingKeys.PriceCheckSidebarWidth);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender && !string.IsNullOrEmpty(ItemText))
        {
            await PriceCheckService.Initialize(ItemText.DecodeBase64Url() ?? string.Empty);
        }
    }

    private async Task OnLeftContentResize(int width)
    {
        await SettingsService.Set(SettingKeys.PriceCheckSidebarWidth, width);
    }

    public void Dispose()
    {
        PriceCheckService.Changed -= StateHasChanged;
    }

}
