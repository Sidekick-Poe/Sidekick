@page "/trade/{itemText}"
@using Sidekick.Apis.Poe
@using Sidekick.Apis.Poe.Bulk
@using Sidekick.Apis.Poe.Parser.Properties.Filters
@using Sidekick.Apis.Poe.Trade.Filters
@using Sidekick.Common.Extensions
@using Sidekick.Common.Game.Items
@using Sidekick.Common.Settings
@using Sidekick.Modules.Trade.Localization
@using Sidekick.Modules.Trade.Components.Filters
@using Sidekick.Modules.Trade.Components.Bulk
@using Sidekick.Modules.Trade.Components.Items
@using Sidekick.Modules.Trade.Settings

<LayoutTwoColumn LeftContentWidth="@LeftContentWidth" OnLeftContentResize="@OnLeftContentResize">
    <TopContent>
        <AppBar>
            <AppSettings Href="/settings/price">
                <SettingsContent/>
            </AppSettings>
            <AppClose/>
        </AppBar>
    </TopContent>
    <LeftContent>
        @if (Item != null && PropertyFilters != null)
        {
            <CascadingValue Value="Item">
                <FiltersComponent PropertyFilters="@PropertyFilters"
                                  ModifierFilters="@ModifierFilters"
                                  PseudoFilters="@PseudoFilters"/>
            </CascadingValue>
        }
    </LeftContent>
    <ChildContent>
        @if (Item != null)
        {
            <CascadingValue Value="Item">
                <AppContainer>
                    <BulkResult/>
                    <ItemsResult/>
                </AppContainer>
            </CascadingValue>
        }
    </ChildContent>
</LayoutTwoColumn>

@inject ISettingsService SettingsService
@inject IStringLocalizer<TradeResources> Resources
@inject PriceCheckService PriceCheckService
@inject ITradeFilterService TradeFilterService
@inject ICurrentView CurrentView
@inject IItemParser ItemParser
@inject IBulkTradeService BulkTradeService

@code {

    [Parameter]
    public required string ItemText { get; set; }

    private int LeftContentWidth { get; set; }

    private Item? Item { get; set; }

    private PropertyFilters? PropertyFilters { get; set; }

    private List<ModifierFilter> ModifierFilters { get; set; } = [];

    private List<PseudoModifierFilter> PseudoFilters { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        CurrentView.Initialize(new ViewOptions()
        {
            Title = Resources["Trade"],
        });
        await base.OnInitializedAsync();
        LeftContentWidth = await SettingsService.GetInt(SettingKeys.PriceCheckSidebarWidth);
    }

    protected override async Task OnParametersSetAsync()
    {
        var itemText = ItemText.DecodeBase64Url();
        Item = ItemParser.ParseItem(itemText);

        PropertyFilters = await TradeFilterService.GetPropertyFilters(Item);
        ModifierFilters = TradeFilterService.GetModifierFilters(Item).ToList();
        PseudoFilters = TradeFilterService.GetPseudoModifierFilters(Item).ToList();

        var mode = TradeMode.Item;
        if (BulkTradeService.SupportsBulkTrade(Item))
        {
            mode = await SettingsService.GetEnum<TradeMode>(SettingKeys.PriceCheckCurrencyMode) ?? TradeMode.Item;
        }

        var automaticallyPriceCheck = await SettingsService.GetBool(SettingKeys.PriceCheckAutomaticallySearch);
        if (automaticallyPriceCheck)
        {
            if (mode == TradeMode.Bulk)
                await PriceCheckService.SearchBulk(Item);
            else
                await PriceCheckService.SearchItems(Item, PropertyFilters, ModifierFilters, PseudoFilters);
        }
        else
        {
            PriceCheckService.Clear();
        }

        await base.OnParametersSetAsync();
    }

    private async Task OnLeftContentResize(int width)
    {
        await SettingsService.Set(SettingKeys.PriceCheckSidebarWidth, width);
    }

}
