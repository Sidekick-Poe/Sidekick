@page "/trade/{itemText}"
@using Sidekick.Apis.Poe.Items
@using Sidekick.Apis.Poe.Trade
@using Sidekick.Common.Extensions
@using Sidekick.Common.Settings
@using Sidekick.Common.Ui.Tabs
@using Sidekick.Modules.Trade.Components
@using Sidekick.Modules.Trade.Exchange
@using Sidekick.Modules.Trade.Localization
@using Sidekick.Modules.Trade.Trade
@using Sidekick.Modules.Trade.Trade.Filters
@using Sidekick.Modules.Trade.Unique
@using Sidekick.Modules.Trade.Wiki
@using Sidekick.Modules.Trade.Settings

<LayoutTwoColumn LeftContentWidth="@LeftContentWidth" OnLeftContentResize="@OnLeftContentResize">
    <TopContent>
        <AppBar>
            <AppSettings Href="/settings/price">
                <SettingsContent/>
            </AppSettings>
            <AppClose/>
        </AppBar>
    </TopContent>
    <LeftContent>
        @if (Item != null)
        {
            <CascadingValue Value="Item"
                            IsFixed="true">
                <FiltersComponent/>
            </CascadingValue>
        }
    </LeftContent>
    <ChildContent>
        @if (Item != null)
        {
            <CascadingValue Value="Item"
                            IsFixed="true">
                <AppContainer>
                    <div class="sticky top-0 z-10 pb-1 mb-2 -mt-3 pt-2 bg-stone-900">
                        <TabList>
                            <ChildContent>
                                <UniqueTab CurrentTab="@CurrentTab" CurrentTabChanged="TabChanged"/>
                                <ExchangeTab CurrentTab="@CurrentTab" CurrentTabChanged="TabChanged"/>
                                <TradeTab CurrentTab="@CurrentTab" CurrentTabChanged="TabChanged"/>
                                <WikiTab/>
                            </ChildContent>
                            <RightContent>
                                <li>
                                    <LeagueText/>
                                </li>
                            </RightContent>
                        </TabList>
                        @switch (CurrentTab)
                        {
                            case "trade":
                                <TradeSticky/> break;
                        }
                    </div>

                    @switch (CurrentTab)
                    {
                        case "trade":
                            <TradeResult/> break;
                        case "unique":
                            <UniqueResult/> break;
                        case "exchange":
                            <ExchangeResult/> break;
                    }
                </AppContainer>
            </CascadingValue>
        }
    </ChildContent>
</LayoutTwoColumn>

@inject ISettingsService SettingsService
@inject IStringLocalizer<TradeResources> Resources
@inject TradeService TradeService
@inject ICurrentView CurrentView
@inject IItemParser ItemParser

@code {

    [Parameter]
    public required string ItemText { get; set; }

    private int LeftContentWidth { get; set; }

    private Item? Item { get; set; }

    private string? CurrentTab { get; set; } = "trade";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        LeftContentWidth = await SettingsService.GetInt(SettingKeys.PriceCheckSidebarWidth);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Item != null)
        {
            Item = null;
            StateHasChanged();
            await Task.Delay(100);
        }

        TradeService.Init();
        var itemText = ItemText.DecodeBase64Url();
        Item = ItemParser.ParseItem(itemText);

        await base.OnParametersSetAsync();
    }

    private async Task TabChanged(string? tab)
    {
        await InvokeAsync(() =>
        {
            CurrentTab = tab ?? "trade";
            StateHasChanged();
        });
    }

    private async Task OnLeftContentResize(int width)
    {
        await SettingsService.Set(SettingKeys.PriceCheckSidebarWidth, width);
    }

}
