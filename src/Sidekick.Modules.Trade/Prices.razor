@page "/trade/{itemText}"
@using Sidekick.Common.Extensions
@using Sidekick.Common.Settings
@using Sidekick.Modules.Trade.Localization
@using Sidekick.Modules.Trade.Components.Filters
@using Sidekick.Modules.Trade.Components.Bulk
@using Sidekick.Modules.Trade.Components.Items
@using Sidekick.Modules.Trade.Settings

@inherits Sidekick.Common.Ui.Views.SidekickView

<AppTitle Title="@Resources.Trade" />

<LayoutTwoColumn LeftContentWidth="@LeftContentWidth" OnLeftContentResize="@OnLeftContentResize">
    <TopContent>
        <AppBar>
            <AppSettings Href="/settings/price">
                <SettingsContent />
            </AppSettings>
            <AppClose />
        </AppBar>
    </TopContent>
    <LeftContent>
        @if (PriceCheckService.IsFilterLoading)
        {
            <AppLoading />
        }
        else
        {
            <FiltersComponent />
        }
    </LeftContent>
    <ChildContent>
        <SidekickErrorBoundary>
            <AppFullContainer>
                <BulkResult />
                <ItemsResult />
            </AppFullContainer>
        </SidekickErrorBoundary>
    </ChildContent>
</LayoutTwoColumn>

@implements IDisposable

@inject ISettingsService SettingsService
@inject TradeResources Resources
@inject PriceCheckService PriceCheckService

@code {

    [Parameter]
    public required string ItemText { get; set; }

    public override bool CloseOnBlur { get; set; }

    public override SidekickViewType ViewType => SidekickViewType.Overlay;

    private int LeftContentWidth { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        PriceCheckService.FilterLoadingChanged += StateHasChanged;
        CloseOnBlur = await SettingsService.GetBool(SettingKeys.PriceCheckCloseWithMouse);
        LeftContentWidth = await SettingsService.GetInt(SettingKeys.PriceCheckSidebarWidth);
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (string.IsNullOrEmpty(ItemText))
        {
            return;
        }

        await PriceCheckService.Initialize(ItemText.DecodeBase64Url() ?? string.Empty);
    }

    private async Task OnLeftContentResize(int width)
    {
        await SettingsService.Set(SettingKeys.PriceCheckSidebarWidth, width);
    }

    public void Dispose()
    {
        PriceCheckService.FilterLoadingChanged -= StateHasChanged;
    }

}
