@using Sidekick.Common.Game.Items
@using Sidekick.Common.Settings

@if (TradeService.CurrentMode != TradeMode.Item || TradeService.ItemTradeResult == null)
{
    return;
}

<div class="flex items-center w-full justify-between">
    <div>
        <CountString Count="TradeService.TradeItems.Count"
                     Total="TradeService.ItemTradeResult.Total"/>
    </div>
    <div class="flex gap-4">
        <ToggleCompactView OnClick="@ToggleView" IsCompact="@IsCompact"/>
        <OpenWebsiteLink QueryId="@TradeService.ItemTradeResult.Id"/>
    </div>
</div>

@implements IDisposable

@inject TradeService TradeService
@inject ISettingsService SettingsService

@code {

    [CascadingParameter]
    public required Item Item { get; set; }

    private bool IsCompact { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsCompact = await SettingsService.GetBool(SettingKeys.PriceCheckCompactMode);

        SettingsService.OnSettingsChanged += OnSettingsChanged;
        TradeService.Changed += StateHasChanged;

        await base.OnInitializedAsync();
    }

    private async void ToggleView()
    {
        IsCompact = !IsCompact;
        await SettingsService.Set(SettingKeys.PriceCheckCompactMode, IsCompact);
    }

    private async void OnSettingsChanged(string[] keys)
    {
        if (keys.Contains(SettingKeys.PriceCheckCompactMode) || keys.Contains(SettingKeys.PriceCheckAutomaticallyLoadMoreData))
        {
            IsCompact = await SettingsService.GetBool(SettingKeys.PriceCheckCompactMode);

            await InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        SettingsService.OnSettingsChanged -= OnSettingsChanged;
        TradeService.Changed -= StateHasChanged;
    }

}
