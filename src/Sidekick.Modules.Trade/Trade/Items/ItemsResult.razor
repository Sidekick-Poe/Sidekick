@using Sidekick.Apis.Poe.Items
@using Sidekick.Modules.Trade.Localization
@using Sidekick.Common.Settings

@if (TradeService.CurrentMode != TradeMode.Item || TradeService.ItemTradeResult == null)
{
    return;
}

@if (TradeService.ResultError != null)
{
    <AlertError>@TradeService.ResultError</AlertError>
}

@if (TradeService.TradeItems.Count == 0)
{
    <AlertInfo>@Resources["NoResults"]</AlertInfo>
    return;
}

@foreach (var result in TradeService.TradeItems)
{
    <ItemComponent @key="result.Id" Result="result" IsCompact="@IsCompact"/>
}

@if (TradeService.IsLoading)
{
    <AppLoading/>
}
else if (!FullyLoaded)
{
    <div class="flex justify-center">
        @if (AutomaticallyLoadMoreData)
        {
            <IntersectionObserver Callback="LoadMoreData">
                <ButtonPrimary OnClick="LoadMoreData">@Resources["LoadMoreData"]</ButtonPrimary>
            </IntersectionObserver>
        }
        else
        {
            <ButtonPrimary OnClick="LoadMoreData">@Resources["LoadMoreData"]</ButtonPrimary>
        }
    </div>
}

@implements IDisposable

@inject IStringLocalizer<TradeResources> Resources
@inject TradeService TradeService
@inject ISettingsService SettingsService

@code {

    [CascadingParameter]
    public required Item Item { get; set; }

    private bool FullyLoaded => TradeService.TradeItems.Count == (TradeService.ItemTradeResult?.Result?.Count ?? 0);

    private bool IsCompact { get; set; }

    private bool AutomaticallyLoadMoreData { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsCompact = await SettingsService.GetBool(SettingKeys.PriceCheckCompactMode);
        AutomaticallyLoadMoreData = await SettingsService.GetBool(SettingKeys.PriceCheckAutomaticallyLoadMoreData);

        SettingsService.OnSettingsChanged += OnSettingsChanged;

        TradeService.Changed += StateHasChanged;

        await base.OnInitializedAsync();
    }

    private async void OnSettingsChanged(string[] keys)
    {
        if (keys.Contains(SettingKeys.PriceCheckCompactMode) || keys.Contains(SettingKeys.PriceCheckAutomaticallyLoadMoreData))
        {
            IsCompact = await SettingsService.GetBool(SettingKeys.PriceCheckCompactMode);
            AutomaticallyLoadMoreData = await SettingsService.GetBool(SettingKeys.PriceCheckAutomaticallyLoadMoreData);

            await InvokeAsync(StateHasChanged);
        }
    }

    private async void LoadMoreData()
    {
        await TradeService.LoadMoreItems(Item.Header.Game);
    }

    public void Dispose()
    {
        SettingsService.OnSettingsChanged -= OnSettingsChanged;
        TradeService.Changed -= StateHasChanged;
    }

}
