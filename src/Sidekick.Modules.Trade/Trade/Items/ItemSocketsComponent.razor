@using Sidekick.Apis.Poe.Items
@using Sidekick.Apis.Poe.Trade.Trade.Results

@if (Sockets.All(x => x.Colour == SocketColour.PoE2_Gem))
{
    return;
}

<div class="item-sockets-wrapper">
    <div class="item-sockets @WidthClass">
        @{
            var previousGroup = -1;
        }
        @foreach (var socket in Sockets.OrderBy(x => x.Group)
                      .Select((x, index) => new
                      {
                          x.Colour,
                          x.Group,
                          Index = index
                      }))
        {
            var isLink = previousGroup != -1 && previousGroup == socket.Group;

            switch (socket.Colour)
            {
                case SocketColour.Red:
                    <div class="item-socket item-socket-red @(isLink ? "item-socket-link" : "")"></div>
                    break;

                case SocketColour.Green:
                    <div class="item-socket item-socket-green @(isLink ? "item-socket-link" : "")"></div>
                    break;

                case SocketColour.Blue:
                    <div class="item-socket item-socket-blue @(isLink ? "item-socket-link" : "")"></div>
                    break;

                case SocketColour.White:
                    <div class="item-socket item-socket-white @(isLink ? "item-socket-link" : "")"></div>
                    break;

                case SocketColour.Abyss:
                    <div class="item-socket item-socket-abyss @(isLink ? "item-socket-link" : "")"></div>
                    break;

                case SocketColour.PoE2:
                    <div class="item-socket item-socket-poe2"></div>
                    break;

                case SocketColour.PoE2_Gem:
                    <div class="item-socket-poe2-gem"></div>
                    break;

                case SocketColour.PoE2_Rune:
                    <div class="item-socket item-socket-poe2 item-socket-poe2-rune"></div>
                    break;

                case SocketColour.PoE2_Soulcore:
                    <div class="item-socket item-socket-poe2 item-socket-poe2-soulcore"></div>
                    break;
            }

            previousGroup = socket.Group;
        }
    </div>
</div>

@code {

    [Parameter]
    public required TradeResult Result { get; set; }

    private string WidthClass => Result.Item.Width == 1 ? "narrow" : "wide";

    private List<Socket> Sockets { get; set; } = [];

    protected override bool ShouldRender() => false;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (Result.Item.GemSockets.Count > 0)
        {
            Sockets = Result.Item.Sockets.Select(x => new Socket()
                {
                    Group = x.Group,
                    Colour = SocketColour.PoE2_Gem,
                })
                .ToList();
        }

        Sockets = Result.Item.Sockets.Where(x => x.ColourString != "DV") // Remove delve resonator sockets
            .Select(x => new Socket()
            {
                Group = x.Group,
                Colour = x.ColourString switch
                {
                    "B" => SocketColour.Blue,
                    "G" => SocketColour.Green,
                    "R" => SocketColour.Red,
                    "W" => SocketColour.White,
                    "A" => SocketColour.Abyss,
                    _ => x.Type switch
                    {
                        "rune" => x.Item switch
                        {
                            "rune" => SocketColour.PoE2_Rune,
                            "soulcore" => SocketColour.PoE2_Soulcore,
                            _ => SocketColour.PoE2,
                        },
                        _ => SocketColour.Undefined,
                    }
                }
            })
            .ToList();
    }

}
