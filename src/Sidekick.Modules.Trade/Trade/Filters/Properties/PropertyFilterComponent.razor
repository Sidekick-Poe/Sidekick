@using Sidekick.Apis.Poe.Items
@using Sidekick.Apis.Poe.Trade.Parser.Properties.Definitions
@using Sidekick.Apis.Poe.Trade.Parser.Properties.Filters

@switch (Filter)
{
    case IntPropertyFilter intFilter:
        <IntPropertyFilterComponent Filter="intFilter"/>
        break;

    case WeaponDamagePropertyFilter weaponDamageFilter:
        <WeaponDamagePropertyFilterComponent Filter="weaponDamageFilter"/>
        break;

    case DoublePropertyFilter doubleFilter:
        <DoublePropertyFilterComponent Filter="doubleFilter"/>
        break;

    case TriStatePropertyFilter triStateFilter:
        <TriStatePropertyFilterComponent Filter="triStateFilter"/>
        break;

    case StringPropertyFilter stringFilter:
        <StringPropertyFilterComponent Filter="stringFilter"/>
        break;

    case ExpandablePropertiesFilter expandableFilter:
        <ExpandablePropertyFilterComponent Filter="expandableFilter" Item="Item"/>
        break;

    case ItemClassPropertyFilter classFilter:
        <ItemClassPropertyFilterComponent Filter="classFilter"/>
        break;

    case not null when Filter.Definition is SeparatorProperty:
        <ItemSeparator Rarity="Item.Properties.Rarity"/>
        break;

    default:
        <BooleanPropertyFilterComponent Filter="Filter"/>
        break;
}

@code {

    [Parameter]
    public required Item Item { get; set; }

    [Parameter]
    public required PropertyFilter Filter { get; set; }

}
