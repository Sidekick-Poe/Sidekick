@using Sidekick.Apis.Poe.Languages
@using Sidekick.Apis.Poe.Models
@using Sidekick.Apis.Poe.Trade.Parser.Properties.Filters
@using Sidekick.Apis.Poe.Trade.Trade.Results
@using Sidekick.Modules.Trade.Localization
@using Sidekick.Common.Settings

@if (!Filter.ShowRow)
{
    return;
}

<FilterWrapper>
    <div class="flex flex-nowrap items-center">
        <div class="grow">
            <FormCheckbox Value="Filter.Checked"
                          ValueChanged="CheckedChanged">
                @if (Item.Properties.PhysicalDamage != null && Item.Properties.PhysicalDamageWithQuality != null)
                {
                    <ItemPropertyText Label="@GameLanguageProvider.Language.DescriptionPhysicalDamage"
                                      ContentType="Item.Properties.AugmentedProperties.Contains(nameof(ItemProperties.PhysicalDamage)) ? LineContentType.Augmented : LineContentType.Physical"
                                      Value="@Item.Properties.PhysicalDamageWithQuality.ToDisplayString()"
                                      HasAdditionalInformation="Item.Properties.PhysicalDamageWithQuality.ToDisplayString() != Item.Properties.PhysicalDamage.ToDisplayString() && Filter.OriginalValue > 0">
                        <AdditionalInformation>
                            <ItemPropertyText
                                Label="@($"{GameLanguageProvider.Language.DescriptionQuality} {Item.Properties.Quality}%")"
                                ContentType="LineContentType.Physical"
                                Value="@Item.Properties.PhysicalDamage.ToDisplayString()"/>
                            <ItemPropertyText Label="@($"{GameLanguageProvider.Language.DescriptionQuality} 20%")"
                                              ContentType="LineContentType.Physical"
                                              Value="@Item.Properties.PhysicalDamageWithQuality.ToDisplayString()"/>
                        </AdditionalInformation>
                    </ItemPropertyText>
                }

                @if (Item.Properties.FireDamage != null)
                {
                    <ItemPropertyText Label="@GameLanguageProvider.Language.DescriptionFireDamage"
                                      Value="@Item.Properties.FireDamage.ToDisplayString()"
                                      ContentType="LineContentType.Fire"/>
                }

                @if (Item.Properties.ColdDamage != null)
                {
                    <ItemPropertyText Label="@GameLanguageProvider.Language.DescriptionColdDamage"
                                      Value="@Item.Properties.ColdDamage.ToDisplayString()"
                                      ContentType="LineContentType.Cold"/>
                }

                @if (Item.Properties.LightningDamage != null)
                {
                    <ItemPropertyText Label="@GameLanguageProvider.Language.DescriptionLightningDamage"
                                      Value="@Item.Properties.LightningDamage.ToDisplayString()"
                                      ContentType="LineContentType.Lightning"/>
                }

                @if (Item.Properties.ChaosDamage != null)
                {
                    <ItemPropertyText Label="@GameLanguageProvider.Language.DescriptionChaosDamage"
                                      Value="@Item.Properties.ChaosDamage.ToDisplayString()"
                                      ContentType="LineContentType.Chaos"/>
                }
            </FormCheckbox>
        </div>

        @if (Filter.Checked)
        {
            <FilterRange @bind-Min="@Filter.Min"
                         @bind-Max="@Filter.Max"
                         Type="@Filter.FilterType"
                         TypeChanged="(v) => Filter.ChangeFilterType(v)"/>
        }
    </div>
</FilterWrapper>

@inject IStringLocalizer<TradeResources> Resources
@inject TradeService TradeService
@inject IGameLanguageProvider GameLanguageProvider
@inject ISettingsService SettingsService

@code {

    [CascadingParameter]
    public required Item Item { get; set; }

    [Parameter]
    public required WeaponDamagePropertyFilter Filter { get; set; }

    private async void CheckedChanged(bool value)
    {
        Filter.Checked = value;

        // We can change the settings in the Trade window, so we should fetch here every time.
        Filter.NormalizeValue = await SettingsService.GetObject<double>(SettingKeys.PriceCheckNormalizeValue);
        var filterType = await SettingsService.GetEnum<FilterType>(SettingKeys.PriceCheckDefaultFilterType) ?? FilterType.Minimum;
        Filter.ChangeFilterType(filterType);
    }

}
