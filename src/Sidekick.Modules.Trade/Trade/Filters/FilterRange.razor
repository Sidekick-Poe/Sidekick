@using Sidekick.Common.Settings
@using Sidekick.Modules.Trade.Localization;

<div class="flex flex-nowrap items-center [&_.range~.range_[contenteditable]]:rounded-l-none! [&_.range_[contenteditable]]:rounded-r-none! [&_.range:last-child_[contenteditable]]:rounded-r-md!" id="@Id">
    <Popover Trigger="PopoverTrigger.Hover">
        <PopoverAnchor>
            <ButtonIcon OnClick="ToggleType" AdditionalClasses="mr-[2px]">
                <Icon Svg="@Icon" Class="!size-4 !min-h-4 !min-w-4" />
            </ButtonIcon>
        </PopoverAnchor>
        <PopoverContent>
            <div class="flex gap-1">
                <ButtonIcon OnClick="() => SelectType(FilterType.Minimum)" Disabled="Type == FilterType.Minimum">
                    <Icon Svg="@UiIcons.FilterGreaterThan" />
                </ButtonIcon>
                <ButtonIcon OnClick="() => SelectType(FilterType.Maximum)" Disabled="Type == FilterType.Maximum">
                    <Icon Svg="@UiIcons.FilterLessThan" />
                </ButtonIcon>
                <ButtonIcon OnClick="() => SelectType(FilterType.Equals)" Disabled="Type == FilterType.Equals">
                    <Icon Svg="@UiIcons.FilterEquals" />
                </ButtonIcon>
                <ButtonIcon OnClick="() => SelectType(FilterType.Range)" Disabled="Type == FilterType.Range">
                    <Icon Svg="@UiIcons.FilterRange" />
                </ButtonIcon>
            </div>
        </PopoverContent>
    </Popover>

    @if (Type == FilterType.Minimum || Type == FilterType.Equals || Type == FilterType.Range)
    {
        <div @onwheel="OnMinWheel"
             @oncontextmenu="Clear"
             title="@(Type == FilterType.Equals ? Resources["Filters_Equals"] : Resources["Filters_Min"])"
             class="range">
            <FormContentEditable DoubleValue="Min"
                                 DoubleValueChanged="UpdateMinValue" />
        </div>
    }

    @if (Type == FilterType.Maximum || Type == FilterType.Range)
    {
        <div @onwheel="OnMaxWheel"
             @oncontextmenu="Clear"
             title="@Resources["Filters_Max"]"
             class="range">
            <FormContentEditable DoubleValue="Max"
                                 DoubleValueChanged="UpdateMaxValue" />
        </div>
    }
</div>

@inject IStringLocalizer<TradeResources> Resources
@inject IJSRuntime JsRuntime

@code {

    [Parameter]
    public double? Min { get; set; }

    [Parameter]
    public EventCallback<double?> MinChanged { get; set; }

    [Parameter]
    public double? Max { get; set; }

    [Parameter]
    public EventCallback<double?> MaxChanged { get; set; }

    [Parameter]
    public FilterType Type { get; set; }

    [Parameter]
    public EventCallback<FilterType> TypeChanged { get; set; }

    private string Id { get; } = UiUtilities.GenerateId();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Prevent the wheel event from scrolling.
            var js = $@"
                document.getElementById('{Id}')?.addEventListener('wheel', function(e) {{
                    e.preventDefault();
                }}, {{ passive: false }});
            ";
            await JsRuntime.InvokeVoidAsync("eval", js);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private string Icon => Type switch
    {
        FilterType.Maximum => UiIcons.FilterLessThan,
        FilterType.Equals => UiIcons.FilterEquals,
        FilterType.Range => UiIcons.FilterRange,
        _ => UiIcons.FilterGreaterThan,
    };

    private async Task SelectType(FilterType filterType)
    {
        await TypeChanged.InvokeAsync(filterType);
    }

    private async Task ToggleType()
    {
        var type = Type switch
        {
            FilterType.Minimum => FilterType.Maximum,
            FilterType.Maximum => FilterType.Equals,
            FilterType.Equals => FilterType.Range,
            FilterType.Range => FilterType.Minimum,
            _ => FilterType.Minimum,
        };

        await TypeChanged.InvokeAsync(type);
    }

    private async Task UpdateMinValue(double? value)
    {
        await MinChanged.InvokeAsync(value);
        if (Type == FilterType.Equals)
        {
            await MaxChanged.InvokeAsync(value);
        }
    }

    private async Task UpdateMaxValue(double? value)
    {
        await MaxChanged.InvokeAsync(value);
    }

    private async Task OnMinWheel(WheelEventArgs args)
    {
        var value = Min ?? 0;
        if (args.DeltaY < 0)
        {
            value = value + 1;
        }
        else
        {
            value = value - 1;
        }

        await UpdateMinValue(value);
    }

    private async Task OnMaxWheel(WheelEventArgs args)
    {
        var value = Max ?? 0;
        if (args.DeltaY < 0)
        {
            value = value + 1;
        }
        else
        {
            value = value - 1;
        }

        await UpdateMaxValue(value);
    }

    private async Task Clear()
    {
        await MinChanged.InvokeAsync(null);
        await MaxChanged.InvokeAsync(null);
    }

}
