@using Sidekick.Apis.Poe.Languages
@using Sidekick.Apis.Poe.Models
@using Sidekick.Apis.Poe.Trade.Filters
@using Sidekick.Apis.Poe.Trade.Parser.Properties.Filters
@using Sidekick.Common.Enums
@using Sidekick.Modules.Trade.Localization
@if (Visible)
{
    @if (!string.IsNullOrEmpty(ClassLabel))
    {
        <FilterWrapper>
            <div class="flex items-center flex-nowrap justify-between">
                <FormCheckbox Value="PropertyFilters.ClassFilterApplied"
                              ValueChanged="ClassFilterChanged">
                    <ItemPropertyText Label="@Resources["Item Class"]"
                                      Value="@ClassLabel"/>
                </FormCheckbox>
            </div>
        </FilterWrapper>
    }

    @if (!string.IsNullOrEmpty(Item.Header.ApiType))
    {
        <FilterWrapper>
            <div class="flex items-center flex-nowrap justify-between">
                <FormCheckbox Value="PropertyFilters.BaseTypeFilterApplied"
                              ValueChanged="TypeFilterChanged">
                    <ItemPropertyText Label="@Resources["Base Type"]"
                                      Value="@Item.Header.ApiType"/>
                </FormCheckbox>
            </div>
        </FilterWrapper>
    }

    @if (!string.IsNullOrEmpty(RarityLabel))
    {
        <FilterWrapper>
            <div class="flex items-center flex-nowrap justify-between">
                <FormCheckbox Value="PropertyFilters.RarityFilterApplied"
                              ValueChanged="RarityFilterChanged">
                    <ItemPropertyText Label="@Resources["Rarity"]"
                                      Value="@RarityLabel"/>
                </FormCheckbox>
            </div>
        </FilterWrapper>
    }

    <ItemSeparator Rarity="Item.Header.Rarity"/>
}

@inject IStringLocalizer<TradeResources> Resources
@inject IFilterProvider FilterProvider
@inject IGameLanguageProvider GameLanguageProvider

@code {

    [CascadingParameter]
    public required Item Item { get; set; }

    [Parameter]
    public required PropertyFilters PropertyFilters { get; set; }

    private bool Visible => Item.Header.Rarity is Rarity.Rare or Rarity.Magic or Rarity.Normal && Item.Header.ItemClass != ItemClass.Unknown && !string.IsNullOrEmpty(ClassLabel);

    private string? ClassLabel { get; set; }

    private string? RarityLabel { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        ClassLabel = FilterProvider.TypeCategory?.Option.Options.FirstOrDefault(x => x.Id == Item.Header.ItemClass.GetValueAttribute())?.Text;
        RarityLabel = Item.Header.Rarity switch
        {
            Rarity.Currency => GameLanguageProvider.Language.RarityCurrency,
            Rarity.Normal => GameLanguageProvider.Language.RarityNormal,
            Rarity.Magic => GameLanguageProvider.Language.RarityMagic,
            Rarity.Rare => GameLanguageProvider.Language.RarityRare,
            Rarity.Unique => GameLanguageProvider.Language.RarityUnique,
            _ => null
        };
    }

    private void TypeFilterChanged(bool value)
    {
        PropertyFilters.ClassFilterApplied = !value;
        PropertyFilters.BaseTypeFilterApplied = value;
    }

    private void ClassFilterChanged(bool value)
    {
        PropertyFilters.ClassFilterApplied = value;
        PropertyFilters.BaseTypeFilterApplied = !value;
    }

    private void RarityFilterChanged(bool value)
    {
        PropertyFilters.RarityFilterApplied = value;
    }

}
