@using Sidekick.Apis.Poe.Items
@using Sidekick.Apis.Poe.Trade.Trade.Filters
@using Sidekick.Common.Settings
@using Sidekick.Modules.Trade.Localization

<FilterWrapper>
    <div class="flex flex-nowrap items-center">
        <div class="grow">
            <FormCheckbox Value="Filter.Checked ?? false"
                          ValueChanged="CheckedChanged">
                <ItemModifierText Class="text-left"
                                  Category="ModifierCategory.Pseudo">@Filter.PseudoModifier.Text</ItemModifierText>
            </FormCheckbox>
        </div>

        <div class="flex flex-col items-end justify-between">
            <ItemModifierCategoryChip Category="ModifierCategory.Pseudo"/>

            <div class="h-[2px]"></div>

            @if (Filter is
                     {
                         Checked: true,
                         PseudoModifier:
                         {
                             Value: not 0
                         }
                     })
            {
                <FilterRange @bind-Min="@Filter.Min" @bind-Max="@Filter.Max" Type="@Filter.FilterType"
                             TypeChanged="(v) => Filter.ChangeFilterType(v)"/>
            }
        </div>
    </div>
</FilterWrapper>

@inject IStringLocalizer<TradeResources> Resources
@inject ISettingsService SettingsService

@code {

    [Parameter]
    public required PseudoModifierFilter Filter { get; set; }

    private async void CheckedChanged(bool value)
    {
        Filter.Checked = value;

        // We can change the settings in the Trade window, so we should fetch here every time.
        Filter.NormalizeValue = await SettingsService.GetObject<double>(SettingKeys.PriceCheckNormalizeValue);
        var filterType = await SettingsService.GetEnum<FilterType>(SettingKeys.PriceCheckDefaultFilterType) ?? FilterType.Minimum;
        Filter.ChangeFilterType(filterType);
    }

}
