
<div class="d-flex align-center">
    <div class="flex-grow-1 pr-4">
        <MudField @onclick="Click"
                  Label="@Label"
                  Variant="Variant.Filled"
                  Class="@Class">
            @if (Active)
            {
                <MudText>@Resources.Key_Active</MudText>
            }
            else if (string.IsNullOrEmpty(Value))
            {
                <MudText>@Resources.Key_Unset</MudText>
            }
            else
            {
                <MudText>@Value</MudText>
            }
            @if (Duplicated)
            {
                <MudText Typo="Typo.caption" Color="Color.Error">@Resources.Key_Duplicated</MudText>
            }
        </MudField>
    </div>
    <div class="flex-grow-0">
        <MudIconButton @onclick="Delete"
                       Icon="@Icons.Material.Filled.Cancel" />
    </div>
</div>

@implements IDisposable
@code {
    [Inject] private SettingsResources Resources { get; set; }
    [Inject] private SettingsModel ViewModel { get; set; }
    [Inject] private IKeyboardProvider Keyboard { get; set; }

    [Parameter] public string Label { get; set; }
    [Parameter] public string Value { get; set; }
    [Parameter] public EventCallback<string> ValueChanged { get; set; }

    private Guid Id { get; } = Guid.NewGuid();
    private bool Active => ViewModel.CurrentKey == Id;
    private string Class => Active ? "mud-info" : null;
    private bool Duplicated { get; set; }

    protected override void OnInitialized()
    {
        Keyboard.OnKeyDown += OnKeyDown;
        base.OnInitialized();
    }

    public void Click()
    {
        Duplicated = false;

        if (ViewModel.CurrentKey == Id)
        {
            ViewModel.CurrentKey = null;
        }
        else
        {
            ViewModel.CurrentKey = Id;
        }
    }

    private bool IsDuplicated(string key)
    {
        var count = 0;
        foreach (var property in ViewModel.GetType().GetProperties())
        {
            if (property.GetValue(ViewModel)?.ToString() == key)
            {
                count++;
            }
        }

        foreach (var chatCommand in ViewModel.Chat_Commands)
        {
            if (chatCommand.Key == key)
            {
                count++;
            }
        }

        return count >= 2;
    }

    private void OnKeyDown(string key)
    {
        this.InvokeAsync(async () =>
        {
            if (!Active)
            {
                return;
            }

            if (key != "Esc")
            {
                var oldValue = Value;

                await ValueChanged.InvokeAsync(key);
                Duplicated = IsDuplicated(key);

                if (Duplicated)
                {
                    await ValueChanged.InvokeAsync(oldValue);
                    _ = this.InvokeAsync(async () =>
                    {
                        await Task.Delay(3000);
                        Duplicated = false;
                        StateHasChanged();
                    });
                }
            }

            ViewModel.CurrentKey = null;
            StateHasChanged();
        });
    }

    public async Task Delete()
    {
        ViewModel.CurrentKey = null;
        await ValueChanged.InvokeAsync("");
    }

    public void Dispose()
    {
        Keyboard.OnKeyDown -= OnKeyDown;
    }
}
