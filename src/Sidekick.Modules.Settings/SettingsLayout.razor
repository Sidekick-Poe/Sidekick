@inherits LayoutComponentBase
@layout MenuLayout

<MudDrawer ClipMode="DrawerClipMode.Always"
           Open="true"
           Variant="DrawerVariant.Persistent">
    <MudDrawerHeader></MudDrawerHeader>
    <MudNavMenu>
        <MudNavLink Match="NavLinkMatch.All" Href="/settings">@Resources.General</MudNavLink>
        <MudNavLink Match="NavLinkMatch.All" Href="/settings/price">@Resources.Trade</MudNavLink>
        <MudNavLink Match="NavLinkMatch.All" Href="/settings/map">@Resources.Map</MudNavLink>
        <MudNavLink Match="NavLinkMatch.All" Href="/settings/cheatsheets">@Resources.Cheatsheets</MudNavLink>
        <MudNavLink Match="NavLinkMatch.All" Href="/settings/wiki">@Resources.Wiki</MudNavLink>
        <MudNavLink Match="NavLinkMatch.All" Href="/settings/chat">@Resources.Chat</MudNavLink>
    </MudNavMenu>
</MudDrawer>

<MudMainContent>
    <MudContainer>
        @Body

        <div class="d-flex">
            <div class="flex-grow-1">
                <MudButton Variant="Variant.Text"
                           OnClick="ResetCache">
                    @Resources.ResetCache
                </MudButton>
            </div>
            <div class="flex-grow-0">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           OnClick="Save">
                    @Resources.Save
                </MudButton>
            </div>
        </div>
    </MudContainer>
</MudMainContent>

@code {
    [Inject] private SettingsResources Resources { get; set; }
    [Inject] private SettingsModel ViewModel { get; set; }
    [Inject] private IViewLocator ViewLocator { get; set; }
    [Inject] private ISettingsService SettingsService { get; set; }
    [Inject] private ICacheProvider CacheProvider { get; set; }
    
    [CascadingParameter] public MenuLayout Layout { get; set; }
    [CascadingParameter] public SidekickView View { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Layout.SetMenuIcon(false);
        await base.OnInitializedAsync();
    }

    public async Task Save()
    {
        await SettingsService.Save(ViewModel);
        await View.Close();
    }

    public async Task ResetCache()
    {
        CacheProvider.Clear();
        await ViewLocator.Open("/initialize");
        await View.Close();
    }
}
