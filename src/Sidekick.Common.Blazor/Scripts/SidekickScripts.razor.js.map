{
  "version": 3,
  "sources": ["node_modules/unfetch/src/index.mjs", "node_modules/isomorphic-unfetch/browser.js", "node_modules/wtf_wikipedia/src/_fetch/index.js", "node_modules/wtf_wikipedia/src/_fetch/parseUrl.js", "node_modules/wtf_wikipedia/src/_lib/helpers.js", "node_modules/wtf_wikipedia/src/_fetch/makeUrl.js", "node_modules/wtf_wikipedia/src/_fetch/getResult.js", "node_modules/wtf_wikipedia/src/01-document/_sectionMap.js", "node_modules/wtf_wikipedia/src/_lib/setDefaults.js", "node_modules/wtf_wikipedia/src/01-document/toJson.js", "node_modules/wtf_wikipedia/src/_data/categories.js", "node_modules/wtf_wikipedia/src/_data/disambig_templates.js", "node_modules/wtf_wikipedia/src/_data/disambig_titles.js", "node_modules/wtf_wikipedia/src/_data/images.js", "node_modules/wtf_wikipedia/src/_data/infoboxes.js", "node_modules/wtf_wikipedia/src/_data/redirects.js", "node_modules/wtf_wikipedia/src/_data/references.js", "node_modules/wtf_wikipedia/src/01-document/_disambig.js", "node_modules/wtf_wikipedia/src/01-document/isDisambig.js", "node_modules/wtf_wikipedia/src/image/toJson.js", "node_modules/wtf_wikipedia/src/image/Image.js", "node_modules/wtf_wikipedia/src/_data/languages.js", "node_modules/wtf_wikipedia/src/_data/interwiki.js", "node_modules/wtf_wikipedia/src/link/interwiki.js", "node_modules/wtf_wikipedia/src/link/parse.js", "node_modules/wtf_wikipedia/src/01-document/redirects.js", "node_modules/wtf_wikipedia/src/01-document/preProcess/kill_xml.js", "node_modules/wtf_wikipedia/src/01-document/preProcess/index.js", "node_modules/wtf_wikipedia/src/_lib/encode.js", "node_modules/wtf_wikipedia/src/02-section/toJson.js", "node_modules/wtf_wikipedia/src/link/Link.js", "node_modules/wtf_wikipedia/src/link/index.js", "node_modules/wtf_wikipedia/src/04-sentence/formatting.js", "node_modules/wtf_wikipedia/src/04-sentence/toJson.js", "node_modules/wtf_wikipedia/src/04-sentence/Sentence.js", "node_modules/wtf_wikipedia/src/04-sentence/_abbreviations.js", "node_modules/wtf_wikipedia/src/04-sentence/parse.js", "node_modules/wtf_wikipedia/src/04-sentence/index.js", "node_modules/wtf_wikipedia/src/table/parse/_findRows.js", "node_modules/wtf_wikipedia/src/table/parse/_spans.js", "node_modules/wtf_wikipedia/src/table/parse/index.js", "node_modules/wtf_wikipedia/src/table/toJson.js", "node_modules/wtf_wikipedia/src/table/Table.js", "node_modules/wtf_wikipedia/src/table/index.js", "node_modules/wtf_wikipedia/src/03-paragraph/toJson.js", "node_modules/wtf_wikipedia/src/03-paragraph/Paragraph.js", "node_modules/wtf_wikipedia/src/template/parse/toJSON/_strip.js", "node_modules/wtf_wikipedia/src/template/parse/toJSON/_fmtName.js", "node_modules/wtf_wikipedia/src/template/parse/toJSON/01-pipe-splitter.js", "node_modules/wtf_wikipedia/src/template/parse/toJSON/02-keyMaker.js", "node_modules/wtf_wikipedia/src/template/parse/toJSON/03-cleanup.js", "node_modules/wtf_wikipedia/src/template/parse/toJSON/index.js", "node_modules/wtf_wikipedia/src/image/nested_find.js", "node_modules/wtf_wikipedia/src/image/index.js", "node_modules/wtf_wikipedia/src/list/List.js", "node_modules/wtf_wikipedia/src/list/index.js", "node_modules/wtf_wikipedia/src/03-paragraph/index.js", "node_modules/wtf_wikipedia/src/template/find/02-flat.js", "node_modules/wtf_wikipedia/src/template/parse/toJSON/_getName.js", "node_modules/wtf_wikipedia/src/template/find/01-nested.js", "node_modules/wtf_wikipedia/src/template/parse/_ignore.js", "node_modules/wtf_wikipedia/src/infobox/_infoboxes.js", "node_modules/wtf_wikipedia/src/template/parse/_infobox.js", "node_modules/wtf_wikipedia/src/template/custom/aliases.js", "node_modules/wtf_wikipedia/src/template/custom/text-only/hardcoded.js", "node_modules/wtf_wikipedia/src/template/custom/text-only/easy-inline.js", "node_modules/wtf_wikipedia/src/template/custom/text-only/shorthands.js", "node_modules/wtf_wikipedia/src/template/custom/_lib.js", "node_modules/wtf_wikipedia/src/template/custom/text-only/functions.js", "node_modules/wtf_wikipedia/src/template/custom/text-only/languages.js", "node_modules/wtf_wikipedia/src/_data/flags.js", "node_modules/wtf_wikipedia/src/template/custom/text-only/flags.js", "node_modules/wtf_wikipedia/src/template/custom/text-only/table-cell.js", "node_modules/wtf_wikipedia/src/template/custom/text-only/index.js", "node_modules/wtf_wikipedia/src/template/custom/data-only/id-name.js", "node_modules/wtf_wikipedia/src/template/custom/data-only/id-title.js", "node_modules/wtf_wikipedia/src/template/custom/data-only/functions.js", "node_modules/wtf_wikipedia/src/template/custom/data-only/index.js", "node_modules/wtf_wikipedia/src/template/custom/text-and-data/shorthand.js", "node_modules/wtf_wikipedia/src/template/custom/text-and-data/functions.js", "node_modules/wtf_wikipedia/src/template/custom/text-and-data/currency.js", "node_modules/wtf_wikipedia/src/template/custom/text-and-data/dates/_lib.js", "node_modules/wtf_wikipedia/src/template/custom/text-and-data/dates/_format.js", "node_modules/wtf_wikipedia/src/template/custom/text-and-data/dates/_parsers.js", "node_modules/wtf_wikipedia/src/template/custom/text-and-data/dates/index.js", "node_modules/wtf_wikipedia/src/template/custom/text-and-data/geo/_lib.js", "node_modules/wtf_wikipedia/src/template/custom/text-and-data/geo/index.js", "node_modules/wtf_wikipedia/src/template/custom/text-and-data/misc.js", "node_modules/wtf_wikipedia/src/template/custom/text-and-data/stock-exchanges.js", "node_modules/wtf_wikipedia/src/template/custom/text-and-data/sports/_lib.js", "node_modules/wtf_wikipedia/src/template/custom/text-and-data/sports/sports.js", "node_modules/wtf_wikipedia/src/template/custom/text-and-data/index.js", "node_modules/wtf_wikipedia/src/template/custom/index.js", "node_modules/wtf_wikipedia/src/template/parse/index.js", "node_modules/wtf_wikipedia/src/infobox/toJson.js", "node_modules/wtf_wikipedia/src/infobox/Infobox.js", "node_modules/wtf_wikipedia/src/reference/Reference.js", "node_modules/wtf_wikipedia/src/template/Template.js", "node_modules/wtf_wikipedia/src/template/sortOut.js", "node_modules/wtf_wikipedia/src/template/index.js", "node_modules/wtf_wikipedia/src/reference/index.js", "node_modules/wtf_wikipedia/src/02-section/start-to-end/gallery.js", "node_modules/wtf_wikipedia/src/02-section/start-to-end/election.js", "node_modules/wtf_wikipedia/src/02-section/start-to-end/nba.js", "node_modules/wtf_wikipedia/src/02-section/start-to-end/mlb.js", "node_modules/wtf_wikipedia/src/02-section/start-to-end/mma.js", "node_modules/wtf_wikipedia/src/02-section/start-to-end/math.js", "node_modules/wtf_wikipedia/src/02-section/start-to-end/index.js", "node_modules/wtf_wikipedia/src/02-section/Section.js", "node_modules/wtf_wikipedia/src/02-section/heading.js", "node_modules/wtf_wikipedia/src/02-section/index.js", "node_modules/wtf_wikipedia/src/01-document/categories.js", "node_modules/wtf_wikipedia/src/01-document/Document.js", "node_modules/wtf_wikipedia/src/_fetch/parseDoc.js", "node_modules/wtf_wikipedia/src/_fetch/_headers.js", "node_modules/wtf_wikipedia/src/_version.js", "node_modules/wtf_wikipedia/src/_lib/fetch.js", "node_modules/wtf_wikipedia/src/index.js", "src/test.js", "src/main.js"],
  "sourcesContent": ["export default function(url, options) {\n\toptions = options || {};\n\treturn new Promise( (resolve, reject) => {\n\t\tconst request = new XMLHttpRequest();\n\t\tconst keys = [];\n\t\tconst all = [];\n\t\tconst headers = {};\n\n\t\tconst response = () => ({\n\t\t\tok: (request.status/100|0) == 2,\t\t// 200-299\n\t\t\tstatusText: request.statusText,\n\t\t\tstatus: request.status,\n\t\t\turl: request.responseURL,\n\t\t\ttext: () => Promise.resolve(request.responseText),\n\t\t\tjson: () => Promise.resolve(request.responseText).then(JSON.parse),\n\t\t\tblob: () => Promise.resolve(new Blob([request.response])),\n\t\t\tclone: response,\n\t\t\theaders: {\n\t\t\t\tkeys: () => keys,\n\t\t\t\tentries: () => all,\n\t\t\t\tget: n => headers[n.toLowerCase()],\n\t\t\t\thas: n => n.toLowerCase() in headers\n\t\t\t}\n\t\t});\n\n\t\trequest.open(options.method || 'get', url, true);\n\n\t\trequest.onload = () => {\n\t\t\trequest.getAllResponseHeaders().replace(/^(.*?):[^\\S\\n]*([\\s\\S]*?)$/gm, (m, key, value) => {\n\t\t\t\tkeys.push(key = key.toLowerCase());\n\t\t\t\tall.push([key, value]);\n\t\t\t\theaders[key] = headers[key] ? `${headers[key]},${value}` : value;\n\t\t\t});\n\t\t\tresolve(response());\n\t\t};\n\n\t\trequest.onerror = reject;\n\n\t\trequest.withCredentials = options.credentials=='include';\n\n\t\tfor (const i in options.headers) {\n\t\t\trequest.setRequestHeader(i, options.headers[i]);\n\t\t}\n\n\t\trequest.send(options.body || null);\n\t});\n}\n", "module.exports = self.fetch || (self.fetch = require('unfetch').default || require('unfetch'));\n", "import unfetch from 'isomorphic-unfetch'\n\nimport parseUrl from './parseUrl.js'\nimport makeUrl from './makeUrl.js'\nimport getResult from './getResult.js'\nimport parseDoc from './parseDoc.js'\nimport makeHeaders from './_headers.js'\nconst isUrl = /^https?:\\/\\//\n\n/**\n * @typedef fetchDefaults\n * @property {string | undefined} [path] the path to the wiki api. default: api.php\n * @property {string | undefined} [wiki] \n * @property {string | undefined} [domain] the domain of the wiki you want to query\n * @property {boolean | undefined} [follow_redirects] should the library follow redirects\n * @property {string | undefined} [lang] the language of the wiki\n * @property {string | number | Array<string> | Array<number> | undefined} [title] \n * @property {string | undefined} [Api-User-Agent] the user agent of the application\n * @property {string | undefined} [origin] the domain or the origin of the request\n */\n\n/**\n * @type {fetchDefaults}\n */\nconst defaults = {\n  lang: 'en',\n  wiki: 'wikipedia',\n  domain: undefined,\n  follow_redirects: true,\n  path: 'api.php', //some 3rd party sites use a weird path\n}\n\n/**\n * @callback fetchCallback\n * @param {Object} error\n * @param {any} result\n */\n\n/**\n *  fetches the page from the wiki and returns a Promise with the parsed wiki text\n * \n * if you supply it with a single pageID or title it will return a Document object.\n * if you supply a wiki URL then we will parse it and use the tile and provide a single Document object\n * if you supply it with an array with pageIDs or an array of titles it will return an array of document objects.\n *\n * there is another catch in the programming you need if you provide an array it needs to be eighter pageIDs or titles they can not be mixed.\n *\n * @param {string | number | Array<number> | Array<string>} title the title, PageID, URL or an array of all three of the page(s) you want to fetch\n * @param {fetchDefaults} [options] the options for the fetch or the language of the wiki for the article\n * @param {fetchCallback} [callback] the callback function for the call\n */\nconst fetch = function (title, options, callback) {\n  // support lang as 2nd param\n  if (typeof options === 'string') {\n    options = { lang: options }\n  }\n  options = { ...defaults, ...options }\n  options.title = title\n\n  //parse url input\n  if (typeof title === 'string' && isUrl.test(title)) {\n    options = { ...options, ...parseUrl(title) }\n  }\n\n  const url = makeUrl(options)\n  const headers = makeHeaders(options)\n\n  return unfetch(url, headers)\n    .then((res) => res.json())\n    .then((res) => {\n      let data = getResult(res, options)\n      data = parseDoc(data, title)\n      if (callback) {\n        callback(null, data)\n      }\n      return data\n    })\n    .catch((e) => {\n      console.error(e)\n      if (callback) {\n        callback(e, null)\n      }\n      return null\n    })\n}\nexport default fetch\n", "/**\n * Parses out the domain and title from a url\n *\n * @private\n * @param {string} url The url that will be parsed\n * @returns {{domain: string, title: string}} The domain and title of a url\n */\nconst parseUrl = function (url) {\n  let parsed = new URL(url) // eslint-disable-line\n  let title = parsed.pathname.replace(/^\\/(wiki\\/)?/, '')\n  title = decodeURIComponent(title)\n  return {\n    domain: parsed.host,\n    title: title,\n  }\n}\nexport default parseUrl\n", "/**\n * capitalizes the input\n * hello -> Hello\n * hello there -> Hello there\n *\n * @private\n * @param {string} [str] the string that will be capitalized\n * @returns {string} the capitalized string\n */\nfunction capitalise(str) {\n  if (str && typeof str === 'string') {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n  return ''\n}\n\n/**\n * trim whitespaces of the ends normalize 2 spaces into one and removes whitespaces before commas\n *\n * @private\n * @param {string} [str] the string that will be processed\n * @returns {string} the processed string\n */\nfunction trim_whitespace(str) {\n  if (str && typeof str === 'string') {\n    str = str.replace(/^\\s+/, '')\n    str = str.replace(/\\s+$/, '')\n    str = str.replace(/ {2}/, ' ')\n    str = str.replace(/\\s, /, ', ')\n    return str\n  }\n  return ''\n}\n\n/**\n * determines if an variable is an array or not\n *\n * @private\n * @param {*} x the variable that needs to be checked\n * @returns {boolean} whether the variable is an array\n */\nfunction isArray(x) {\n  return Object.prototype.toString.call(x) === '[object Array]'\n}\n\n/**\n *  determines if an variable is an object or not\n *\n * @private\n * @param {*} x the variable that needs to be checked\n * @returns {boolean} whether the variable is an object\n */\nfunction isObject(x) {\n  return x && Object.prototype.toString.call(x) === '[object Object]'\n}\n\nexport {\n  capitalise,\n  trim_whitespace,\n  isArray,\n  isObject,\n}\n", "import { isArray } from '../_lib/helpers.js'\n\nconst isInterWiki = /(wikibooks|wikidata|wikimedia|wikinews|wikipedia|wikiquote|wikisource|wikispecies|wikiversity|wikivoyage|wiktionary|foundation|meta)\\.org/\n\nconst defaults = {\n  action: 'query',\n  prop: 'revisions|pageprops', // we use the 'revisions' api here, instead of the Raw api, for its CORS-rules..\n  rvprop: 'content',\n  maxlag: 5,\n  rvslots: 'main',\n  origin: '*',\n  format: 'json',\n  redirects: 'true',\n}\n\n/**\n * turns a object into a query string\n * \n * @private\n * @param {Object<string, string | number | boolean>} obj\n * @returns {string} QueryString\n */\nconst toQueryString = function (obj) {\n  return Object.entries(obj)\n    .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n    .join('&')\n}\n\n/**\n * cleans and prepares the tile by replacing the spaces with underscores (_) and trimming the white spaces of the ends\n *\n * @private\n * @param {string} page the title that needs cleaning\n * @returns {string} the cleaned title\n */\nconst cleanTitle = (page) => {\n  return page.replace(/ /g, '_')\n    .trim()\n}\n\n/**\n * generates the url for fetching the pages\n * \n * @private\n * @param {import('.').fetchDefaults} options\n * @param {Object} [parameters]\n * @returns {string} the url that can be used to make the fetch\n */\nconst makeUrl = function (options, parameters = defaults) {\n  let params = Object.assign({}, parameters)\n\n  //default url\n  let apiPath = ''\n\n  //add support for third party apis\n  if (options.domain) {\n    //wikimedia is the only api that uses `/w/api` as its path. other wikis use other paths\n    let path = isInterWiki.test(options.domain) ? 'w/api.php' : options.path\n    apiPath = `https://${options.domain}/${path}?`\n  } else if (options.lang && options.wiki) {\n    apiPath = `https://${options.lang}.${options.wiki}.org/w/api.php?`\n  } else {\n    return ''\n  }\n\n\n  if (!options.follow_redirects) {\n    delete params.redirects\n  }\n\n  // the origin header and url parameters need to be the same\n  // if one is provided we should change both the header and the parameter\n  if (options.origin) {\n    params.origin = options.origin\n  }\n\n  //support numerical ids\n  let title = options.title\n  if (typeof title === 'number') {\n    //single pageId\n    params.pageids = title\n  } else if (typeof title === 'string') {\n    //single page title\n    params.titles = cleanTitle(title)\n  } else if (title !== undefined && isArray(title) && typeof title[0] === 'number') {\n    //pageid array\n    params.pageids = title.filter(t => t).join('|')\n  } else if (title !== undefined && isArray(title) === true && typeof title[0] === 'string') {\n    //title array\n    params.titles = title.filter(t => t).map(cleanTitle).join('|')\n  } else {\n    return ''\n  }\n\n  //make it!\n  return `${apiPath}${toQueryString(params)}`\n}\nexport default makeUrl\n", "/**\n * parses the media wiki api response to something we can use\n *\n * the data-format from mediawiki api is nutso\n *\n * @private\n * @param {object} data\n * @param {object} [options]\n * @returns {*} result\n */\nconst getResult = function (data, options = {}) {\n  //get all the pagesIds from the result\n  let pages = Object.keys(data.query.pages)\n\n  // map over the pageIds to parse out all the information\n  return pages.map((id) => {\n    // get the page by pageID\n    let page = data.query.pages[id] || {}\n\n    // if the page is missing or not found than return null\n    if (page.hasOwnProperty('missing') || page.hasOwnProperty('invalid')) {\n      return null\n    }\n\n    // get the text from the object\n    let text = page.revisions[0]['*']\n    // if the text is not found in the regular place than it is at the other place\n    if (!text && page.revisions[0].slots) {\n      text = page.revisions[0].slots.main['*']\n    }\n\n    page.pageprops = page.pageprops || {}\n\n    let domain = options.domain\n    if (!domain && options.wiki) {\n      domain = `${options.wiki}.org`\n    }\n\n    let meta = Object.assign({}, options, {\n      title: page.title,\n      pageID: page.pageid,\n      namespace: page.ns,\n      domain: domain,\n      wikidata: page.pageprops.wikibase_item,\n      description: page.pageprops['wikibase-shortdesc'],\n    })\n\n\n    return { wiki: text, meta: meta }\n  })\n}\n\nexport default getResult\n", "/**\n * helper for looping around all sections of a document\n *\n * @private\n * @param {object} doc the document with the sections\n * @param {string} fn the function name of the function that will be called\n * @param {string | number} [clue] the clue that will be used with the function\n * @returns {Array|*} the array of item at the index of the clue\n */\nconst sectionMap = function (doc, fn, clue) {\n  let arr = []\n  doc.sections().forEach((sec) => {\n    let list = []\n    if (typeof clue === 'string') {\n      list = sec[fn](clue)\n    } else {\n      list = sec[fn]()\n    }\n    list.forEach((t) => {\n      arr.push(t)\n    })\n  })\n  if (typeof clue === 'number') {\n    if (arr[clue] === undefined) {\n      return []\n    }\n    return [arr[clue]]\n  }\n  return arr\n}\nexport default sectionMap\n", "/**\n * applies the the key values of defaults to options\n *\n * @private\n * @param {object} options the user options\n * @param {object} defaults the defaults\n * @returns {object} the user options with the defaults applied\n */\nconst setDefaults = function (options, defaults) {\n  return Object.assign({}, defaults, options)\n}\nexport default setDefaults\n", "import setDefaults from '../_lib/setDefaults.js'\n\n/**\n * @typedef DocumentToJsonOptions\n * @property {boolean | undefined} title\n * @property {boolean | undefined} pageID\n * @property {boolean | undefined} categories\n * @property {boolean | undefined} sections\n * @property {boolean | undefined} coordinates\n * @property {boolean | undefined} infoboxes\n * @property {boolean | undefined} images\n * @property {boolean | undefined} plaintext\n * @property {boolean | undefined} citations\n * @property {boolean | undefined} references\n */\nconst defaults = {\n  title: true,\n  sections: true,\n  pageID: true,\n  categories: true,\n}\n\n/**\n * @typedef documentToJsonReturn\n * @property {string | undefined} title\n * @property {number | null | undefined} pageID\n * @property {string[] | undefined} categories\n * @property {object[] | undefined} sections\n * @property {boolean | undefined} isRedirect\n * @property {object | undefined} redirectTo\n * @property {object[] | undefined} coordinates\n * @property {object[] | undefined} infoboxes\n * @property {object[] | undefined} images\n * @property {string | undefined} plaintext\n * @property {object[] | undefined} references\n */\n\n/**\n * an opinionated output of the most-wanted data\n *\n * @private\n * @param {object} doc\n * @param {DocumentToJsonOptions} options\n * @returns {documentToJsonReturn}\n */\nconst toJSON = function (doc, options) {\n  options = setDefaults(options, defaults)\n\n  /**\n   * @type {documentToJsonReturn}\n   */\n  let data = {}\n\n  if (options.title) {\n    data.title = doc.title()\n  }\n\n  if (options.pageID) {\n    data.pageID = doc.pageID()\n  }\n\n  if (options.categories) {\n    data.categories = doc.categories()\n  }\n\n  if (options.sections) {\n    data.sections = doc.sections().map((i) => i.json(options))\n  }\n\n  if (doc.isRedirect() === true) {\n    data.isRedirect = true\n    data.redirectTo = doc.redirectTo()\n    data.sections = []\n  }\n\n  //these are default-off\n  if (options.coordinates) {\n    data.coordinates = doc.coordinates()\n  }\n\n  if (options.infoboxes) {\n    data.infoboxes = doc.infoboxes().map((i) => i.json(options))\n  }\n\n  if (options.images) {\n    data.images = doc.images().map((i) => i.json(options))\n  }\n\n  if (options.plaintext) {\n    data.plaintext = doc.text(options)\n  }\n\n  if (options.citations || options.references) {\n    data.references = doc.references()\n  }\n\n  return data\n}\nexport default toJSON\n", "export default [\n  'category', //en\n\n  'abdeeling', //\tpdc\n  'b\u00F3lkur', //\tfo\n  'catag\u00F3ir', //\tga\n  'categori', //\tcy\n  'categoria',\n  'categoria', //\tco\n  'categor\u00EDa', //\tes\n  'categor\u00EEa', //\tlij\n  'categor\u00ECa', //\tpms\n  'cat\u00E9gorie',\n  'categorie',\n  'cat\u00E8gorie', //\tfrp\n  'category',\n  'categuria', //\tlmo\n  'catigur\u00ECa', //\tscn\n  'class', //\tkw\n  '\u1EB9\u0300ka', //\tyo\n  'flocc',\n  'flocc', //\tang\n  'flokkur',\n  'grup', //\ttpi\n  'jamii', //\tsw\n  'kaarangay', //\twar\n  'kateggor\u00EDa', //\tlad\n  'kategooria', //\tet\n  'kategori', //\tda\n  'kategor\u00EE', //\tku\n  'kategoria', //\teu\n  'kateg\u00F3ria', //\thu\n  'kategorie', //de\n  'kategoriija', //\tse\n  'kategorija', //\tsl\n  'kategorio', //\teo\n  'kategoriya',\n  'kategori\u00FDa', //\ttk\n  'kategoriye', //\tdiq\n  'kategory', //\tfy\n  'kategorya', //\ttl\n  'kateqoriya', //\taz\n  'katiguriya', //\tqu\n  'klad', //\tvo\n  'luokka',\n  '\u00F1emohenda', //\tgn\n  'roinn', //-se\u00F2rsa\tgd\n  'ronney', //\tgv\n  'rummad', //\tbr\n  'setensele', //\tnso\n  'sokajy', //\tmg\n  'sumut', // atassuseq\tkl\n  'th\u1EC3', // lo\u1EA1i\tvi\n  'turkum', //\tuz\n  '\u043A\u0430\u0442\u0435\u0433\u043E\u0440\u0438\u0458\u0430',\n  '\u043A\u0430\u0442\u0435\u0433\u043E\u0440\u0438\u044F', //\tru\n  '\u043A\u0430\u0442\u0435\u0433\u043E\u0440\u0456\u044F', //\tuk\n  '\u043A\u0430\u0442\u044D\u0433\u043E\u0440\u044B\u044F',\n  '\u0442\u04E9\u0440\u043A\u0435\u043C', //\ttt\n  '\u05E7\u05D8\u05D2\u05D5\u05E8\u05D9\u05D4', //\the\n  '\u062A\u0635\u0646\u064A\u0641',\n  '\u062A\u06C8\u0631', //\tug\n  '\u0631\u062F\u0647',\n  '\u0936\u094D\u0930\u0947\u0923\u0940',\n  '\u0936\u094D\u0930\u0947\u0923\u0940', //\thi\n  '\u09AC\u09BF\u09B7\u09AF\u09BC\u09B6\u09CD\u09B0\u09C7\u09A3\u09C0', //\tbn\n  '\u0E2B\u0E21\u0E27\u0E14\u0E2B\u0E21\u0E39\u0E48', //\tth\n  '\uBD84\uB958', //\tko\n  '\uBD84\uB958', //ko\n  '\u5206\u7C7B', //\tza\n  //--\n]\n", "export default [\n  'dab', //en\n  'disamb', //en\n  'disambig', //en\n  'disambiguation', //en\n\n  // Disambiguation_message_boxes\n  'letter-numbercombdisambig',\n  'letter-number combination disambiguation',\n  'dmbox',\n  'airport disambiguation',\n  'biology disambiguation',\n  'call sign disambiguation',\n  'caselaw disambiguation',\n  'chinese title disambiguation',\n  'disambiguation cleanup',\n  'genus disambiguation',\n  'hospital disambiguation',\n  'human name disambiguation',\n  'human name disambiguation cleanup',\n  'letter-number combination disambiguation',\n  'mathematical disambiguation',\n  'military unit disambiguation',\n  'music disambiguation',\n  'number disambiguation',\n  'opus number disambiguation',\n  'phonetics disambiguation',\n  'place name disambiguation',\n  'portal disambiguation',\n  'road disambiguation',\n  'school disambiguation',\n  'species latin name abbreviation disambiguation',\n  'species latin name disambiguation',\n  'station disambiguation',\n  'synagogue disambiguation',\n  'taxonomic authority disambiguation',\n  'taxonomy disambiguation',\n  'template disambiguation',\n  'disamb2',\n  'disamb3',\n  'disamb4',\n  'disambiguation lead',\n  'disambiguation lead name',\n  'disambiguation name',\n  'disamb-term',\n  'disamb-terms',\n\n\n  // i18n\n  'a\u00F0greining', //is\n  'aimai', //ja\n  'a\u0142ts\u02BC\u00E1\u02BC\u00E1ztiin', //nv\n  'anlam ayr\u0131m\u0131', //gag\n  'anlam ayr\u0131m\u0131', //tr\n  'apartigilo', //eo\n  'argipen', //eu\n  'begriepskloorenge', //stq\n  'begriffskl\u00E4rung', //als\n  'begriffskl\u00E4rung', //de\n  'begriffskl\u00E4rung', //pdc\n  'begriffsklearung', //bar\n  'bisongidila', //kg\n  'bkl', //pfl\n  'bokokani', //ln\n  'caddayn', //so\n  'clerheans', //kw\n  'cudakirin', //ku\n  '\u010Dvor', //bs\n  'db', //vls\n  'desambig', //nov\n  'desambigaci\u00F3n', //an\n  'desambigua\u00E7\u00E3o', //pt\n  'desambiguaci\u00F3', //ca\n  'desambiguaci\u00F3n', //es\n  'desambigu\u00E1ncia', //ext\n  'desambiguasion', //lad\n  'desambiguassi\u00F9', //lmo\n  'desambigui', //lfn\n  'dezambiguizare', //ro\n  'd\u0259qiql\u0259\u015Fdirm\u0259', //az\n  'disambigua', //it\n  'disambigua', //lij\n  'disambigua', //nap\n  'disamb\u00ECgua', //sc\n  'disambigua', //scn\n  'disambiguasi', //id\n  'disambiguasi', //su\n  'discretiva', //la\n  'dishe\u00F1velout', //br\n  'disingkek', //min\n  'dixanbigua', //vec\n  'dixebra', //ast\n  'di\u017Cambigwazzjoni', //mt\n  'doorverwijspagina', //nl\n  'dp', //nl\n  'dp', //zea\n  'dubbelsinnig', //af\n  'dudalipen', //rmy\n  'dv', //nds_nl\n  'egy\u00E9rt', //hu\n  'fleiri t\u00FDdningar', //fo\n  'fleirtyding', //nn\n  'flertydig', //da\n  'f\u00F6rgrening', //sv\n  'g\u00EC-ngi\u00EA', //cdo\n  'giklaro', //ceb\n  'gwahaniaethu', //cy\n  'homonimo', //io\n  'hom\u00F3nimos', //gl\n  'homonymie', //fr\n  'hua\u02BB\u014Dlelo puana like', //haw\n  'idirdheal\u00FA', //ga\n  'khu-pia\u030Dt', //zh_min_nan\n  'kthjellim', //sq\n  'kujekesa', //sn\n  'maana', //sw\n  'maneo bin', //diq\n  'mehrd\u00FCdig begreep', //nds\n  'menm non', //ht\n  'muard\u00FC\u00FCdag artiikel', //frr\n  'neibetsjuttings', //fy\n  'noz\u012Bmju atdal\u012B\u0161ana', //lv\n  'nuorodinis', //lt\n  'nyahkekaburan', //ms\n  'omonimeye', //wa\n  'omonimia', //oc\n  'page d\u00E9 frouque', //nrm\n  'paglilinaw', //tl\n  'panangilawlawag', //ilo\n  'pansayod', //war\n  'pejy mitovy anarana', //mg\n  'peker', //no\n  'razdvojba', //hr\n  'razlo\u010Ditev', //sl\n  'razvrstavanje', //sh\n  'reddaghey', //gv\n  'rozcestn\u00EDk', //cs\n  'rozli\u0161ovacia str\u00E1nka', //sk\n  'sclerir noziun', //rm\n  'selvendyssivu', //olo\n  'soilleireachadh', //gd\n  'suzmunski', //jbo\n  't\u00E4psustuslehek\u00FClg', //et\n  't\u00E4smennyssivu', //fi\n  'telpl\u00E4nov', //vo\n  'tlahtolmelahuacatlaliztli', //nah\n  'trang \u0111\u1ECBnh h\u01B0\u1EDBng', //vi\n  'ujednoznacznienie', //pl\n  'verdudeliking', //li\n  'w\u011Bcejw\u00F3znamowos\u0107', //dsb\n  'wjacezmyslnos\u0107', //hsb\n  'zambigua\u00E7on', //mwl\n  'zeimeibu \u0161kir\u0161ona', //ltg\n  '\u03B1\u03C0\u03BF\u03C3\u03B1\u03C6\u03AE\u03BD\u03B9\u03C3\u03B7', //el\n  '\u0430\u0439\u0440\u044B\u049B', //kk\n  '\u0430\u04B5\u0430\u043A\u044B\u0440\u0430\u0446\u04D9\u0430', //ab\n  '\u0432\u0438\u0448\u0435\u0437\u043D\u0430\u0447\u043D\u0430 \u043E\u0434\u0440\u0435\u0434\u043D\u0438\u0446\u0430', //sr\n  '\u0438\u0431\u04B3\u043E\u043C\u0437\u0443\u0434\u043E\u04E3', //tg\n  '\u043A\u0451\u0431 \u043C\u0430\u0433\u044A\u0430\u043D\u0430\u043B\u044B', //krc\n  '\u043A\u04AF\u043F \u043C\u04D9\u0433\u044A\u043D\u04D9\u043B\u04D9\u0440', //tt\n  '\u043A\u04AF\u043F \u043C\u04D9\u0493\u04D9\u043D\u04D9\u043B\u0435\u043B\u0435\u043A', //ba\n  '\u043C\u044A\u043D\u043E\u0433\u043E\u0441\u044A\u043C\uA651\u0441\u043B\u0438\u0465', //cu\n  '\u043D\u0435\u0430\u0434\u043D\u0430\u0437\u043D\u0430\u0447\u043D\u0430\u0441\u0446\u044C', //be\n  '\u043D\u0435\u0430\u0434\u043D\u0430\u0437\u043D\u0430\u0447\u043D\u0430\u0441\u044C\u0446\u044C', //be_x_old\n  '\u043D\u0435\u043E\u0434\u043D\u043E\u0437\u043D\u0430\u0447\u043D\u043E\u0441\u0442\u044C', //ru\n  '\u043E\u043B\u043E\u043D \u0443\u0434\u0445\u0430\u0442\u0430\u0439', //bxr\n  '\u043F\u043E\u0458\u0430\u0441\u043D\u0443\u0432\u0430\u045A\u0435', //mk\n  '\u043F\u043E\u044F\u0441\u043D\u0435\u043D\u0438\u0435', //bg\n  '\u0441\u0430 \u0448\u0443\u043C\u0443\u0434 \u043C\u0430\u043D\u0430\u0432\u0430\u043B', //lez\n  '\u0441\u0430\u043B\u0430\u0430 \u0443\u0442\u0433\u0430\u0442\u0430\u0439', //mn\n  '\u0441\u0443\u043E\u043B\u0442\u0430\u043B\u0430\u0440', //sah\n  '\u0442\u0435\u043A\u043C\u0430\u0430\u043D\u0438\u0441\u0438\u0437\u0434\u0438\u043A', //ky\n  '\u0446\u043E \u043C\u0430\u0433\u0456\u043D\u0430 \u0433\u0443\u0440\u0435\u0431', //av\n  '\u0447\u0435\u043F\u0435\u0440\u0443\u0448\u043A\u0430', //rue\n  '\u0447\u043E\u043B\u0445\u0430\u043B\u043B\u0430', //ce\n  '\u0448\u0443\u043A\u043E \u043E\u043D\u0447\u044B\u043A\u0442\u044B\u043C\u0430\u0448-\u0432\u043B\u0430\u043A', //mhr\n  '\u10DB\u10E0\u10D0\u10D5\u10D0\u10DA\u10DB\u10DC\u10D8\u10E8\u10D5\u10DC\u10D4\u10DA\u10DD\u10D5\u10D0\u10DC\u10D8', //ka\n  '\u0562\u0561\u0566\u0574\u056B\u0574\u0561\u057D\u057F\u0578\u0582\u0569\u056B\u0582\u0576', //hyw\n  '\u0562\u0561\u0566\u0574\u056B\u0574\u0561\u057D\u057F\u0578\u0582\u0569\u0575\u0578\u0582\u0576', //hy\n  '\u05D1\u05D0\u05D3\u05D9\u05D9\u05D8\u05DF', //yi\n  '\u05E4\u05D9\u05E8\u05D5\u05E9\u05D5\u05E0\u05D9\u05DD', //he\n  '\u0627\u0628\u0647\u0627\u0645\u200C\u0632\u062F\u0627\u06CC\u06CC', //fa\n  '\u062A\u0648\u0636\u064A\u062D', //ar\n  '\u062A\u0648\u0636\u064A\u062D', //arz\n  '\u062F\u0642\u06CC\u0642\u0644\u0634\u062F\u06CC\u0631\u0645\u0647', //azb\n  '\u0695\u0648\u0648\u0646\u06A9\u0631\u062F\u0646\u06D5\u0648\u06D5', //ckb\n  '\u0633\u0644\u062C\u0647\u0627\u0626\u067E', //sd\n  '\u0636\u062F \u0627\u0628\u06C1\u0627\u0645', //ur\n  '\u06AF\u062C\u06AF\u062C\u06CC \u0628\u06CC\u0631\u06CC', //mzn\n  '\u0646\u0627\u0645\u0628\u0647\u0645\u06D0\u062F\u0646\u0647', //ps\n  '\u1218\u1295\u1273', //am\n  '\u0905\u0938\u094D\u092A\u0937\u094D\u091F\u0924\u093E', //ne\n  '\u092C\u0939\u0941\u0905\u0930\u094D\u0925\u0940', //bh\n  '\u092C\u0939\u0941\u0935\u093F\u0915\u0932\u094D\u092A\u0940 \u0936\u092C\u094D\u0926', //hi\n  '\u09A6\u09CD\u09AC\u09CD\u09AF\u09B0\u09CD\u09A5\u09A4\u09BE \u09A8\u09BF\u09B0\u09B8\u09A8', //bn\n  '\u0A17\u0A41\u0A70\u0A1D\u0A32-\u0A16\u0A4B\u0A32\u0A4D\u0A39', //pa\n  '\u0AB8\u0A82\u0AA6\u0ABF\u0A97\u0ACD\u0AA7 \u0AB6\u0AC0\u0AB0\u0ACD\u0AB7\u0A95', //gu\n  '\u0BAA\u0B95\u0BCD\u0B95\u0BB5\u0BB4\u0BBF \u0BA8\u0BC6\u0BB1\u0BBF\u0BAA\u0BCD\u0BAA\u0B9F\u0BC1\u0BA4\u0BCD\u0BA4\u0BB2\u0BCD', //ta\n  '\u0C05\u0C2F\u0C4B\u0C2E\u0C2F \u0C28\u0C3F\u0C35\u0C43\u0C24\u0C4D\u0C24\u0C3F', //te\n  '\u0CA6\u0CCD\u0CB5\u0C82\u0CA6\u0CCD\u0CB5 \u0CA8\u0CBF\u0CB5\u0CBE\u0CB0\u0CA3\u0CC6', //kn\n  '\u0D35\u0D3F\u0D35\u0D15\u0D4D\u0D37\u0D15\u0D7E', //ml\n  '\u0DC0\u0D9A\u0DCA\u200D\u0DBB\u0DDD\u0DAD\u0DCA\u0DAD\u0DD2', //si\n  '\u0E41\u0E01\u0E49\u0E04\u0E27\u0E32\u0E21\u0E01\u0E33\u0E01\u0E27\u0E21', //th\n  '\u101E\u1036\u1010\u1030\u1000\u103C\u1031\u102C\u1004\u103A\u1038\u1000\u103D\u1032', //my\n  '\u178E\u17C2\u1793\u17B6\u17C6', //km\n  '\uB3D9\uC74C\uC774\uC758', //ko\n  '\u6264\u6E05\u695A', //gan\n  '\u641E\u6E05\u695A', //zh_yue\n  '\u66D6\u6627\u3055\u56DE\u907F', //ja\n  '\u6D88\u6B67\u4E49', //zh\n  '\u91CB\u7FA9', //zh_classical\n  \"gestion dj'om\u00F2nim\", //pms\n  \"sut'ichana qillqa\", //qu\n  // 'z', //vep\n  // '\u101E\u1035\u1004\u103A\u1019\u102D\u1030\u107C\u103A \u1010\u1030\u107C\u103A\u1088\u1011\u1085\u101D\u103A\u1015\u1085\u1075\u103A\u1087', //shn\n]\n", "// used in titles to denote disambiguation pages\n// see 'Football_(disambiguation)'\nexport default [\n  'disambiguation', //en\n  'homonymie', //fr\n  '\u062A\u0648\u0636\u064A\u062D', //ar\n  'desambigua\u00E7\u00E3o', //pt\n  'Begriffskl\u00E4rung', //de\n  'disambigua', //it\n  '\u66D6\u6627\u3055\u56DE\u907F', //ja\n  '\u6D88\u6B67\u7FA9', //zh\n  '\u641E\u6E05\u695A', //zh-yue\n  '\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F', //ru\n  '\u0627\u0628\u0647\u0627\u0645\u200C\u0632\u062F\u0627\u06CC\u06CC', //fa\n  '\u062F \u0627\u0628\u06C1\u0627\u0645', //ur\n  '\uB3D9\uC74C\uC774\uC758', //ko\n  'dubbelsinnig', //af\n  '\u0561\u0575\u056C \u056F\u056B\u0580\u0561\u057C\u0578\u0582\u0574\u0576\u0565\u0580', //hy\n  'ujednoznacznienie', //pl\n]\n", "export default [\n  'file', //en\n  'image', //en\n  '\u091A\u093F\u0924\u094D\u0930', //img\n\n  'archivo', //es\n  'att\u0113ls', //lv\n  'berkas', //id\n  'bestand', //nl\n  'datei', //de\n  'dosiero', //eo\n  'dosya', //lad\n  'f\u00E1jl', //hu\n  'fasciculus', //la\n  'fichier', //fr\n  'fil', //da\n  'fitxategi', //eu\n  'fitxer', //ca\n  'gambar', //su\n  'imagem', //pt\n  'imej', //ms\n  'immagine', //it\n  'larawan', //tl\n  'l\u00EAer', //af\n  'plik', //pl\n  'restr', //br\n  'slika', //bs\n  'w\u00EAne', //ku\n  'wobraz', //dsb\n  '\u0432\u044B\u044F\u0432\u0430', //be\n  '\u043F\u043E\u0434\u0430\u0442\u043E\u0442\u0435\u043A\u0430', //mk\n  '\u0441\u043B\u0438\u043A\u0430', //sr\n  '\u0444\u0430\u0439\u043B', //ru\n  '\u10E1\u10E3\u10E0\u10D0\u10D7\u10D8', //ka\n  '\u057A\u0561\u057F\u056F\u0565\u0580', //hy\n  '\u05E7\u05D5\u05D1\u05E5', //he\n  '\u067E\u0631\u0648\u0646\u062F\u0647', //fa\n  '\u062F\u0648\u062A\u0646\u0647', //ps\n  '\u0645\u0644\u0641', //ar\n  '\u0648\u06CE\u0646\u06D5', //ckb\n  '\u091A\u093F\u0924\u094D\u0930', //hi\n  '\u0E44\u0E1F\u0E25\u0E4C', //th\n  '\uD30C\uC77C', //ko\n  '\u30D5\u30A1\u30A4\u30EB', //ja\n]\n", "export default [\n  'infobox', //en\n\n  'anfo', //mwl\n  'anu\u0101mapa', //haw\n  'bilgi kutusu', //tr\n  'bilgi', //tr\n  'bilgiquti', //uz\n  'boaty', //mg\n  'boestkelaoui\u00F1', //br\n  'bosca', //ga\n  'capsa', //la\n  'diehtok\u00E1ssa', //se\n  'faktamall', //sv\n  'ficha', //es\n  'generalni', //hr\n  'gwybodlen3', //cy\n  'info', //pt\n  'infobokis', //tpi\n  'infoboks', //da\n  'infochascha', //rm\n  'infoka\u0161\u0107ik', //dsb\n  'infokast', //et\n  'infokutija', //bs\n  'infolentel\u0117', //lt\n  'infopolje', //sl\n  'informkesto', //eo\n  'infoskreine', //ltg\n  'infotaula', //eu\n  'inligtingskas',\n  'inligtingskas3', //af\n  'inligtingskas4', //af\n  'kishtey', //gv\n  'kotak', //su\n  'tertcita', //jbo\n  'tietolaatikko', //fi\n  'yerle\u015Fim bilgi kutusu',\n  'ynfoboks', //fy\n  '\u03C0\u03BB\u03B1\u03AF\u03C3\u03B9\u03BF', //el\n  '\u0430\u043A\u0430\u0440\u0442\u043E\u0447\u043A\u0430', //ab\n  '\u0430\u04A5\u0430', //mhr\n  '\u0438\u043D\u0444\u043E\u0431\u043E\u043A\u0441', //kk\n  '\u0438\u043D\u0444\u043E\u043A\u0443\u0442\u0438\u0458\u0430', //sr\n  '\u0438\u043D\u0444\u043E\u043A\u0443\u0442\u0438\u044F', //bg\n  '\u0456\u043D\u0444\u043E\u0431\u043E\u043A\u0441', //rue\n  '\u043A\u0430\u043D\u0430\u0434\u0441\u043A\u0438\u0439',\n  '\u043A\u0430\u0440\u0442\u043A\u0430', //be\n  '\u043A\u0430\u0440\u0442\u043E\u0447\u043A\u0430', //ru\n  '\u043A\u0430\u0440\u0442\u043E\u0447\u043A\u04302', //mdf\n  '\u043A\u0430\u0440\u0442\u043E\u0447\u043A\u0430\u0440\u0443\u0441', //ba\n  '\u043A\u0430\u0440\u0442\u0443\u0448', //koi\n  '\u049B\u0443\u0442\u0442\u04E3', //tg\n  '\u10D8\u10DC\u10E4\u10DD\u10D3\u10D0\u10E4\u10D0', //ka\n  '\u057F\u0565\u0572\u0565\u056F\u0561\u0584\u0561\u0580\u057F', //hy\n  '\u05D0\u05D9\u05E0\u05E4\u05D0\u05E7\u05E2\u05E1\u05D8\u05DC', //yi\n  '\u05EA\u05D1\u05E0\u05D9\u05EA', //he\n  '\u0628\u0637\u0627\u0642\u0629', //ar\n  '\u0684\u0627\u06BB\u062E\u0627\u0646\u0648', //sd\n  '\u062E\u0627\u0646\u06C1', //ur\n  '\u0644\u063A\u0629',\n  '\u091C\u094D\u091E\u093E\u0928\u0938\u0928\u094D\u0926\u0942\u0915', //hi\n  '\u09A4\u09A5\u09CD\u09AF\u099B\u0995', //bn\n  '\u0A1C\u0A3E\u0A23\u0A15\u0A3E\u0A30\u0A40\u0A21\u0A71\u0A2C\u0A3E', //pa\n  '\u0C38\u0C2E\u0C3E\u0C1A\u0C3E\u0C30\u0C2A\u0C46\u0C1F\u0C4D\u0C1F\u0C46', //te\n  '\u0DAD\u0DDC\u0DBB\u0DAD\u0DD4\u0DBB\u0DD4\u0D9A\u0DDC\u0DA7\u0DD4\u0DC0', //si\n  '\u0E01\u0E25\u0E48\u0E2D\u0E07\u0E02\u0E49\u0E2D\u0E21\u0E39\u0E25', //th\n  '\u1794\u17D2\u179A\u17A2\u1794\u17CB\u1796\u17D0\u178F\u17CC\u1798\u17B6\u1793', //km\n  '\uC815\uBCF4\uC0C1\uC790', //ko\n  '\u660E\u7D30', //zh_yue\n]\n", "export default [\n  'aanstuur',//af\n  'adkas', //br\n  'alih',//id\n  'a\u00FDdaw',\n  'beral\u00EEkirin',//ku\n  'doorverwijzing', //nl\n  'lencong',//ms\n  'ohjaus',\n  'patrz', //pl\n  'p\u0159esm\u011Bruj',\n  'preusmjeri',//hr\n  'redireccion',\n  'redirecci\u00F3n', //es\n  'redirecionamento', //pt\n  'redirect', //en\n  'redirection', //fr\n  'rinvia', //it\n  'tilv\u00EDsun',\n  'uudelleenohjaus',\n  'weiterleitung',\n  'weiterleitung', //de\n  'y\u00F6nlendi\u0307r',\n  'y\u00F6nlendirme',\n  'y\u00F6nlendi\u0307rme', //tr\n  '\u03B1\u03BD\u03B1\u03BA\u03B1\u03C4\u03B5\u03C5\u03B8\u03C5\u03BD\u03C3\u03B7', //el\n  '\u0430\u0439\u0434\u0430\u0443',//kk\n  '\u043F\u0435\u0440\u0430\u043D\u0430\u043A\u0456\u0440\u0430\u0432\u0430\u043D\u044C\u043D\u0435',\n  '\u043F\u0435\u0440\u0435\u043D\u0430\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u0435',//ru\n  '\u043F\u0435\u0440\u0435\u043D\u0430\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u043D\u044F', //uk\n  '\u043F\u0440\u0435\u043D\u0430\u0441\u043E\u0447\u0443\u0432\u0430\u045A\u0435', //mk\n  '\u043F\u0440\u0435\u0443\u0441\u043C\u0435\u0440\u0438',//sr\n  '\u043F\u0440\u0435\u0443\u0441\u043C\u0458\u0435\u0440\u0438',\n  '\u05D5\u05D5\u05D9\u05D9\u05D8\u05E2\u05E8\u05E4\u05D9\u05E8\u05DF',//yi\n  '\u062A\u062D\u0648\u064A\u0644',//ar\n  '\u062A\u063A\u06CC\u06CC\u0631_\u0645\u0633\u06CC\u0631',\n  '\u062A\u063A\u06CC\u06CC\u0631\u0645\u0633\u06CC\u0631', //fa\n  '\u0631\u062C\u0648\u0639 \u0645\u06A9\u0631\u0631',//ur\n  '\u0631\u062C\u0648\u0639_\u0645\u06A9\u0631\u0631',//ur\n  '\u0905\u0928\u0941\u092A\u094D\u0930\u0947\u0937\u093F\u0924',//hi\n  '\u092A\u0941\u0928\u0930\u094D\u0928\u093F\u0930\u094D\u0926\u0947\u0936\u0928',//hi\n  '\u09AA\u09C1\u09A8\u09A8\u09BF\u09B0\u09CD\u09A6\u09C7\u09B6',//bn\n  '\u0E40\u0E1B\u0E25\u0E35\u0E48\u0E22\u0E19\u0E17\u0E32\u0E07', //th\n  '\u1794\u17D2\u178F\u17BC\u179A\u1791\u17B8\u178F\u17B6\u17C6\u1784\u1791\u17C5', //km\n  '\u30EA\u30C0\u30A4\u30EC\u30AF\u30C8',//ja\n  '\u8EE2\u9001', //ja\n  '\u91CD\u5B9A\u5411',//zh\n]\n", "export default [\n  'references',\n  'reference',\n  'einzelnachweise',\n  'referencias',\n  'r\u00E9f\u00E9rences',\n  'notes et r\u00E9f\u00E9rences',\n  '\u811A\u6CE8',\n  'referenser',\n  'bronnen',\n  '\u043F\u0440\u0438\u043C\u0435\u0447\u0430\u043D\u0438\u044F',\n]\n", "//alt disambig-templates en-wikipedia uses\nlet d = ' disambiguation'\nconst templates = [\n  'dab',\n  'dab',\n  'disamb',\n  'disambig',\n  'geodis',\n  'hndis',\n  'setindex',\n  'ship index',\n  'split dab',\n  'sport index',\n  'wp disambig',\n  'disambiguation cleanup',\n  'airport' + d,\n  'biology' + d,\n  'call sign' + d,\n  'caselaw' + d,\n  'chinese title' + d,\n  'genus' + d,\n  'hospital' + d,\n  'lake index',\n  'letter' + d,\n  'letter-number combination' + d,\n  'mathematical' + d,\n  'military unit' + d,\n  'mountainindex',\n  'number' + d,\n  'phonetics' + d,\n  'place name' + d,\n  'portal' + d,\n  'road' + d,\n  'school' + d,\n  'species latin name abbreviation' + d,\n  'species latin name' + d,\n  'station' + d,\n  'synagogue' + d,\n  'taxonomic authority' + d,\n  'taxonomy' + d,\n].reduce((h, str) => {\n  h[str] = true\n  return h\n}, {})\nexport default templates\n", "import { disambig_titles, disambig_templates } from '../_data/i18n.js'\nimport alt_disambig from './_disambig.js'\nconst mayAlsoReg = /. may (also )?refer to\\b/i\n\n// templates that signal page is not a disambiguation\nconst notDisambig = {\n  about: true,\n  for: true,\n  'for multi': true,\n  'other people': true,\n  'other uses of': true,\n  'distinguish': true\n}\n\nconst inTitle = new RegExp('. \\\\((' + disambig_titles.join('|') + ')\\\\)$', 'i')\nconst i18n_templates = disambig_templates.reduce((h, str) => {\n  h[str] = true\n  return h\n}, {})\n\n// look for '... may refer to'\nconst byText = function (s) {\n  if (!s) {\n    return false\n  }\n  let txt = s.text()\n  if (txt !== null && txt[0]) {\n    if (mayAlsoReg.test(txt) === true) {\n      return true\n    }\n  }\n  return false\n}\n\n/**\n * Parses the wikitext to find out if this page is a disambiguation\n *\n * @private\n * @param {object} doc the document that is examined\n * @returns {boolean} an indication if the document is a disambiguation page\n */\nconst isDisambig = function (doc) {\n  // check for a {{disambig}} template\n  let templates = doc.templates().map((tmpl) => tmpl.json())\n  let found = templates.find((obj) => {\n    return alt_disambig.hasOwnProperty(obj.template) || i18n_templates.hasOwnProperty(obj.template)\n  })\n  if (found) {\n    return true\n  }\n  // check for (disambiguation) in title\n  let title = doc.title()\n  if (title && inTitle.test(title) === true) {\n    return true\n  }\n  // does it have a non-disambig template?\n  let notDisamb = templates.find((obj) => notDisambig.hasOwnProperty(obj.template))\n  if (notDisamb) {\n    return false\n  }\n  //try 'may refer to' on first line for en-wiki?\n  if (byText(doc.sentence(0)) === true || byText(doc.sentence(1)) === true) {\n    return true\n  }\n  return false\n}\n\nexport default isDisambig\n", "import setDefaults from '../_lib/setDefaults.js'\n\nconst defaults = {\n  caption: true,\n  alt: true,\n  links: true,\n  thumb: true,\n  url: true,\n}\n//\nconst toJson = function (img, options) {\n  options = setDefaults(options, defaults)\n  let json = {\n    file: img.file(),\n  }\n  if (options.thumb !== false) {\n    json.thumb = img.thumbnail()\n  }\n  if (options.url !== false) {\n    json.url = img.url()\n  }\n  //add captions\n  if (options.caption !== false && img.data.caption) {\n    json.caption = img.caption()\n    if (options.links !== false && img.data.caption.links()) {\n      json.links = img.links()\n    }\n  }\n  if (options.alt !== false && img.data.alt) {\n    json.alt = img.alt()\n  }\n  return json\n}\nexport default toJson\n", "import toJson from './toJson.js'\nconst server = 'wikipedia.org'\n\nconst encodeTitle = function (file) {\n  let title = file.replace(/^(image|file?):/i, '')\n  //titlecase it\n  title = title.charAt(0).toUpperCase() + title.substring(1)\n  //spaces to underscores\n  title = title.trim().replace(/ /g, '_')\n  return title\n}\n\n//the wikimedia image url is a little silly:\nconst makeSrc = function (file) {\n  let title = encodeTitle(file)\n  title = encodeURIComponent(title)\n  return title\n}\n\n//the class for our image generation functions\nconst Image = function (data) {\n  Object.defineProperty(this, 'data', {\n    enumerable: false,\n    value: data,\n  })\n}\n\nconst methods = {\n  file() {\n    let file = this.data.file || ''\n    if (file) {\n      const regFile = /^(image|file):/i\n      if (!regFile.test(file)) {// if there's no 'File:', add it\n        file = `File:${file}`\n      }\n      file = file.trim()\n      //titlecase it\n      file = file.charAt(0).toUpperCase() + file.substring(1)\n      //spaces to underscores\n      file = file.replace(/ /g, '_')\n    }\n    return file\n  },\n  alt() {\n    let str = this.data.alt || this.data.file || ''\n    str = str.replace(/^(file|image):/i, '')\n    str = str.replace(/\\.(jpg|jpeg|png|gif|svg)/i, '')\n    return str.replace(/_/g, ' ')\n  },\n  caption() {\n    if (this.data.caption) {\n      return this.data.caption.text()\n    }\n    return ''\n  },\n  links() {\n    if (this.data.caption) {\n      return this.data.caption.links()\n    }\n    return []\n  },\n  url() {\n    // let lang = 'en' //this.language() || 'en' //hmm: get actual language?\n    let fileName = makeSrc(this.file())\n    let domain = this.data.domain || server\n    let path = `wiki/Special:Redirect/file`\n    return `https://${domain}/${path}/${fileName}`\n  },\n  thumbnail(size) {\n    size = size || 300\n    return this.url() + '?width=' + size\n  },\n  format() {\n    let arr = this.file().split('.')\n    if (arr[arr.length - 1]) {\n      return arr[arr.length - 1].toLowerCase()\n    }\n    return null\n  },\n  json: function (options) {\n    options = options || {}\n    return toJson(this, options)\n  },\n  text: function () {\n    return ''\n  },\n  wikitext: function () {\n    return this.data.wiki || ''\n  },\n}\n\nObject.keys(methods).forEach((k) => {\n  Image.prototype[k] = methods[k]\n})\n\nImage.prototype.src = Image.prototype.url\nImage.prototype.thumb = Image.prototype.thumbnail\nexport default Image\n", "export default {\n  aa: 'Afar', //Afar\n  ab: '\u0410\u04A7\u0441\u0443\u0430', //Abkhazian\n  af: 'Afrikaans', //Afrikaans\n  ak: 'Akana', //Akan\n  als: 'Alemannisch', //Alemannic\n  am: '\u12A0\u121B\u122D\u129B', //Amharic\n  an: 'Aragon\u00E9s', //Aragonese\n  ang: 'Englisc', //Anglo-Saxon\n  ar: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629', //Arabic\n  arc: '\u0723\u0718\u072A\u072C', //Aramaic\n  as: '\u0985\u09B8\u09AE\u09C0\u09AF\u09BC\u09BE', //Assamese\n  ast: 'Asturianu', //Asturian\n  av: '\u0410\u0432\u0430\u0440', //Avar\n  ay: 'Aymar', //Aymara\n  az: 'Az\u0259rbaycanca', //Azerbaijani\n  ba: '\u0411\u0430\u0448\u04A1\u043E\u0440\u0442', //Bashkir\n  bar: 'Boarisch', //Bavarian\n  'bat-smg': '\u017Demait\u0117\u0161ka', //Samogitian\n  bcl: 'Bikol', //Bikol\n  be: '\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F', //Belarusian\n  'be-x-old': 'ltr', //Belarusian\n  bg: '\u0411\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438', //Bulgarian\n  bh: '\u092D\u094B\u091C\u092A\u0941\u0930\u0940', //Bihari\n  bi: 'Bislama', //Bislama\n  bm: 'Bamanankan', //Bambara\n  bn: '\u09AC\u09BE\u0982\u09B2\u09BE', //Bengali\n  bo: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42', //Tibetan\n  bpy: 'ltr', //Bishnupriya\n  br: 'Brezhoneg', //Breton\n  bs: 'Bosanski', //Bosnian\n  bug: '\u1A05\u1A14', //Buginese\n  bxr: 'ltr', //Buriat\n  ca: 'Catal\u00E0', //Catalan\n  cdo: 'Chinese', //Min\n  ce: '\u041D\u043E\u0445\u0447\u0438\u0439\u043D', //Chechen\n  ceb: 'Sinugboanong', //Cebuano\n  ch: 'Chamoru', //Chamorro\n  cho: 'Choctaw', //Choctaw\n  chr: '\u13E3\u13B3\u13A9', //Cherokee\n  chy: 'Tsets\u00EAhest\u00E2hese', //Cheyenne\n  co: 'Corsu', //Corsican\n  cr: 'Nehiyaw', //Cree\n  cs: '\u010Cesky', //Czech\n  csb: 'Kasz\u00EBbsczi', //Kashubian\n  cu: 'Slavonic', //Old\n  cv: '\u0427\u0103\u0432\u0430\u0448', //Chuvash\n  cy: 'Cymraeg', //Welsh\n  da: 'Dansk', //Danish\n  de: 'Deutsch', //German\n  diq: 'Zazaki', //Dimli\n  dsb: 'ltr', //Lower\n  dv: '\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0784\u07A6\u0790\u07B0', //Divehi\n  dz: '\u0F47\u0F7C\u0F44\u0F0B\u0F41', //Dzongkha\n  ee: '\u0190\u028B\u025B', //Ewe\n  far: '\u0641\u0627\u0631\u0633\u06CC', //Farsi\n  el: '\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC', //Greek\n  en: 'English', //English\n  eo: 'Esperanto', //Esperanto\n  es: 'Espa\u00F1ol', //Spanish\n  et: 'Eesti', //Estonian\n  eu: 'Euskara', //Basque\n  ext: 'Estreme\u00F1u', //Extremaduran\n  ff: 'Fulfulde', //Peul\n  fi: 'Suomi', //Finnish\n  'fiu-vro': 'V\u00F5ro', //V\u00F5ro\n  fj: 'Na', //Fijian\n  fo: 'F\u00F8royskt', //Faroese\n  fr: 'Fran\u00E7ais', //French\n  frp: 'Arpitan', //Arpitan\n  fur: 'Furlan', //Friulian\n  fy: 'ltr', //West\n  ga: 'Gaeilge', //Irish\n  gan: 'ltr', //Gan\n  gd: 'ltr', //Scottish\n  gil: 'Taetae', //Gilbertese\n  gl: 'Galego', //Galician\n  gn: \"Ava\u00F1e'\u1EBD\", //Guarani\n  got: 'gutisk', //Gothic\n  gu: '\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0', //Gujarati\n  gv: 'Gaelg', //Manx\n  ha: '\u0647\u064E\u0648\u064F\u0633\u064E', //Hausa\n  hak: 'ltr', //Hakka\n  haw: 'Hawai`i', //Hawaiian\n  he: '\u05E2\u05D1\u05E8\u05D9\u05EA', //Hebrew\n  hi: '\u0939\u093F\u0928\u094D\u0926\u0940', //Hindi\n  ho: 'ltr', //Hiri\n  hr: 'Hrvatski', //Croatian\n  ht: 'Kr\u00E8yol', //Haitian\n  hu: 'Magyar', //Hungarian\n  hy: '\u0540\u0561\u0575\u0565\u0580\u0565\u0576', //Armenian\n  hz: 'Otsiherero', //Herero\n  ia: 'Interlingua', //Interlingua\n  id: 'Bahasa', //Indonesian\n  ie: 'Interlingue', //Interlingue\n  ig: 'Igbo', //Igbo\n  ii: 'ltr', //Sichuan\n  ik: 'I\u00F1upiak', //Inupiak\n  ilo: 'Ilokano', //Ilokano\n  io: 'Ido', //Ido\n  is: '\u00CDslenska', //Icelandic\n  it: 'Italiano', //Italian\n  iu: '\u1403\u14C4\u1483\u144E\u1450\u1466', //Inuktitut\n  ja: '\u65E5\u672C\u8A9E', //Japanese\n  jbo: 'Lojban', //Lojban\n  jv: 'Basa', //Javanese\n  ka: '\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8', //Georgian\n  kg: 'KiKongo', //Kongo\n  ki: 'G\u0129k\u0169y\u0169', //Kikuyu\n  kj: 'Kuanyama', //Kuanyama\n  kk: '\u049A\u0430\u0437\u0430\u049B\u0448\u0430', //Kazakh\n  kl: 'Kalaallisut', //Greenlandic\n  km: '\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A', //Cambodian\n  kn: '\u0C95\u0CA8\u0CCD\u0CA8\u0CA1', //Kannada\n  khw: '\u06A9\u06BE\u0648\u0627\u0631', //Khowar\n  ko: '\uD55C\uAD6D\uC5B4', //Korean\n  kr: 'Kanuri', //Kanuri\n  ks: '\u0915\u0936\u094D\u092E\u0940\u0930\u0940', //Kashmiri\n  ksh: 'Ripoarisch', //Ripuarian\n  ku: 'Kurd\u00EE', //Kurdish\n  kv: '\u041A\u043E\u043C\u0438', //Komi\n  kw: 'Kernewek', //Cornish\n  ky: 'K\u0131rg\u0131zca', //Kirghiz\n  la: 'Latina', //Latin\n  lad: 'Dzhudezmo', //Ladino\n  lan: 'Leb', //Lango\n  lb: 'L\u00EBtzebuergesch', //Luxembourgish\n  lg: 'Luganda', //Ganda\n  li: 'Limburgs', //Limburgian\n  lij: 'L\u00EDguru', //Ligurian\n  lmo: 'Lumbaart', //Lombard\n  ln: 'Ling\u00E1la', //Lingala\n  lo: '\u0EA5\u0EB2\u0EA7', //Laotian\n  lt: 'Lietuvi\u0173', //Lithuanian\n  lv: 'Latvie\u0161u', //Latvian\n  'map-bms': 'Basa', //Banyumasan\n  mg: 'Malagasy', //Malagasy\n  man: '\u5B98\u8A71', //Mandarin\n  mh: 'Kajin', //Marshallese\n  mi: 'M\u0101ori', //Maori\n  min: 'Minangkabau', //Minangkabau\n  mk: '\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438', //Macedonian\n  ml: '\u0D2E\u0D32\u0D2F\u0D3E\u0D33\u0D02', //Malayalam\n  mn: '\u041C\u043E\u043D\u0433\u043E\u043B', //Mongolian\n  mo: 'Moldoveneasc\u0103', //Moldovan\n  mr: '\u092E\u0930\u093E\u0920\u0940', //Marathi\n  ms: 'Bahasa', //Malay\n  mt: 'bil-Malti', //Maltese\n  mus: 'Muskogee', //Creek\n  my: 'Myanmasa', //Burmese\n  na: 'Dorerin', //Nauruan\n  nah: 'Nahuatl', //Nahuatl\n  nap: 'Nnapulitano', //Neapolitan\n  nd: 'ltr', //North\n  nds: 'Plattd\u00FC\u00FCtsch', //Low German\n  'nds-nl': 'Saxon', //Dutch\n  ne: '\u0928\u0947\u092A\u093E\u0932\u0940', //Nepali\n  new: '\u0928\u0947\u092A\u093E\u0932\u092D\u093E\u0937\u093E', //Newar\n  ng: 'Oshiwambo', //Ndonga\n  nl: 'Nederlands', //Dutch\n  nn: 'ltr', //Norwegian\n  no: 'Norsk', //Norwegian\n  nr: 'ltr', //South\n  nso: 'ltr', //Northern\n  nrm: 'Nouormand', //Norman\n  nv: 'Din\u00E9', //Navajo\n  ny: 'Chi-Chewa', //Chichewa\n  oc: 'Occitan', //Occitan\n  oj: '\u140A\u14C2\u1511\u14C8\u142F\u14A7\u140E\u14D0', //Ojibwa\n  om: 'Oromoo', //Oromo\n  or: '\u0B13\u0B21\u0B3C\u0B3F\u0B06', //Oriya\n  os: '\u0418\u0440\u043E\u043D\u0430\u0443', //Ossetian\n  pa: '\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40', //Panjabi\n  pag: 'Pangasinan', //Pangasinan\n  pam: 'Kapampangan', //Kapampangan\n  pap: 'Papiamentu', //Papiamentu\n  pdc: 'ltr', //Pennsylvania\n  pi: 'P\u0101li', //Pali\n  pih: 'Norfuk', //Norfolk\n  pl: 'Polski', //Polish\n  pms: 'Piemont\u00E8is', //Piedmontese\n  ps: '\u067E\u069A\u062A\u0648', //Pashto\n  pt: 'Portugu\u00EAs', //Portuguese\n  qu: 'Runa', //Quechua\n  rm: 'ltr', //Raeto\n  rmy: 'Romani', //Romani\n  rn: 'Kirundi', //Kirundi\n  ro: 'Rom\u00E2n\u0103', //Romanian\n  'roa-rup': 'Arm\u00E2neashti', //Aromanian\n  ru: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439', //Russian\n  rw: 'Kinyarwandi', //Rwandi\n  sa: '\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D', //Sanskrit\n  sc: 'Sardu', //Sardinian\n  scn: 'Sicilianu', //Sicilian\n  sco: 'Scots', //Scots\n  sd: '\u0938\u093F\u0928\u0927\u093F', //Sindhi\n  se: 'ltr', //Northern\n  sg: 'S\u00E4ng\u00F6', //Sango\n  sh: 'Srpskohrvatski', //Serbo-Croatian\n  si: '\u0DC3\u0DD2\u0D82\u0DC4\u0DBD', //Sinhalese\n  simple: 'ltr', //Simple\n  sk: 'Sloven\u010Dina', //Slovak\n  sl: 'Sloven\u0161\u010Dina', //Slovenian\n  sm: 'Gagana', //Samoan\n  sn: 'chiShona', //Shona\n  so: 'Soomaaliga', //Somalia\n  sq: 'Shqip', //Albanian\n  sr: '\u0421\u0440\u043F\u0441\u043A\u0438', //Serbian\n  ss: 'SiSwati', //Swati\n  st: 'ltr', //Southern\n  su: 'Basa', //Sundanese\n  sv: 'Svenska', //Swedish\n  sw: 'Kiswahili', //Swahili\n  ta: '\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD', //Tamil\n  te: '\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41', //Telugu\n  tet: 'Tetun', //Tetum\n  tg: '\u0422\u043E\u04B7\u0438\u043A\u04E3', //Tajik\n  th: '\u0E44\u0E17\u0E22', //Thai\n  ti: '\u1275\u130D\u122D\u129B', //Tigrinya\n  tk: '\u0422\u0443\u0440\u043A\u043C\u0435\u043D', //Turkmen\n  tl: 'Tagalog', //Tagalog\n  tlh: 'tlhIngan-Hol', //Klingon\n  tn: 'Setswana', //Tswana\n  to: 'Lea', //Tonga\n  tpi: 'ltr', //Tok\n  tr: 'T\u00FCrk\u00E7e', //Turkish\n  ts: 'Xitsonga', //Tsonga\n  tt: 'Tatar\u00E7a', //Tatar\n  tum: 'chiTumbuka', //Tumbuka\n  tw: 'Twi', //Twi\n  ty: 'Reo', //Tahitian\n  udm: '\u0423\u0434\u043C\u0443\u0440\u0442', //Udmurt\n  ug: 'Uy\u01A3urq\u0259', //Uyghur\n  uk: '\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430', //Ukrainian\n  ur: '\u0627\u0631\u062F\u0648', //Urdu\n  uz: '\u040E\u0437\u0431\u0435\u043A', //Uzbek\n  ve: 'Tshiven\u1E13a', //Venda\n  vi: 'Vi\u1EC7tnam', //Vietnamese\n  vec: 'V\u00E8neto', //Venetian\n  vls: 'ltr', //West\n  vo: 'Volap\u00FCk', //Volap\u00FCk\n  wa: 'Walon', //Walloon\n  war: 'Winaray', //Waray-Waray\n  wo: 'Wollof', //Wolof\n  xal: '\u0425\u0430\u043B\u044C\u043C\u0433', //Kalmyk\n  xh: 'isiXhosa', //Xhosa\n  yi: '\u05D9\u05D9\u05B4\u05D3\u05D9\u05E9', //Yiddish\n  yo: 'Yor\u00F9b\u00E1', //Yoruba\n  za: 'Cuengh', //Zhuang\n  zh: '\u4E2D\u6587', //Chinese\n  'zh-classical': 'ltr', //Classical\n  'zh-min-nan': 'B\u00E2n-l\u00E2m-g\u00FA', //Minnan\n  'zh-yue': '\u7CB5\u8A9E', //Cantonese\n  zu: 'isiZulu', //Zulu\n}\n", "const wp = '.wikipedia.org/wiki/$1'\nconst wm = '.wikimedia.org/wiki/$1'\nconst w = 'www.'\n\nexport default {\n  acronym: w + 'acronymfinder.com/$1.html',\n  advisory: 'advisory' + wm,\n  advogato: w + 'advogato.org/$1',\n  aew: 'wiki.arabeyes.org/$1',\n  appropedia: w + 'appropedia.org/$1',\n  aquariumwiki: w + 'theaquariumwiki.com/$1',\n  arborwiki: 'localwiki.org/ann-arbor/$1',\n  arxiv: 'arxiv.org/abs/$1',\n  atmwiki: w + 'otterstedt.de/wiki/index.php/$1',\n  baden: w + 'stadtwiki-baden-baden.de/wiki/$1/',\n  battlestarwiki: 'en.battlestarwiki.org/wiki/$1',\n  bcnbio: 'historiapolitica.bcn.cl/resenas_parlamentarias/wiki/$1',\n  beacha: w + 'beachapedia.org/$1',\n  betawiki: 'translatewiki.net/wiki/$1',\n  bibcode: 'adsabs.harvard.edu/abs/$1',\n  bibliowiki: 'wikilivres.org/wiki/$1',\n  bluwiki: 'bluwiki.com/go/$1',\n  blw: 'britainloves' + wp,\n  botwiki: 'botwiki.sno.cc/wiki/$1',\n  boxrec: w + 'boxrec.com/media/index.php?$1',\n  brickwiki: w + 'brickwiki.info/wiki/$1',\n  bugzilla: 'bugzilla.wikimedia.org/show_bug.cgi?id=$1',\n  bulba: 'bulbapedia.bulbagarden.net/wiki/$1',\n  c: 'commons' + wm,\n  c2: 'c2.com/cgi/wiki?$1',\n  c2find: 'c2.com/cgi/wiki?FindPage&value=$1',\n  cache: w + 'google.com/search?q=cache:$1',\n  \u0109ej: 'esperanto.blahus.cz/cxej/vikio/index.php/$1',\n  cellwiki: 'cell.wikia.com/wiki/$1',\n  centralwikia: 'community.wikia.com/wiki/$1',\n  chej: 'esperanto.blahus.cz/cxej/vikio/index.php/$1',\n  choralwiki: w + 'cpdl.org/wiki/index.php/$1',\n  citizendium: 'en.citizendium.org/wiki/$1',\n  ckwiss: w + 'ck-wissen.de/ckwiki/index.php?title=$1',\n  comixpedia: w + 'comixpedia.org/index.php?title=$1',\n  commons: 'commons' + wm,\n  communityscheme: 'community.schemewiki.org/?c=s&key=$1',\n  communitywiki: 'communitywiki.org/$1',\n  comune: 'rete.comuni-italiani.it/wiki/$1',\n  creativecommons: 'creativecommons.org/licenses/$1',\n  creativecommonswiki: 'wiki.creativecommons.org/$1',\n  cxej: 'esperanto.blahus.cz/cxej/vikio/index.php/$1',\n  dcc: w + 'dccwiki.com/$1',\n  dcdatabase: 'dc.wikia.com/$1',\n  dcma: 'christian-morgenstern.de/dcma/index.php?title=$1',\n  debian: 'wiki.debian.org/$1',\n  delicious: w + 'delicious.com/tag/$1',\n  devmo: 'developer.mozilla.org/en/docs/$1',\n  dictionary: w + 'dict.org/bin/Dict?Database=*&Form=Dict1&Strategy=*&Query=$1',\n  dict: w + 'dict.org/bin/Dict?Database=*&Form=Dict1&Strategy=*&Query=$1',\n  disinfopedia: 'sourcewatch.org/index.php/$1',\n  distributedproofreaders: w + 'pgdp.net/wiki/$1',\n  distributedproofreadersca: w + 'pgdpcanada.net/wiki/index.php/$1',\n  dmoz: 'curlie.org/$1',\n  dmozs: 'curlie.org/search?q=$1',\n  doi: 'doi.org/$1',\n  donate: 'donate' + wm,\n  doom_wiki: 'doom.wikia.com/wiki/$1',\n  download: 'releases.wikimedia.org/$1',\n  dbdump: 'dumps.wikimedia.org/$1/latest/',\n  dpd: 'lema.rae.es/dpd/?key=$1',\n  drae: 'dle.rae.es/?w=$1',\n  dreamhost: 'wiki.dreamhost.com/index.php/$1',\n  drumcorpswiki: w + 'drumcorpswiki.com/index.php/$1',\n  dwjwiki: w + 'suberic.net/cgi-bin/dwj/wiki.cgi?$1',\n  e\u0109ei: w + 'ikso.net/cgi-bin/wiki.pl?$1',\n  ecoreality: w + 'EcoReality.org/wiki/$1',\n  ecxei: w + 'ikso.net/cgi-bin/wiki.pl?$1',\n  elibre: 'enciclopedia.us.es/index.php/$1',\n  emacswiki: w + 'emacswiki.org/emacs?$1',\n  encyc: 'encyc.org/wiki/$1',\n  energiewiki: w + 'netzwerk-energieberater.de/wiki/index.php/$1',\n  englyphwiki: 'en.glyphwiki.org/wiki/$1',\n  enkol: 'enkol.pl/$1',\n  eokulturcentro: 'esperanto.toulouse.free.fr/nova/wikini/wakka.php?wiki=$1',\n  esolang: 'esolangs.org/wiki/$1',\n  etherpad: 'etherpad.wikimedia.org/$1',\n  ethnologue: w + 'ethnologue.com/language/$1',\n  ethnologuefamily: w + 'ethnologue.com/show_family.asp?subid=$1',\n  evowiki: 'wiki.cotch.net/index.php/$1',\n  exotica: w + 'exotica.org.uk/wiki/$1',\n  fanimutationwiki: 'wiki.animutationportal.com/index.php/$1',\n  fedora: 'fedoraproject.org/wiki/$1',\n  finalfantasy: 'finalfantasy.wikia.com/wiki/$1',\n  finnix: w + 'finnix.org/$1',\n  flickruser: w + 'flickr.com/people/$1',\n  flickrphoto: w + 'flickr.com/photo.gne?id=$1',\n  floralwiki: w + 'floralwiki.co.uk/wiki/$1',\n  foldoc: 'foldoc.org/$1',\n  foundation: 'foundation' + wm,\n  foundationsite: 'wikimediafoundation.org/$1',\n  foxwiki: 'fox.wikis.com/wc.dll?Wiki~$1',\n  freebio: 'freebiology.org/wiki/$1',\n  freebsdman: w + 'FreeBSD.org/cgi/man.cgi?apropos=1&query=$1',\n  freeculturewiki: 'wiki.freeculture.org/index.php/$1',\n  freedomdefined: 'freedomdefined.org/$1',\n  freefeel: 'freefeel.org/wiki/$1',\n  freekiwiki: 'wiki.freegeek.org/index.php/$1',\n  // freenode: 'irc://irc.freenode.net/$1',\n  freesoft: 'directory.fsf.org/wiki/$1',\n  ganfyd: 'ganfyd.org/index.php?title=$1',\n  gardenology: w + 'gardenology.org/wiki/$1',\n  gausswiki: 'gauss.ffii.org/$1',\n  gentoo: 'wiki.gentoo.org/wiki/$1',\n  genwiki: 'wiki.genealogy.net/index.php/$1',\n  gerrit: 'gerrit.wikimedia.org/r/$1',\n  git: 'gerrit.wikimedia.org/g/$1',\n  google: w + 'google.com/search?q=$1',\n  googledefine: w + 'google.com/search?q=define:$1',\n  googlegroups: 'groups.google.com/groups?q=$1',\n  guildwarswiki: 'wiki.guildwars.com/wiki/$1',\n  guildwiki: 'guildwars.wikia.com/wiki/$1',\n  guc: 'tools.wmflabs.org/guc/?user=$1',\n  gucprefix: 'tools.wmflabs.org/guc/?isPrefixPattern=1&src=rc&user=$1',\n  gutenberg: w + 'gutenberg.org/etext/$1',\n  gutenbergwiki: w + 'gutenberg.org/wiki/$1',\n  hackerspaces: 'hackerspaces.org/wiki/$1',\n  h2wiki: 'halowiki.net/p/$1',\n  hammondwiki: w + 'dairiki.org/HammondWiki/index.php3?$1',\n  hdl: 'hdl.handle.net/$1',\n  heraldik: 'heraldik-wiki.de/wiki/$1',\n  heroeswiki: 'heroeswiki.com/$1',\n  horizonlabs: 'horizon.wikimedia.org/$1',\n  hrwiki: w + 'hrwiki.org/index.php/$1',\n  hrfwiki: 'fanstuff.hrwiki.org/index.php/$1',\n  hupwiki: 'wiki.hup.hu/index.php/$1',\n  iarchive: 'archive.org/details/$1',\n  imdbname: w + 'imdb.com/name/nm$1/',\n  imdbtitle: w + 'imdb.com/title/tt$1/',\n  imdbcompany: w + 'imdb.com/company/co$1/',\n  imdbcharacter: w + 'imdb.com/character/ch$1/',\n  incubator: 'incubator' + wm,\n  infosecpedia: 'infosecpedia.org/wiki/$1',\n  infosphere: 'theinfosphere.org/$1',\n  // irc: 'irc://irc.freenode.net/$1',\n  // ircs: 'ircs://irc.freenode.net/$1',\n  // ircrc: 'irc://irc.wikimedia.org/$1',\n  // rcirc: 'irc://irc.wikimedia.org/$1',\n  'iso639-3': 'iso639-3.sil.org/code/$1',\n  issn: w + 'worldcat.org/issn/$1',\n  iuridictum: 'iuridictum.pecina.cz/w/$1',\n  jaglyphwiki: 'glyphwiki.org/wiki/$1',\n  jefo: 'esperanto-jeunes.org/wiki/$1',\n  jerseydatabase: 'jerseydatabase.com/wiki.php?id=$1',\n  jira: 'jira.toolserver.org/browse/$1',\n  jspwiki: w + 'ecyrd.com/JSPWiki/Wiki.jsp?page=$1',\n  jstor: w + 'jstor.org/journals/$1',\n  kamelo: 'kamelopedia.mormo.org/index.php/$1',\n  karlsruhe: 'ka.stadtwiki.net/$1',\n  kinowiki: 'kino.skripov.com/index.php/$1',\n  komicawiki: 'wiki.komica.org/?$1',\n  kontuwiki: 'kontu.wiki/$1',\n  wikitech: 'wikitech' + wm,\n  libreplanet: 'libreplanet.org/wiki/$1',\n  linguistlist: 'linguistlist.org/forms/langs/LLDescription.cfm?code=$1',\n  linuxwiki: w + 'linuxwiki.de/$1',\n  linuxwikide: w + 'linuxwiki.de/$1',\n  liswiki: 'liswiki.org/wiki/$1',\n  literateprograms: 'en.literateprograms.org/$1',\n  livepedia: w + 'livepedia.gr/index.php?title=$1',\n  localwiki: 'localwiki.org/$1',\n  lojban: 'mw.lojban.org/papri/$1',\n  lostpedia: 'lostpedia.wikia.com/wiki/$1',\n  lqwiki: 'wiki.linuxquestions.org/wiki/$1',\n  luxo: 'tools.wmflabs.org/guc/?user=$1',\n  mail: 'lists.wikimedia.org/mailman/listinfo/$1',\n  mailarchive: 'lists.wikimedia.org/pipermail/$1',\n  mariowiki: w + 'mariowiki.com/$1',\n  marveldatabase: w + 'marveldatabase.com/wiki/index.php/$1',\n  meatball: 'meatballwiki.org/wiki/$1',\n  mw: w + 'mediawiki.org/wiki/$1',\n  mediazilla: 'bugzilla.wikimedia.org/$1',\n  memoryalpha: 'memory-alpha.fandom.com/wiki/$1',\n  metawiki: 'meta' + wm,\n  metawikimedia: 'meta' + wm,\n  metawikipedia: 'meta' + wm,\n  mineralienatlas: w + 'mineralienatlas.de/lexikon/index.php/$1',\n  moinmoin: 'moinmo.in/$1',\n  monstropedia: w + 'monstropedia.org/?title=$1',\n  mosapedia: 'mosapedia.de/wiki/index.php/$1',\n  mozcom: 'mozilla.wikia.com/wiki/$1',\n  mozillawiki: 'wiki.mozilla.org/$1',\n  mozillazinekb: 'kb.mozillazine.org/$1',\n  musicbrainz: 'musicbrainz.org/doc/$1',\n  mediawikiwiki: w + 'mediawiki.org/wiki/$1',\n  mwod: w + 'merriam-webster.com/dictionary/$1',\n  mwot: w + 'merriam-webster.com/thesaurus/$1',\n  nkcells: w + 'nkcells.info/index.php?title=$1',\n  nara: 'catalog.archives.gov/id/$1',\n  nosmoke: 'no-smok.net/nsmk/$1',\n  nost: 'nostalgia' + wp,\n  nostalgia: 'nostalgia' + wp,\n  oeis: 'oeis.org/$1',\n  oldwikisource: 'wikisource.org/wiki/$1',\n  olpc: 'wiki.laptop.org/go/$1',\n  omegawiki: w + 'omegawiki.org/Expression:$1',\n  onelook: w + 'onelook.com/?ls=b&w=$1',\n  openlibrary: 'openlibrary.org/$1',\n  openstreetmap: 'wiki.openstreetmap.org/wiki/$1',\n  openwetware: 'openwetware.org/wiki/$1',\n  opera7wiki: 'operawiki.info/$1',\n  organicdesign: w + 'organicdesign.co.nz/$1',\n  orthodoxwiki: 'orthodoxwiki.org/$1',\n  osmwiki: 'wiki.openstreetmap.org/wiki/$1',\n  otrs: 'ticket.wikimedia.org/otrs/index.pl?Action=AgentTicketZoom&TicketID=$1',\n  otrswiki: 'otrs-wiki' + wm,\n  ourmedia: w + 'socialtext.net/ourmedia/index.cgi?$1',\n  outreach: 'outreach' + wm,\n  outreachwiki: 'outreach' + wm,\n  owasp: w + 'owasp.org/index.php/$1',\n  panawiki: 'wiki.alairelibre.net/index.php?title=$1',\n  patwiki: 'gauss.ffii.org/$1',\n  personaltelco: 'personaltelco.net/wiki/$1',\n  petscan: 'petscan.wmflabs.org/?psid=$1',\n  phab: 'phabricator.wikimedia.org/$1',\n  phabricator: 'phabricator.wikimedia.org/$1',\n  phwiki: w + 'pocketheaven.com/ph/wiki/index.php?title=$1',\n  phpwiki: 'phpwiki.sourceforge.net/phpwiki/index.php?$1',\n  planetmath: 'planetmath.org/node/$1',\n  pmeg: w + 'bertilow.com/pmeg/$1',\n  pmid: w + 'ncbi.nlm.nih.gov/pubmed/$1?dopt=Abstract',\n  pokewiki: 'pokewiki.de/$1',\n  pok\u00E9wiki: 'pokewiki.de/$1',\n  policy: 'policy.wikimedia.org/$1',\n  proofwiki: w + 'proofwiki.org/wiki/$1',\n  pyrev: w + 'mediawiki.org/wiki/Special:Code/pywikipedia/$1',\n  pythoninfo: 'wiki.python.org/moin/$1',\n  pythonwiki: w + 'pythonwiki.de/$1',\n  pywiki: 'c2.com/cgi/wiki?$1',\n  psycle: 'psycle.sourceforge.net/wiki/$1',\n  quality: 'quality' + wm,\n  quarry: 'quarry.wmflabs.org/$1',\n  regiowiki: 'regiowiki.at/wiki/$1',\n  rev: w + 'mediawiki.org/wiki/Special:Code/MediaWiki/$1',\n  revo: 'purl.org/NET/voko/revo/art/$1.html',\n  rfc: 'tools.ietf.org/html/rfc$1',\n  rheinneckar: 'rhein-neckar-wiki.de/$1',\n  robowiki: 'robowiki.net/?$1',\n  rodovid: 'en.rodovid.org/wk/$1',\n  reuterswiki: 'glossary.reuters.com/index.php/$1',\n  rowiki: 'wiki.rennkuckuck.de/index.php/$1',\n  rt: 'rt.wikimedia.org/Ticket/Display.html?id=$1',\n  // rtfm: 'ftp://rtfm.mit.edu/pub/faqs/$1',\n  s23wiki: 's23.org/wiki/$1',\n  scholar: 'scholar.google.com/scholar?q=$1',\n  schoolswp: 'schools-' + wp,\n  scores: 'imslp.org/wiki/$1',\n  scoutwiki: 'en.scoutwiki.org/$1',\n  scramble: w + 'scramble.nl/wiki/index.php?title=$1',\n  seapig: w + 'seapig.org/$1',\n  seattlewiki: 'seattle.wikia.com/wiki/$1',\n  slwiki: 'wiki.secondlife.com/wiki/$1',\n  'semantic-mw': w + 'semantic-mediawiki.org/wiki/$1',\n  senseislibrary: 'senseis.xmp.net/?$1',\n  sharemap: 'sharemap.org/$1',\n  silcode: w + 'sil.org/iso639-3/documentation.asp?id=$1',\n  slashdot: 'slashdot.org/article.pl?sid=$1',\n  sourceforge: 'sourceforge.net/$1',\n  spcom: 'spcom' + wm,\n  species: 'species' + wm,\n  squeak: 'wiki.squeak.org/squeak/$1',\n  stats: 'stats.wikimedia.org/$1',\n  stewardry: 'tools.wmflabs.org/meta/stewardry/?wiki=$1',\n  strategy: 'strategy' + wm,\n  strategywiki: 'strategywiki.org/wiki/$1',\n  sulutil: 'meta.wikimedia.org/wiki/Special:CentralAuth/$1',\n  swtrain: 'train.spottingworld.com/$1',\n  svn: 'svn.wikimedia.org/viewvc/mediawiki/$1?view=log',\n  swinbrain: 'swinbrain.ict.swin.edu.au/wiki/$1',\n  tabwiki: w + 'tabwiki.com/index.php/$1',\n  tclerswiki: 'wiki.tcl.tk/$1',\n  technorati: w + 'technorati.com/search/$1',\n  tenwiki: 'ten' + wp,\n  testwiki: 'test' + wp,\n  testwikidata: 'test.wikidata.org/wiki/$1',\n  test2wiki: 'test2' + wp,\n  tfwiki: 'tfwiki.net/wiki/$1',\n  thelemapedia: w + 'thelemapedia.org/index.php/$1',\n  theopedia: w + 'theopedia.com/$1',\n  thinkwiki: w + 'thinkwiki.org/wiki/$1',\n  ticket: 'ticket.wikimedia.org/otrs/index.pl?Action=AgentTicketZoom&TicketNumber=$1',\n  tmbw: 'tmbw.net/wiki/$1',\n  tmnet: w + 'technomanifestos.net/?$1',\n  tmwiki: w + 'EasyTopicMaps.com/?page=$1',\n  toolforge: 'tools.wmflabs.org/$1',\n  toollabs: 'tools.wmflabs.org/$1',\n  tools: 'toolserver.org/$1',\n  tswiki: w + 'mediawiki.org/wiki/Toolserver:$1',\n  translatewiki: 'translatewiki.net/wiki/$1',\n  tviv: 'tviv.org/wiki/$1',\n  tvtropes: w + 'tvtropes.org/pmwiki/pmwiki.php/Main/$1',\n  twiki: 'twiki.org/cgi-bin/view/$1',\n  tyvawiki: w + 'tyvawiki.org/wiki/$1',\n  umap: 'umap.openstreetmap.fr/$1',\n  uncyclopedia: 'en.uncyclopedia.co/wiki/$1',\n  unihan: w + 'unicode.org/cgi-bin/GetUnihanData.pl?codepoint=$1',\n  unreal: 'wiki.beyondunreal.com/wiki/$1',\n  urbandict: w + 'urbandictionary.com/define.php?term=$1',\n  usej: w + 'tejo.org/usej/$1',\n  usemod: w + 'usemod.com/cgi-bin/wiki.pl?$1',\n  usability: 'usability' + wm,\n  utrs: 'utrs.wmflabs.org/appeal.php?id=$1',\n  vikidia: 'fr.vikidia.org/wiki/$1',\n  vlos: 'tusach.thuvienkhoahoc.com/wiki/$1',\n  vkol: 'kol.coldfront.net/thekolwiki/index.php/$1',\n  voipinfo: w + 'voip-info.org/wiki/view/$1',\n  votewiki: 'vote' + wm,\n  werelate: w + 'werelate.org/wiki/$1',\n  wg: 'wg-en' + wp,\n  wikia: w + 'wikia.com/wiki/w:c:$1',\n  wikiasite: w + 'wikia.com/wiki/w:c:$1',\n  wikiapiary: 'wikiapiary.com/wiki/$1',\n  wikibooks: 'en.wikibooks.org/wiki/$1',\n  wikichristian: w + 'wikichristian.org/index.php?title=$1',\n  wikicities: w + 'wikia.com/wiki/w:$1',\n  wikicity: w + 'wikia.com/wiki/w:c:$1',\n  wikiconference: 'wikiconference.org/wiki/$1',\n  wikidata: w + 'wikidata.org/wiki/$1',\n  wikif1: w + 'wikif1.org/$1',\n  wikifur: 'en.wikifur.com/wiki/$1',\n  wikihow: w + 'wikihow.com/$1',\n  wikiindex: 'wikiindex.org/$1',\n  wikilemon: 'wiki.illemonati.com/$1',\n  wikilivres: 'wikilivres.org/wiki/$1',\n  wikilivresru: 'wikilivres.ru/$1',\n  'wikimac-de': 'apfelwiki.de/wiki/Main/$1',\n  wikimedia: 'foundation' + wm,\n  wikinews: 'en.wikinews.org/wiki/$1',\n  wikinfo: 'wikinfo.org/w/index.php/$1',\n  wikinvest: 'meta.wikimedia.org/wiki/Interwiki_map/discontinued#Wikinvest',\n  wikiotics: 'wikiotics.org/$1',\n  wikipapers: 'wikipapers.referata.com/wiki/$1',\n  wikipedia: 'en' + wp,\n  wikipediawikipedia: 'en.wikipedia.org/wiki/Wikipedia:$1',\n  wikiquote: 'en.wikiquote.org/wiki/$1',\n  wikisophia: 'wikisophia.org/index.php?title=$1',\n  wikisource: 'en.wikisource.org/wiki/$1',\n  wikispecies: 'species' + wm,\n  wikispot: 'wikispot.org/?action=gotowikipage&v=$1',\n  wikiskripta: w + 'wikiskripta.eu/index.php/$1',\n  labsconsole: 'wikitech' + wm,\n  wikiti: 'wikiti.denglend.net/index.php?title=$1',\n  wikiversity: 'en.wikiversity.org/wiki/$1',\n  wikivoyage: 'en.wikivoyage.org/wiki/$1',\n  betawikiversity: 'beta.wikiversity.org/wiki/$1',\n  wikiwikiweb: 'c2.com/cgi/wiki?$1',\n  wiktionary: 'en.wiktionary.org/wiki/$1',\n  wipipedia: 'wipipedia.org/index.php/$1',\n  wlug: w + 'wlug.org.nz/$1',\n  wmam: 'am' + wm,\n  wmar: w + 'wikimedia.org.ar/wiki/$1',\n  wmat: 'mitglieder.wikimedia.at/$1',\n  wmau: 'wikimedia.org.au/wiki/$1',\n  wmbd: 'bd' + wm,\n  wmbe: 'be' + wm,\n  wmbr: 'br' + wm,\n  wmca: 'ca' + wm,\n  wmch: w + 'wikimedia.ch/$1',\n  wmcl: w + 'wikimediachile.cl/index.php?title=$1',\n  wmcn: 'cn' + wm,\n  wmco: 'co' + wm,\n  wmcz: w + 'wikimedia.cz/web/$1',\n  wmdc: 'wikimediadc.org/wiki/$1',\n  securewikidc: 'secure.wikidc.org/$1',\n  wmde: 'wikimedia.de/wiki/$1',\n  wmdk: 'dk' + wm,\n  wmee: 'ee' + wm,\n  wmec: 'ec' + wm,\n  wmes: w + 'wikimedia.es/wiki/$1',\n  wmet: 'ee' + wm,\n  wmfdashboard: 'outreachdashboard.wmflabs.org/$1',\n  wmfi: 'fi' + wm,\n  wmfr: 'wikimedia.fr/$1',\n  wmge: 'ge' + wm,\n  wmhi: 'hi' + wm,\n  wmhk: 'meta.wikimedia.org/wiki/Wikimedia_Hong_Kong',\n  wmhu: 'wikimedia.hu/wiki/$1',\n  wmid: 'id' + wm,\n  wmil: w + 'wikimedia.org.il/$1',\n  wmin: 'wiki.wikimedia.in/$1',\n  wmit: 'wiki.wikimedia.it/wiki/$1',\n  wmke: 'meta.wikimedia.org/wiki/Wikimedia_Kenya',\n  wmmk: 'mk' + wm,\n  wmmx: 'mx' + wm,\n  wmnl: 'nl' + wm,\n  wmnyc: 'nyc' + wm,\n  wmno: 'no' + wm,\n  'wmpa-us': 'pa-us' + wm,\n  wmph: 'meta.wikimedia.org/wiki/Wikimedia_Philippines',\n  wmpl: 'pl' + wm,\n  wmpt: 'pt' + wm,\n  wmpunjabi: 'punjabi' + wm,\n  wmromd: 'romd' + wm,\n  wmrs: 'rs' + wm,\n  wmru: 'ru' + wm,\n  wmse: 'se' + wm,\n  wmsk: 'wikimedia.sk/$1',\n  wmtr: 'tr' + wm,\n  wmtw: 'wikimedia.tw/wiki/index.php5/$1',\n  wmua: 'ua' + wm,\n  wmuk: 'wikimedia.org.uk/wiki/$1',\n  wmve: 'wikimedia.org.ve/wiki/$1',\n  wmza: 'wikimedia.org.za/wiki/$1',\n  wm2005: 'wikimania2005' + wm,\n  wm2006: 'wikimania2006' + wm,\n  wm2007: 'wikimania2007' + wm,\n  wm2008: 'wikimania2008' + wm,\n  wm2009: 'wikimania2009' + wm,\n  wm2010: 'wikimania2010' + wm,\n  wm2011: 'wikimania2011' + wm,\n  wm2012: 'wikimania2012' + wm,\n  wm2013: 'wikimania2013' + wm,\n  wm2014: 'wikimania2014' + wm,\n  wm2015: 'wikimania2015' + wm,\n  wm2016: 'wikimania2016' + wm,\n  wm2017: 'wikimania2017' + wm,\n  wm2018: 'wikimania2018' + wm,\n  wmania: 'wikimania' + wm,\n  wikimania: 'wikimania' + wm,\n  wmteam: 'wikimaniateam' + wm,\n  wmf: 'foundation' + wm,\n  wmfblog: 'blog.wikimedia.org/$1',\n  wmdeblog: 'blog.wikimedia.de/$1',\n  wookieepedia: 'starwars.wikia.com/wiki/$1',\n  wowwiki: w + 'wowwiki.com/$1',\n  wqy: 'wqy.sourceforge.net/cgi-bin/index.cgi?$1',\n  wurmpedia: 'wurmpedia.com/index.php/$1',\n  viaf: 'viaf.org/viaf/$1',\n  zrhwiki: w + 'zrhwiki.ch/wiki/$1',\n  zum: 'wiki.zum.de/$1',\n  zwiki: w + 'zwiki.org/$1',\n  m: 'meta' + wm,\n  meta: 'meta' + wm,\n  sep11: 'sep11' + wp,\n  d: w + 'wikidata.org/wiki/$1',\n  minnan: 'zh-min-nan' + wp,\n  nb: 'no' + wp,\n  'zh-cfr': 'zh-min-nan' + wp,\n  'zh-cn': 'zh' + wp,\n  'zh-tw': 'zh' + wp,\n  nan: 'zh-min-nan' + wp,\n  vro: 'fiu-vro' + wp,\n  cmn: 'zh' + wp,\n  lzh: 'zh-classical' + wp,\n  rup: 'roa-rup' + wp,\n  gsw: 'als' + wp,\n  'be-tarask': 'be-x-old' + wp,\n  sgs: 'bat-smg' + wp,\n  egl: 'eml' + wp,\n  w: 'en' + wp,\n  wikt: 'en.wiktionary.org/wiki/$1',\n  q: 'en.wikiquote.org/wiki/$1',\n  b: 'en.wikibooks.org/wiki/$1',\n  n: 'en.wikinews.org/wiki/$1',\n  s: 'en.wikisource.org/wiki/$1',\n  chapter: 'en' + wm,\n  v: 'en.wikiversity.org/wiki/$1',\n  voy: 'en.wikivoyage.org/wiki/$1',\n}\n", "import languages from '../_data/languages.js'\n//some colon symbols are valid links, like `America: That place`\n//so we have to whitelist allowable interwiki links\nimport interwikis from '../_data/interwiki.js'\n//add language prefixes too..\nObject.keys(languages).forEach((k) => {\n  interwikis[k] = k + '.wikipedia.org/wiki/$1'\n})\n\n//this is predictably very complicated.\n// https://meta.wikimedia.org/wiki/Help:Interwiki_linking\nconst parseInterwiki = function (obj) {\n  let str = obj.page || ''\n  if (str.indexOf(':') !== -1) {\n    let m = str.match(/^(.*):(.*)/)\n    if (m === null) {\n      return obj\n    }\n    let site = m[1] || ''\n    site = site.toLowerCase()\n    // double colon - [[m:Help:Help]] \n    if (site.indexOf(':') !== -1) {\n      let [, wiki, lang] = site.match(/^:?(.*):(.*)/)\n      //only allow interwikis to these specific places\n      if (interwikis.hasOwnProperty(wiki) === false || languages.hasOwnProperty(lang) === false) {\n        return obj\n      }\n      obj.wiki = { wiki: wiki, lang: lang }\n    } else {\n      // [[fr:cool]]\n      if (interwikis.hasOwnProperty(site) === false) {\n        return obj\n      }\n      obj.wiki = site\n    }\n    obj.page = m[2]\n  }\n  return obj\n}\nexport default parseInterwiki\n", "import parse_interwiki from './interwiki.js'\nconst ignore_links =\n  /^(category|cat\u00E9gorie|kategorie|categor\u00EDa|categoria|categorie|kategoria|\u062A\u0635\u0646\u064A\u0641|image|file|fichier|datei|media):/i\nconst external_link = /\\[(https?|news|ftp|mailto|gopher|irc)(:\\/\\/[^\\]| ]{4,1500})([| ].*?)?\\]/g\nconst link_reg = /\\[\\[(.{0,1600}?)\\]\\]([a-z]+)?/gi //allow dangling suffixes - \"[[flanders]]s\"\n\nconst external_links = function (links, str) {\n  str.replace(external_link, function (raw, protocol, link, text) {\n    text = text || ''\n    links.push({\n      type: 'external',\n      site: protocol + link,\n      text: text.trim(),\n      raw: raw,\n    })\n    return text\n  })\n  return links\n}\n\nconst internal_links = function (links, str) {\n  //regular links\n  str.replace(link_reg, function (raw, s, suffix) {\n    let txt = null\n    //make a copy of original\n    let link = s\n    if (s.match(/\\|/)) {\n      //replacement link [[link|text]]\n      s = s.replace(/\\[\\[(.{2,1000}?)\\]\\](\\w{0,10})/g, '$1$2') //remove ['s and keep suffix\n      link = s.replace(/(.{2,1000})\\|.{0,2000}/, '$1') //replaced links\n      txt = s.replace(/.{2,1000}?\\|/, '')\n      //handle funky case of [[toronto|]]\n      if (txt === null && link.match(/\\|$/)) {\n        link = link.replace(/\\|$/, '')\n        txt = link\n      }\n    }\n    //kill off non-wikipedia namespaces\n    if (link.match(ignore_links)) {\n      return s\n    }\n    //kill off just these just-anchor links [[#history]]\n    // if (link.match(/^#/i)) {\n    //   console.log(s)\n    //   return s\n    // }\n    //remove anchors from end [[toronto#history]]\n    let obj = {\n      page: link,\n      raw: raw,\n    }\n    obj.page = obj.page.replace(/#(.*)/, (a, b) => {\n      obj.anchor = b\n      return ''\n    })\n    //grab any fr:Paris parts\n    obj = parse_interwiki(obj)\n    if (obj.wiki) {\n      obj.type = 'interwiki'\n    }\n    if (txt !== null && txt !== obj.page) {\n      obj.text = txt\n    }\n    //finally, support [[link]]'s apostrophe\n    if (suffix) {\n      obj.text = obj.text || obj.page\n      obj.text += suffix.trim()\n    }\n    //titlecase it, if necessary\n    if (obj.page && /^[A-Z]/.test(obj.page) === false) {\n      if (!obj.text) {\n        obj.text = obj.page\n      }\n      obj.page = obj.page\n    }\n    // support [[:Category:Foo]] syntax\n    if (obj.text && obj.text.startsWith(':')) {\n      obj.text = obj.text.replace(/^:/, '')\n    }\n    links.push(obj)\n    return s\n  })\n  return links\n}\n\n//grab an array of internal links in the text\nconst parse_links = function (str) {\n  let links = []\n  //first, parse external links\n  links = external_links(links, str)\n  //internal links\n  links = internal_links(links, str)\n  if (links.length === 0) {\n    return undefined\n  }\n  return links\n}\nexport default parse_links\n", "import { redirects } from '../_data/i18n.js'\nimport parseLink from '../link/parse.js'\n\n//pulls target link out of redirect page\nconst REDIRECT_REGEX = new RegExp('^[ \\n\\t]*?#(' + redirects.join('|') + ') *?(\\\\[\\\\[.{2,180}?\\\\]\\\\])', 'i')\n\nconst isRedirect = function (wiki) {\n  //too long to be a redirect?\n  if (!wiki) {\n    return false\n  }\n  return REDIRECT_REGEX.test(wiki)\n}\n\nconst parse = function (wiki) {\n  let m = wiki.match(REDIRECT_REGEX)\n  if (m && m[2]) {\n    let links = parseLink(m[2]) || []\n    return links[0]\n  }\n  return {}\n}\n\nexport { isRedirect, parse }\n", "//okay, i know you're not supposed to regex html, but...\n//https://en.wikipedia.org/wiki/Help:HTML_in_wikitext\n\n//these are things we throw-away\n//these will mess-up if they're nested, but they're not usually.\nconst ignore = [\n  'table',\n  'code',\n  'score',\n  'data',\n  'categorytree',\n  'charinsert',\n  'hiero',\n  'imagemap',\n  'inputbox',\n  'references',\n  'source',\n  'syntaxhighlight',\n  'timeline',\n]\nconst openTag = `< ?(${ignore.join('|')}) ?[^>]{0,200}?>`\nconst closeTag = `< ?/ ?(${ignore.join('|')}) ?>`\nconst anyChar = '\\\\s\\\\S' //including newline\nconst noThanks = new RegExp(`${openTag}[${anyChar}]+?${closeTag}`, 'gi')\n\nconst kill_xml = function (wiki) {\n  //(<ref> tags are parsed in Section class) - luckily, refs can't be recursive.\n  //types of html/xml that we want to trash completely.\n  wiki = wiki.replace(noThanks, ' ')\n  //some xml-like fragments we can also kill\n  wiki = wiki.replace(/ ?< ?(span|div|table|data) [a-zA-Z0-9=%.\\-#:;'\" ]{2,100}\\/? ?> ?/g, ' ') //<ref name=\"asd\">\n  //only kill ref tags if they are selfclosing\n  wiki = wiki.replace(/ ?< ?(ref) [a-zA-Z0-9=\" ]{2,100}\\/ ?> ?/g, ' ') //<ref name=\"asd\"/>\n\n  // convert these html tags to known formatting\n  wiki = wiki.replace(/<i>(.*?)<\\/i>/g, `''$1''`)\n  wiki = wiki.replace(/<b>(.*?)<\\/b>/g, `'''$1'''`)\n\n  // these are better-handled with templates\n  wiki = wiki.replace(/<sub>(.*?)<\\/sub>/g, `{{sub|$1}}`)\n  wiki = wiki.replace(/<sup>(.*?)<\\/sup>/g, `{{sup|$1}}`)\n  wiki = wiki.replace(/<blockquote>(.*?)<\\/blockquote>/g, `{{blockquote|text=$1}}`)\n\n  //some formatting xml, we'll keep their insides though\n  wiki = wiki.replace(/ ?<[ /]?(p|sub|sup|span|nowiki|div|table|br|tr|td|th|pre|pre2|hr|u)[ /]?> ?/g, ' ') //<sub>, </sub>\n  wiki = wiki.replace(/ ?<[ /]?(abbr|bdi|bdo|cite|del|dfn|em|ins|kbd|mark|q|s|small)[ /]?> ?/g, ' ') //<abbr>, </abbr>\n  wiki = wiki.replace(/ ?<[ /]?h[0-9][ /]?> ?/g, ' ') //<h2>, </h2>\n  wiki = wiki.replace(/ ?< ?br ?\\/> ?/g, '\\n') //<br />\n  return wiki.trim()\n}\nexport default kill_xml\n", "import kill_xml from './kill_xml.js'\n\n/**\n * removes unnecessary strings from the wikitext\n * it is mostly-formatting stuff can be cleaned-up first, to make life easier\n *\n * @private\n * @param {string} wiki the wikitext that needs processing\n * @returns {string} the processed text\n */\nfunction preProcess(wiki) {\n  //remove comments\n  wiki = wiki.replace(/<!--[\\s\\S]{0,2000}?-->/g, '')\n  wiki = wiki.replace(/__(NOTOC|NOEDITSECTION|FORCETOC|TOC)__/gi, '')\n  //signitures\n  wiki = wiki.replace(/~{2,3}/g, '')\n  //windows newlines\n  wiki = wiki.replace(/\\r/g, '')\n  //japanese periods - '\u3002'\n  wiki = wiki.replace(/\\u3002/g, '. ')\n  //horizontal rule\n  wiki = wiki.replace(/----/g, '')\n  //formatting for templates-in-templates...\n  wiki = wiki.replace(/\\{\\{\\}\\}/g, ' \u2013 ')\n  wiki = wiki.replace(/\\{\\{\\\\\\}\\}/g, ' / ')\n  // some html escaping\n  wiki = wiki.replace(/&nbsp;/g, ' ')\n  wiki = wiki.replace(/&ndash;/g, '\u2013')\n\n  //give it the inglorious send-off it deserves..\n  wiki = kill_xml(wiki)\n  //({{template}},{{template}}) leaves empty parentheses\n  wiki = wiki.replace(/\\([,;: ]+\\)/g, '')\n  //these templates just screw things up, too\n  wiki = wiki.replace(/\\{\\{(baseball|basketball) (primary|secondary) (style|color).*?\\}\\}/i, '')\n\n  return wiki\n}\nexport default preProcess\n", "//dumpster-dive throws everything into mongodb  - github.com/spencermountain/dumpster-dive\n//mongo has some opinions about what characters are allowed as keys and ids.\n//https://stackoverflow.com/questions/12397118/mongodb-dot-in-key-name/30254815#30254815\nconst specialChar = /[\\\\.$]/\n\n/**\n * this function encodes a string to make it mongodb compatible.\n * https://stackoverflow.com/questions/12397118/mongodb-dot-in-key-name/30254815#30254815\n *\n * @param {string} str\n * @returns {string} the encoded string\n */\nconst encodeStr = function (str) {\n  if (typeof str !== 'string') {\n    str = ''\n  }\n  str = str.replace(/\\\\/g, '\\\\\\\\')\n  str = str.replace(/^\\$/, '\\\\u0024')\n  str = str.replace(/\\./g, '\\\\u002e')\n  return str\n}\n\nconst encodeObj = function (obj = {}) {\n  let keys = Object.keys(obj)\n  for (let i = 0; i < keys.length; i += 1) {\n    if (specialChar.test(keys[i]) === true) {\n      let str = encodeStr(keys[i])\n      if (str !== keys[i]) {\n        obj[str] = obj[keys[i]]\n        delete obj[keys[i]]\n      }\n    }\n  }\n  return obj\n}\n\nexport default encodeObj \n", "import setDefaults from '../_lib/setDefaults.js'\nimport encodeObj from '../_lib/encode.js'\n\nconst defaults = {\n  headers: true,\n  depth: true,\n  paragraphs: true,\n  images: true,\n  tables: true,\n  templates: true,\n  infoboxes: true,\n  lists: true,\n  references: true,\n}\n\n/**\n *\n * @param {object} section\n * @param {object} options\n * @returns {object}\n */\nconst toJSON = function (section, options) {\n  options = setDefaults(options, defaults)\n  /**\n   * @type {object}\n   */\n  let data = {}\n\n  if (options.headers === true) {\n    data.title = section.title()\n  }\n\n  if (options.depth === true) {\n    data.depth = section.depth()\n  }\n\n  //these return objects\n  if (options.paragraphs === true) {\n    let paragraphs = section.paragraphs().map((p) => p.json(options))\n    if (paragraphs.length > 0) {\n      data.paragraphs = paragraphs\n    }\n  }\n\n  //image json data\n  if (options.images === true) {\n    let images = section.images().map((img) => img.json(options))\n    if (images.length > 0) {\n      data.images = images\n    }\n  }\n\n  //table json data\n  if (options.tables === true) {\n    let tables = section.tables().map((t) => t.json(options))\n    if (tables.length > 0) {\n      data.tables = tables\n    }\n  }\n\n  //template json data\n  if (options.templates === true) {\n    let templates = section.templates().map((tmpl) => tmpl.json())\n    if (templates.length > 0) {\n      data.templates = templates\n      //encode them, for mongodb\n      if (options.encode === true) {\n        data.templates.forEach((t) => encodeObj(t))\n      }\n    }\n  }\n  //infobox json data\n  if (options.infoboxes === true) {\n    let infoboxes = section.infoboxes().map((i) => i.json(options))\n    if (infoboxes.length > 0) {\n      data.infoboxes = infoboxes\n    }\n  }\n  //list json data\n  if (options.lists === true) {\n    let lists = section.lists().map((list) => list.json(options))\n    if (lists.length > 0) {\n      data.lists = lists\n    }\n  }\n  //list references - default true\n  if (options.references === true || options.citations === true) {\n    let references = section.references().map((ref) => ref.json(options))\n    if (references.length > 0) {\n      data.references = references\n    }\n  }\n  //default off\n  if (options.sentences === true) {\n    data.sentences = section.sentences().map((s) => s.json(options))\n  }\n  return data\n}\nexport default toJSON\n", "import wikis from '../_data/interwiki.js'\n\nconst defaults = {\n  type: 'internal',\n}\nconst Link = function (data) {\n  data = data || {}\n  data = Object.assign({}, defaults, data)\n  Object.defineProperty(this, 'data', {\n    enumerable: false,\n    value: data,\n  })\n}\nconst methods = {\n  text: function (str) {\n    if (str !== undefined) {\n      this.data.text = str\n    }\n    let txt = this.data.text || this.data.page || ''\n    // remove bold/italics\n    txt = txt.replace(/'{2,}/g, '')\n    return txt\n  },\n  json: function () {\n    let obj = {\n      text: this.data.text,\n      type: this.type(),\n    }\n    if (obj.type === 'internal') {\n      obj.page = this.page()\n    } else if (obj.type === 'interwiki') {\n      obj.wiki = this.wiki()\n      obj.page = this.page()\n    } else {\n      obj.site = this.site()\n    }\n    let anchor = this.anchor()\n    if (anchor) {\n      obj.anchor = anchor\n    }\n    return obj\n  },\n  wikitext: function () {\n    let txt = this.data.raw || ''\n    return txt\n  },\n  page: function (str) {\n    if (str !== undefined) {\n      this.data.page = str\n    }\n    return this.data.page\n  },\n  anchor: function (str) {\n    if (str !== undefined) {\n      this.data.anchor = str\n    }\n    return this.data.anchor || ''\n  },\n  wiki: function (str) {\n    if (str !== undefined) {\n      this.data.wiki = str\n    }\n    return this.data.wiki\n  },\n  type: function (str) {\n    if (str !== undefined) {\n      this.data.type = str\n    }\n    return this.data.type\n  },\n  site: function (str) {\n    if (str !== undefined) {\n      this.data.site = str\n    }\n    return this.data.site\n  },\n  //create a url for any type of link\n  href: function () {\n    let type = this.type()\n    if (type === 'external') {\n      return this.site()\n    }\n    let page = this.page()\n    page = page.replace(/ /g, '_')\n    page = encodeURIComponent(page)\n    let url = ''\n\n    if (type === 'interwiki') {\n      let wiki = this.wiki()\n      url = 'https://en.wikipedia.org/wiki/$1'\n      if (wikis.hasOwnProperty(wiki)) {\n        url = 'http://' + wikis[this.wiki()]\n      }\n      url = url.replace(/\\$1/g, page)\n    } else {\n      //internal link\n      url = `./${this.page()}`\n    }\n    //add anchor on the end\n    if (this.anchor()) {\n      url += '#' + this.anchor()\n    }\n    return url\n  },\n}\nObject.keys(methods).forEach((k) => {\n  Link.prototype[k] = methods[k]\n})\nexport default Link\n", "import Link from './Link.js'\nimport parseLinks from './parse.js'\n\n//return only rendered text of wiki links\nconst removeLinks = function (line) {\n  // [[File:with|Size]]\n  line = line.replace(/\\[\\[File:(.{2,80}?)\\|([^\\]]+)\\]\\](\\w{0,5})/g, '$1')\n  return line\n}\n\nconst getLinks = function (data) {\n  let wiki = data.text\n  let links = parseLinks(wiki) || []\n  data.links = links.map((link) => {\n    wiki = wiki.replace(link.raw, link.text || link.page || '')\n    // delete link.raw\n    return new Link(link)\n  })\n  wiki = removeLinks(wiki)\n  data.text = wiki\n}\nexport default getLinks\n", "//handle the bold/italics\nconst formatting = function (obj) {\n  let bolds = []\n  let italics = []\n  let wiki = obj.text || ''\n  //bold and italics combined 5 's\n  wiki = wiki.replace(/'''''(.{0,2500}?)'''''/g, (a, b) => {\n    bolds.push(b)\n    italics.push(b)\n    return b\n  })\n  //''''four'''' \u2192 bold with quotes\n  wiki = wiki.replace(/''''(.{0,2500}?)''''/g, (a, b) => {\n    bolds.push(`'${b}'`)\n    return `'${b}'`\n  })\n  //'''bold'''\n  wiki = wiki.replace(/'''(.{0,2500}?)'''/g, (a, b) => {\n    bolds.push(b)\n    return b\n  })\n  //''italic''\n  wiki = wiki.replace(/''(.{0,2500}?)''/g, (a, b) => {\n    italics.push(b)\n    return b\n  })\n\n  //pack it all up..\n  obj.text = wiki\n  if (bolds.length > 0) {\n    obj.fmt = obj.fmt || {}\n    obj.fmt.bold = bolds\n  }\n  if (italics.length > 0) {\n    obj.fmt = obj.fmt || {}\n    obj.fmt.italic = italics\n  }\n  return obj\n}\nexport default formatting\n", "import setDefaults from '../_lib/setDefaults.js'\nconst isNumber = /^[0-9,.]+$/\n\nconst defaults = {\n  text: true,\n  links: true,\n  formatting: true,\n  numbers: true,\n}\n\n/**\n * @private\n * */\nconst toJSON = function (s, options) {\n  options = setDefaults(options, defaults)\n  let data = {}\n  let text = s.text()\n  if (options.text === true) {\n    data.text = text\n  }\n  //add number field\n  if (options.numbers === true && isNumber.test(text)) {\n    let num = Number(text.replace(/,/g, ''))\n    if (isNaN(num) === false) {\n      data.number = num\n    }\n  }\n  if (options.links && s.links().length > 0) {\n    data.links = s.links().map((l) => l.json())\n  }\n  if (options.formatting && s.data.fmt) {\n    data.formatting = s.data.fmt\n  }\n  return data\n}\nexport default toJSON\n", "import toJSON from './toJson.js'\n\n//where we store the formatting, link, date information\nconst Sentence = function (data = {}) {\n  Object.defineProperty(this, 'data', {\n    enumerable: false,\n    value: data,\n  })\n}\n\nconst methods = {\n  links: function (n) {\n    let arr = this.data.links || []\n    if (typeof n === 'string') {\n      //grab a link like .links('Fortnight')\n      n = n.charAt(0).toUpperCase() + n.substring(1) //titlecase it\n      let link = arr.find((o) => o.page === n)\n      return link === undefined ? [] : [link]\n    }\n    return arr\n  },\n  interwiki: function () {\n    return this.links().filter((l) => l.wiki !== undefined)\n  },\n  bolds: function () {\n    if (this.data && this.data.fmt && this.data.fmt.bold) {\n      return this.data.fmt.bold || []\n    }\n    return []\n  },\n  italics: function () {\n    if (this.data && this.data.fmt && this.data.fmt.italic) {\n      return this.data.fmt.italic || []\n    }\n    return []\n  },\n  text: function (str) {\n    if (str !== undefined && typeof str === 'string') {\n      //set the text?\n      this.data.text = str\n    }\n    return this.data.text || ''\n  },\n  json: function (options) {\n    return toJSON(this, options)\n  },\n  wikitext: function () {\n    return this.data.wiki || ''\n  },\n  isEmpty: function () {\n    return this.data.text === ''\n  },\n}\n\nObject.keys(methods).forEach((k) => {\n  Sentence.prototype[k] = methods[k]\n})\n\n// aliases\nconst singular = {\n  links: 'link',\n  bolds: 'bold',\n  italics: 'italic',\n}\nObject.keys(singular).forEach((k) => {\n  let sing = singular[k]\n  Sentence.prototype[sing] = function (clue) {\n    let arr = this[k](clue)\n    if (typeof clue === 'number') {\n      return arr[clue]\n    }\n    return arr[0]\n  }\n})\n\nSentence.prototype.plaintext = Sentence.prototype.text\n\nexport default Sentence\n", "//these are used for the sentence-splitter\nexport default [\n  'ad',\n  'adj',\n  'adm',\n  'adv',\n  'al',\n  'alta',\n  'approx',\n  'apr',\n  'apt',\n  'arc',\n  'ariz',\n  'assn',\n  'asst',\n  'atty',\n  'aug',\n  'ave',\n  'ba',\n  'bc',\n  'bl',\n  'bldg',\n  'blvd',\n  'brig',\n  'bros',\n  'ca',\n  'cal',\n  'calif',\n  'capt',\n  'cca',\n  'cg',\n  'cl',\n  'cm',\n  'cmdr',\n  'co',\n  'col',\n  'colo',\n  'comdr',\n  'conn',\n  'corp',\n  'cpl',\n  'cres',\n  'ct',\n  'cyn',\n  'dak',\n  'dec',\n  'def',\n  'dept',\n  'det',\n  'dg',\n  'dist',\n  'dl',\n  'dm',\n  'dr',\n  'ea',\n  'eg',\n  'eng',\n  'esp',\n  'esq',\n  'est',\n  'etc',\n  'ex',\n  'exp',\n  'feb',\n  'fem',\n  'fig',\n  'fl oz',\n  'fl',\n  'fla',\n  'fm',\n  'fr',\n  'ft',\n  'fy',\n  'ga',\n  'gal',\n  'gb',\n  'gen',\n  'gov',\n  'hg',\n  'hon',\n  'hr',\n  'hrs',\n  'hwy',\n  'hz',\n  'ia',\n  'ida',\n  'ie',\n  'inc',\n  'inf',\n  'jan',\n  'jd',\n  'jr',\n  'jul',\n  'jun',\n  'kan',\n  'kans',\n  'kb',\n  'kg',\n  'km',\n  'kmph',\n  'lat',\n  'lb',\n  'lit',\n  'llb',\n  'lm',\n  'lng',\n  'lt',\n  'ltd',\n  'lx',\n  'ma',\n  'maj',\n  'mar',\n  'masc',\n  'mb',\n  'md',\n  'messrs',\n  'mg',\n  'mi',\n  'min',\n  'minn',\n  'misc',\n  'mister',\n  'ml',\n  'mlle',\n  'mm',\n  'mme',\n  'mph',\n  'mps',\n  'mr',\n  'mrs',\n  'ms',\n  'mstr',\n  'mt',\n  'neb',\n  'nebr',\n  'nee',\n  'no',\n  'nov',\n  'oct',\n  'okla',\n  'ont',\n  'op',\n  'ord',\n  'oz',\n  'pa',\n  'pd',\n  'penn',\n  'penna',\n  'phd',\n  'pl',\n  'pp',\n  'pref',\n  'prob',\n  'prof',\n  'pron',\n  'ps',\n  'psa',\n  'pseud',\n  'pt',\n  'pvt',\n  'qt',\n  'que',\n  'rb',\n  'rd',\n  'rep',\n  'reps',\n  'res',\n  'rev',\n  'sask',\n  'sec',\n  'sen',\n  'sens',\n  'sep',\n  'sept',\n  'sfc',\n  'sgt',\n  'sir',\n  'situ',\n  'sq ft',\n  'sq',\n  'sr',\n  'ss',\n  'st',\n  'supt',\n  'surg',\n  'tb',\n  'tbl',\n  'tbsp',\n  'tce',\n  'td',\n  'tel',\n  'temp',\n  'tenn',\n  'tex',\n  'tsp',\n  'univ',\n  'usafa',\n  'ut',\n  'va',\n  'vb',\n  'ver',\n  'vet',\n  'vitro',\n  'vivo',\n  'vol',\n  'vs',\n  'vt',\n  'wis',\n  'wisc',\n  'wr',\n  'wy',\n  'wyo',\n  'yb',\n  '\u00B5g',\n]\n", "//split text into sentences, using regex\n//@spencermountain MIT\n\n//(Rule-based sentence boundary segmentation) - chop given text into its proper sentences.\n// Ignore periods/questions/exclamations used in acronyms/abbreviations/numbers, etc.\n// @spencermountain 2015 MIT\nimport literalAbbreviations from './_abbreviations.js'\nconst abbreviations = literalAbbreviations.concat('[^]][^]]')\nconst abbrev_reg = new RegExp(\"(^| |')(\" + abbreviations.join('|') + `)[.!?] ?$`, 'i')\nconst acronym_reg = /[ .'][A-Z].? *$/i\nconst elipses_reg = /\\.{3,} +$/\nconst circa_reg = / c\\.\\s$/\nconst hasWord = /\\p{Letter}/iu\n\n//turn a nested array into one array\nconst flatten = function (arr) {\n  let all = []\n  arr.forEach(function (a) {\n    all = all.concat(a)\n  })\n  return all\n}\n\nconst naiive_split = function (text) {\n  //first, split by newline\n  let splits = text.split(/(\\n+)/)\n  splits = splits.filter((s) => s.match(/\\S/))\n  //split by period, question-mark, and exclamation-mark\n  splits = splits.map(function (str) {\n    return str.split(/(\\S.+?[.!?]\"?)(?=\\s|$)/g) //\\u3002\n  })\n  return flatten(splits)\n}\n\n// if this looks like a period within a wikipedia link, return false\nconst isBalanced = function (str) {\n  str = str || ''\n  const open = str.split(/\\[\\[/) || []\n  const closed = str.split(/\\]\\]/) || []\n  if (open.length > closed.length) {\n    return false\n  }\n  //make sure quotes are closed too\n  const quotes = str.match(/\"/g)\n  if (quotes && quotes.length % 2 !== 0 && str.length < 900) {\n    return false\n  }\n  //make sure quotes are closed too\n  const parens = str.match(/[()]/g)\n  if (parens && parens.length % 2 !== 0 && str.length < 900) {\n    return false\n  }\n  return true\n}\n\nconst sentence_parser = function (text) {\n  let sentences = []\n  //first do a greedy-split..\n  let chunks = []\n  //ensure it 'smells like' a sentence\n  if (!text || typeof text !== 'string' || text.trim().length === 0) {\n    return sentences\n  }\n  // This was the splitter regex updated to fix quoted punctuation marks.\n  // let splits = text.split(/(\\S.+?[.\\?!])(?=\\s+|$|\")/g);\n  // todo: look for side effects in this regex replacement:\n  let splits = naiive_split(text)\n  //filter-out the grap ones\n  for (let i = 0; i < splits.length; i++) {\n    let s = splits[i]\n    if (!s || s === '') {\n      continue\n    }\n    //this is meaningful whitespace\n    if (!s.match(/\\S/)) {\n      //add it to the last one\n      if (chunks[chunks.length - 1]) {\n        chunks[chunks.length - 1] += s\n        continue\n      } else if (splits[i + 1]) {\n        //add it to the next one\n        splits[i + 1] = s + splits[i + 1]\n        continue\n      }\n    }\n    chunks.push(s)\n  }\n\n  //detection of non-sentence chunks\n  const isSentence = function (hmm) {\n    if (hmm.match(abbrev_reg) || hmm.match(acronym_reg) || hmm.match(elipses_reg) || hmm.match(circa_reg)) {\n      return false\n    }\n    //too short? - no consecutive letters\n    if (hasWord.test(hmm) === false) {\n      return false\n    }\n    if (!isBalanced(hmm)) {\n      return false\n    }\n    return true\n  }\n  //loop through these chunks, and join the non-sentence chunks back together..\n  for (let i = 0; i < chunks.length; i++) {\n    //should this chunk be combined with the next one?\n    if (chunks[i + 1] && !isSentence(chunks[i])) {\n      // need a space to connect these?\n      if (!/^\\s/.test(chunks[i + 1]) && !/\\s$/.test(chunks[i])) {\n        chunks[i + 1] = chunks[i] + ' ' + chunks[i + 1]\n      } else {\n        chunks[i + 1] = chunks[i] + chunks[i + 1]\n      }\n    } else if (chunks[i] && chunks[i].length > 0) {\n      //this chunk is a proper sentence..\n      sentences.push(chunks[i])\n      chunks[i] = ''\n    }\n  }\n  //if we never got a sentence, return the given text\n  if (sentences.length === 0) {\n    return [text]\n  }\n  return sentences\n}\n\nexport default sentence_parser\n", "import { trim_whitespace } from '../_lib/helpers.js'\nimport parseLinks from '../link/index.js'\nimport parseFmt from './formatting.js'\nimport Sentence from './Sentence.js'\nimport sentenceParser from './parse.js'\n\n/**\n * This function removes some final characters from the sentence\n *\n * @private\n * @param {string} line the wiki text for processing\n * @returns {string} the processed string\n */\nfunction postprocess(line) {\n  //remove empty parentheses (sometimes caused by removing templates)\n  line = line.replace(/\\([,;: ]*\\)/g, '')\n  //these semi-colons in parentheses are particularly troublesome\n  line = line.replace(/\\( *(; ?)+/g, '(')\n  //dangling punctuation\n  line = trim_whitespace(line)\n  line = line.replace(/ +\\.$/, '.')\n  return line\n}\n\n/**\n * returns one sentence object\n *\n * @param {string} str create a object from a sentence\n * @returns {Sentence} the Sentence created from the text\n */\nfunction fromText(str) {\n  let obj = {\n    wiki: str,\n    text: str,\n  }\n  //pull-out the [[links]]\n  parseLinks(obj)\n  obj.text = postprocess(obj.text)\n  //pull-out the bolds and ''italics''\n  obj = parseFmt(obj)\n  //pull-out things like {{start date|...}}\n  return new Sentence(obj)\n}\n\n//used for consistency with other class-definitions\nconst byParagraph = function (paragraph) {\n  //array of texts\n  let sentences = sentenceParser(paragraph.wiki)\n  //sentence objects\n  sentences = sentences.map(fromText)\n  //remove :indented first line, as it is often a disambiguation\n  if (sentences[0] && sentences[0].text() && sentences[0].text()[0] === ':') {\n    sentences = sentences.slice(1)\n  }\n  paragraph.sentences = sentences\n}\n\nexport { fromText, byParagraph }\n", "//remove top-bottoms\nconst cleanup = function (lines) {\n  lines = lines.filter((line) => {\n    //a '|+' row is a 'table caption', remove it.\n    return line && /^\\|\\+/.test(line) !== true\n  })\n  if (/^\\{\\|/.test(lines[0]) === true) {\n    lines.shift()\n  }\n  if (/^\\|\\}/.test(lines[lines.length - 1]) === true) {\n    lines.pop()\n  }\n  if (/^\\|-/.test(lines[0]) === true) {\n    lines.shift()\n  }\n  return lines\n}\n\n//turn newline seperated into '|-' seperated\nconst findRows = function (lines) {\n  let rows = []\n  let row = []\n  lines = cleanup(lines)\n  for (let i = 0; i < lines.length; i += 1) {\n    let line = lines[i]\n    //'|-' is a row-seperator\n    if (/^\\|-/.test(line) === true) {\n      //okay, we're done the row\n      if (row.length > 0) {\n        rows.push(row)\n        row = []\n      }\n    } else {\n      // remove leading | or ! for the ||/!! splitting\n      let startChar = line.charAt(0)\n      if (startChar === '|' || startChar === '!') {\n        line = line.substring(1)\n      }\n      //look for '||' inline row-splitter\n      line = line.split(/(?:\\|\\||!!)/) //eslint-disable-line\n      // add leading ! back, because we later read it in header parsing functions\n      if (startChar === '!') {\n        line[0] = startChar + line[0]\n      }\n      line.forEach((l) => {\n        l = l.trim()\n        row.push(l)\n      })\n    }\n  }\n  //finish the last one\n  if (row.length > 0) {\n    rows.push(row)\n  }\n  return rows\n}\nexport default findRows\n", "const getRowSpan = /.*rowspan *= *[\"']?([0-9]+)[\"']?[ |]*/\nconst getColSpan = /.*colspan *= *[\"']?([0-9]+)[\"']?[ |]*/\n\n//colspans stretch \u2190left/right\u2192\nconst doColSpan = function (rows) {\n  rows.forEach((row) => {\n    row.forEach((str, c) => {\n      let m = str.match(getColSpan)\n      if (m !== null) {\n        let num = parseInt(m[1], 10)\n\n        //...maybe if num is so big, and centered, remove it?\n        // if (num > 3) {\n        //   rows[r] = []\n        //   return\n        // }\n        //splice-in n empty columns right here\n        row[c] = str.replace(getColSpan, '')\n        for (let i = 1; i < num; i += 1) {\n          row.splice(c + 1, 0, '')\n        }\n      }\n    })\n  })\n  rows = rows.filter((r) => r.length > 0)\n  return rows\n}\n\n//colspans stretch up/down\nconst doRowSpan = function (rows) {\n  rows.forEach((row, r) => {\n    row.forEach((str, c) => {\n      let m = str.match(getRowSpan)\n      if (m !== null) {\n        let num = parseInt(m[1], 10)\n        //copy this cell down n rows\n        str = str.replace(getRowSpan, '')\n        row[c] = str\n        for (let i = r + 1; i < r + num; i += 1) {\n          if (!rows[i]) {\n            break\n          }\n          rows[i].splice(c, 0, str)\n        }\n      }\n    })\n  })\n  return rows\n}\n\n//\nconst handleSpans = function (rows) {\n  rows = doColSpan(rows)\n  rows = doRowSpan(rows)\n  return rows\n}\nexport default handleSpans\n", "import { fromText as parseSentence } from '../../04-sentence/index.js'\nimport findRows from './_findRows.js'\nimport handleSpans from './_spans.js'\nconst isHeading = /^!/\n\n//common ones\nconst headings = {\n  name: true,\n  age: true,\n  born: true,\n  date: true,\n  year: true,\n  city: true,\n  country: true,\n  population: true,\n  count: true,\n  number: true,\n}\n\n//additional table-cruft to remove before parseLine method\nconst cleanText = function (str) {\n  str = parseSentence(str).text()\n  //anything before a single-pipe is styling, so remove it\n  if (str.match(/\\|/)) {\n    str = str.replace(/.*?\\| ?/, '') //class=\"unsortable\"|title\n  }\n  str = str.replace(/style=['\"].*?[\"']/, '')\n  //'!' is used as a highlighed-column\n  str = str.replace(/^!/, '')\n  // str = str.replace(/\\(.*?\\)/, '')\n  str = str.trim()\n  // str = str.toLowerCase()\n  return str\n}\n\nconst skipSpanRow = function (row) {\n  row = row || []\n  let len = row.length\n  let hasTxt = row.filter((str) => str).length\n  //does it have 3 empty spaces?\n  if (len - hasTxt > 3) {\n    return true\n  }\n  return false\n}\n\n//remove non-header span rows\nconst removeMidSpans = function (rows) {\n  rows = rows.filter((row) => {\n    if (row.length === 1 && row[0] && isHeading.test(row[0]) && /rowspan/i.test(row[0]) === false) {\n      return false\n    }\n    return true\n  })\n  return rows\n}\n\n//'!' starts a header-row\nconst findHeaders = function (rows = []) {\n  let headers = []\n\n  // is the first-row just a ton of colspan?\n  if (skipSpanRow(rows[0])) {\n    rows.shift()\n  }\n\n  let first = rows[0]\n  if (first && first[0] && first[1] && (/^!/.test(first[0]) || /^!/.test(first[1]))) {\n    headers = first.map((h) => {\n      h = h.replace(/^! */, '')\n      h = cleanText(h)\n      return h\n    })\n    rows.shift()\n  }\n  //try the second row, too (overwrite first-row, if it exists)\n  first = rows[0]\n  if (first && first[0] && first[1] && /^!/.test(first[0]) && /^!/.test(first[1])) {\n    first.forEach((h, i) => {\n      h = h.replace(/^! */, '')\n      h = cleanText(h)\n      if (Boolean(h) === true) {\n        headers[i] = h\n      }\n    })\n    rows.shift()\n  }\n  return headers\n}\n\n//turn headers, array into an object\nconst parseRow = function (arr, headers) {\n  let row = {}\n  arr.forEach((str, i) => {\n    let h = headers[i] || 'col' + (i + 1)\n    let s = parseSentence(str)\n    s.text(cleanText(s.text()))\n    row[h] = s\n  })\n  return row\n}\n\n//should we use the first row as a the headers?\nconst firstRowHeader = function (rows) {\n  if (rows.length <= 3) {\n    return []\n  }\n  let headers = rows[0].slice(0)\n  headers = headers.map((h) => {\n    h = h.replace(/^! */, '')\n    h = parseSentence(h).text()\n    h = cleanText(h)\n    h = h.toLowerCase()\n    return h\n  })\n  for (let i = 0; i < headers.length; i += 1) {\n    if (headings.hasOwnProperty(headers[i])) {\n      rows.shift()\n      return headers\n    }\n  }\n  return []\n}\n\n//turn a {|...table string into an array of arrays\nconst parseTable = function (wiki) {\n  let lines = wiki\n    .replace(/\\r/g, '')\n    .replace(/\\n(\\s*[^|!{\\s])/g, ' $1') //remove unecessary newlines\n    .split(/\\n/)\n    .map((l) => l.trim())\n  let rows = findRows(lines)\n  rows = rows.filter((r) => r)\n  if (rows.length === 0) {\n    return []\n  }\n\n  //remove non-header span rows\n  rows = removeMidSpans(rows)\n  //support colspan, rowspan...\n  rows = handleSpans(rows)\n  //grab the header rows\n  let headers = findHeaders(rows)\n  if (!headers || headers.length <= 1) {\n    headers = firstRowHeader(rows)\n    let want = rows[rows.length - 1] || []\n    //try the second row\n    if (headers.length <= 1 && want.length > 2) {\n      headers = firstRowHeader(rows.slice(1))\n      if (headers.length > 0) {\n        rows = rows.slice(2) //remove them\n      }\n    }\n  }\n  //index each column by it's header\n  let table = rows.map((arr) => {\n    return parseRow(arr, headers)\n  })\n  return table\n}\n\nexport default parseTable\n", "import encodeObj from '../_lib/encode.js'\n//\nconst toJson = function (tables, options) {\n  return tables.map((table) => {\n    let row = {}\n    Object.keys(table).forEach((k) => {\n      row[k] = table[k].json() //(they're sentence objects)\n    })\n    //encode them, for mongodb\n    if (options.encode === true) {\n      row = encodeObj(row)\n    }\n    return row\n  })\n}\nexport default toJson\n", "import setDefaults from '../_lib/setDefaults.js'\nimport toJson from './toJson.js'\nconst defaults = {}\n\nconst normalize = function (key = '') {\n  key = key.toLowerCase()\n  key = key.replace(/[_-]/g, ' ')\n  key = key.replace(/\\(.*?\\)/, '')\n  key = key.trim()\n  return key\n}\n\nconst Table = function (data, wiki = '') {\n  Object.defineProperty(this, 'data', {\n    enumerable: false,\n    value: data,\n  })\n  Object.defineProperty(this, '_wiki', {\n    enumerable: false,\n    value: wiki,\n  })\n}\n\nconst methods = {\n  links(n) {\n    let links = []\n    this.data.forEach((r) => {\n      Object.keys(r).forEach((k) => {\n        links = links.concat(r[k].links())\n      })\n    })\n    if (typeof n === 'string') {\n      //grab a link like .links('Fortnight')\n      n = n.charAt(0).toUpperCase() + n.substring(1) //titlecase it\n      let link = links.find((o) => o.page() === n)\n      return link === undefined ? [] : [link]\n    }\n    return links\n  },\n  get(keys) {\n    // normalize mappings\n    let have = this.data[0] || {}\n    let mapping = Object.keys(have).reduce((h, k) => {\n      h[normalize(k)] = k\n      return h\n    }, {})\n    // string gets a flat-list\n    if (typeof keys === 'string') {\n      let key = normalize(keys)\n      key = mapping[key] || key\n      return this.data.map((row) => {\n        return row[key] ? row[key].text() : null\n      })\n    }\n    // array gets obj-list\n    keys = keys.map(normalize).map((k) => mapping[k] || k)\n    return this.data.map((row) => {\n      return keys.reduce((h, k) => {\n        if (row[k]) {\n          h[k] = row[k].text()\n        } else {\n          h[k] = ''\n        }\n        return h\n      }, {})\n    })\n  },\n  keyValue(options) {\n    let rows = this.json(options)\n    rows.forEach((row) => {\n      Object.keys(row).forEach((k) => {\n        row[k] = row[k].text\n      })\n    })\n    return rows\n  },\n  json(options) {\n    options = setDefaults(options, defaults)\n    return toJson(this.data, options)\n  },\n\n  text() {\n    return ''\n  },\n\n  wikitext() {\n    return this._wiki || ''\n  },\n}\nmethods.keyvalue = methods.keyValue\nmethods.keyval = methods.keyValue\n\nObject.keys(methods).forEach((k) => {\n  Table.prototype[k] = methods[k]\n})\nexport default Table\n", "import parseTable from './parse/index.js'\nimport Table from './Table.js'\n//const table_reg = /\\{\\|[\\s\\S]+?\\|\\}/g; //the largest-cities table is ~70k chars.\nconst openReg = /^\\s*\\{\\|/\nconst closeReg = /^\\s*\\|\\}/\n\n//tables can be recursive, so looky-here.\nconst findTables = function (section) {\n  let list = []\n  let wiki = section._wiki\n  let lines = wiki.split('\\n')\n  let stack = []\n  for (let i = 0; i < lines.length; i += 1) {\n    //start a table\n    if (openReg.test(lines[i]) === true) {\n      stack.push(lines[i])\n      continue\n    }\n    //close a table\n    if (closeReg.test(lines[i]) === true) {\n      stack[stack.length - 1] += '\\n' + lines[i]\n      let table = stack.pop()\n      list.push(table)\n      continue\n    }\n    //keep-going on one\n    if (stack.length > 0) {\n      stack[stack.length - 1] += '\\n' + lines[i]\n    }\n  }\n  //work-em together for a Table class\n  let tables = []\n  list.forEach((str) => {\n    if (str) {\n      //also re-remove a newline at the end of the table (awkward)\n      wiki = wiki.replace(str + '\\n', '')\n      wiki = wiki.replace(str, '')\n      let data = parseTable(str)\n      if (data && data.length > 0) {\n        tables.push(new Table(data, str))\n      }\n    }\n  })\n\n  if (tables.length > 0) {\n    section._tables = tables\n  }\n  section._wiki = wiki\n}\n\nexport default findTables\n", "import setDefaults from '../_lib/setDefaults.js'\n\nconst defaults = {\n  sentences: true,\n}\n\nconst toJson = function (p, options) {\n  options = setDefaults(options, defaults)\n  let data = {}\n  if (options.sentences === true) {\n    data.sentences = p.sentences().map((s) => s.json(options))\n  }\n  return data\n}\nexport default toJson\n", "import toJSON from './toJson.js'\nimport setDefaults from '../_lib/setDefaults.js'\nconst defaults = {\n  sentences: true,\n  lists: true,\n  images: true,\n}\n\nconst Paragraph = function (data) {\n  Object.defineProperty(this, 'data', {\n    enumerable: false,\n    value: data,\n  })\n}\n\nconst methods = {\n  sentences: function () {\n    return this.data.sentences || []\n  },\n  references: function () {\n    return this.data.references\n  },\n  lists: function () {\n    return this.data.lists\n  },\n  images() {\n    return this.data.images || []\n  },\n  links: function (clue) {\n    let arr = []\n    this.sentences().forEach((s) => {\n      arr = arr.concat(s.links(clue))\n    })\n    if (typeof clue === 'string') {\n      //grab a specific link like .links('Fortnight')\n      clue = clue.charAt(0).toUpperCase() + clue.substring(1) //titlecase it\n      let link = arr.find((o) => o.page() === clue)\n      return link === undefined ? [] : [link]\n    }\n    return arr || []\n  },\n  interwiki() {\n    let arr = []\n    this.sentences().forEach((s) => {\n      arr = arr.concat(s.interwiki())\n    })\n    return arr || []\n  },\n  text: function (options) {\n    options = setDefaults(options, defaults)\n    let str = this.sentences()\n      .map((s) => s.text(options))\n      .join(' ')\n    this.lists().forEach((list) => {\n      str += '\\n' + list.text()\n    })\n    return str\n  },\n  json: function (options) {\n    options = setDefaults(options, defaults)\n    return toJSON(this, options)\n  },\n  wikitext: function () {\n    return this.data.wiki\n  },\n}\nmethods.citations = methods.references\nObject.keys(methods).forEach((k) => {\n  Paragraph.prototype[k] = methods[k]\n})\n\n// aliases\nconst singular = {\n  sentences: 'sentence',\n  references: 'reference',\n  citations: 'citation',\n  lists: 'list',\n  images: 'image',\n  links: 'link',\n}\nObject.keys(singular).forEach((k) => {\n  let sing = singular[k]\n  Paragraph.prototype[sing] = function (clue) {\n    let arr = this[k](clue)\n    if (typeof clue === 'number') {\n      return arr[clue]\n    }\n    return arr[0]\n  }\n})\n\nexport default Paragraph\n", "/**\n * removes the top and bottom off the template\n * so it removes tje '{{' and '}}'\n *\n * @private\n * @param {string} tmpl the string to be striped\n * @returns {string} the striped string\n */\nconst strip = function (tmpl) {\n  tmpl = tmpl.replace(/^\\{\\{/, '')\n  tmpl = tmpl.replace(/\\}\\}$/, '')\n  return tmpl\n}\nexport default strip\n", "//normalize template names\nconst fmtName = function (name) {\n  name = (name || '').trim()\n  name = name.toLowerCase()\n  name = name.replace(/_/g, ' ')\n  return name\n}\nexport default fmtName\n", "/**\n * turn {{name|one|two|three}} into [name, one, two, three]\n *\n * @private\n * @param {string} tmpl the template text\n * @returns {string[]} a array containing all the split parameters\n */\nconst pipeSplitter = function (tmpl) {\n  //start with a naive '|' split\n  let arr = tmpl.split(/\\n?\\|/)\n  //we've split by '|', which is pretty lame\n  //look for broken-up links and fix them :/\n  arr.forEach((a, i) => {\n    if (a === null) {\n      return\n    }\n    //has '[[' but no ']]'\n    //has equal number of opening and closing tags. handle nested case '[[[[' ']]'\n    if (\n      /\\[\\[[^\\]]+$/.test(a) ||\n      /\\{\\{[^}]+$/.test(a) ||\n      a.split('{{').length !== a.split('}}').length ||\n      a.split('[[').length !== a.split(']]').length\n    ) {\n      arr[i + 1] = arr[i] + '|' + arr[i + 1]\n      arr[i] = null\n    }\n  })\n  //cleanup any mistakes we've made\n  arr = arr.filter((a) => a !== null)\n  arr = arr.map((a) => (a || '').trim())\n\n  //remove empty fields, only at the end:\n  for (let i = arr.length - 1; i >= 0; i -= 1) {\n    if (arr[i] === '') {\n      arr.pop()\n    }\n    break\n  }\n  return arr\n}\nexport default pipeSplitter\n", "//every value in {{tmpl|a|b|c}} needs a name\n//here we come up with names for them\nconst hasKey = /^[\\p{Letter}0-9._/\\- '()\\t]+=/iu\n\n//templates with these properties are asking for trouble\nconst reserved = {\n  template: true,\n  list: true,\n  prototype: true,\n}\n\n/**\n * @typedef parseKeyReturn\n * @property {string} val\n * @property {string} key\n */\n\n/**\n * turn 'key=val' into {key:key, val:val}\n *\n * @param {string} str the string that will be parsed\n * @returns {parseKeyReturn} the spit string\n */\nconst parseKey = function (str) {\n  let parts = str.split('=')\n  let key = parts[0] || ''\n  key = key.toLowerCase().trim()\n  let val = parts.slice(1).join('=')\n  //don't let it be called 'template'..\n  if (reserved.hasOwnProperty(key)) {\n    key = '_' + key\n  }\n  return {\n    key: key,\n    val: val.trim(),\n  }\n}\n\n/**\n * turn [a, b=v, c] into {'1':a, b:v, '2':c}\n *\n * @private\n * @param {string[]} arr the array of parameters\n * @param {string[]} [order] the order in which the parameters are returned\n * @returns {object} and object with the names as the keys and the values as the values\n */\nconst keyMaker = function (arr, order) {\n  let keyIndex = 0\n  return arr.reduce((h, str = '') => {\n    str = str.trim()\n\n    //support named keys - 'foo=bar'\n    if (hasKey.test(str) === true) {\n      let res = parseKey(str)\n      if (res.key) {\n        // don't overwrite if empty\n        if (h[res.key] && !res.val) {\n          return h\n        }\n        h[res.key] = res.val\n        return h\n      }\n    }\n\n    //if the current index is present in the order array then we have a name for the key\n    if (order && order[keyIndex]) {\n      let key = order[keyIndex]\n      h[key] = str\n    } else {\n      h.list = h.list || []\n      h.list.push(str)\n    }\n\n    keyIndex += 1\n    return h\n  }, {})\n}\n\nexport default keyMaker\n", "const whoCares = {\n  classname: true,\n  style: true,\n  align: true,\n  margin: true,\n  left: true,\n  break: true,\n  boxsize: true,\n  framestyle: true,\n  item_style: true,\n  collapsible: true,\n  list_style_type: true,\n  'list-style-type': true,\n  colwidth: true,\n}\n\n//remove wiki-cruft & some styling info from templates\nconst cleanup = function (obj) {\n  Object.keys(obj).forEach((k) => {\n    if (whoCares[k.toLowerCase()] === true) {\n      delete obj[k]\n    }\n    //remove empty values, too\n    if (obj[k] === null || obj[k] === '') {\n      delete obj[k]\n    }\n  })\n  return obj\n}\nexport default cleanup\n", "//remove the top/bottom off the template\nimport strip from './_strip.js'\nimport fmtName from './_fmtName.js'\nimport { fromText as parseSentence } from '../../../04-sentence/index.js'\nimport pipeSplitter from './01-pipe-splitter.js'\nimport keyMaker from './02-keyMaker.js'\nimport cleanup from './03-cleanup.js'\n\n/**\n * most templates just want plaintext...\n *\n * @private\n * @param {str} str\n * @param {'json' | 'raw'} [fmt]\n * @returns {string} text\n */\nconst makeFormat = function (str, fmt) {\n  let s = parseSentence(str)\n  //support various output formats\n  if (fmt === 'json') {\n    return s.json()\n  } else if (fmt === 'raw') {\n    return s\n  }\n  //default to flat text\n  return s.text()\n}\n\n/**\n * parses the parameters of a template to a usable format\n *\n * @private\n * @param {string} tmpl the template text\n * @param {string[]} [order] the order in which the parameters are returned\n * @param {'json' | 'raw'} [fmt] whether you wan to parse the text of the template the raw object or just the text\n * @returns {object} the parameters of the template in a usable format\n */\nconst parser = function (tmpl, order = [], fmt) {\n  //remove {{}}'s and split based on pipes\n  tmpl = strip(tmpl || '')\n  let arr = pipeSplitter(tmpl)\n  //get template name\n  let name = arr.shift()\n\n  //name each value\n  let obj = keyMaker(arr, order)\n\n  //remove wiki-junk\n  obj = cleanup(obj)\n\n  //is this a infobox/reference?\n  //let known = isKnown(obj);\n\n  //using '|1=content' is an escaping-thing..\n  if (obj['1'] && order[0] && obj.hasOwnProperty(order[0]) === false) {\n    //move it over..\n    obj[order[0]] = obj['1']\n    delete obj['1']\n  }\n\n  Object.keys(obj).forEach((k) => {\n    if (k === 'list') {\n      obj[k] = obj[k].map((v) => makeFormat(v, fmt))\n      return\n    }\n    obj[k] = makeFormat(obj[k], fmt)\n  })\n\n  //add the template name\n  if (name) {\n    obj.template = fmtName(name)\n  }\n  return obj\n}\nexport default parser\n", "const opener = '['\nconst closer = ']'\n\n/**\n *\n * find all the pairs of '[[...[[..]]...]]' in the text\n * used to properly root out recursive template calls, [[.. [[...]] ]]\n * basically just adds open tags, and subtracts closing tags\n *\n * @private\n * @param {string} text the text in which is searched in\n * @returns {string[]} all the links in the text\n */\nfunction nested_find(text) {\n  let out = []\n  let last = []\n  const chars = text.split('')\n  let open = 0\n  for (let i = 0; i < chars.length; i++) {\n    const c = text[i]\n    //increment open tag\n    if (c === opener) {\n      open += 1\n    }\n    //decrement close tag\n    else if (c === closer) {\n      open -= 1\n      if (open < 0) {\n        open = 0\n      }\n    } else if (last.length === 0) {\n      //If we're not inside of a pair of delimiters, we can discard the current letter.\n      //The return of this function is only used to extract images.\n      continue\n    }\n\n    last.push(c)\n    if (open === 0 && last.length > 0) {\n      //first, fix botched parse\n      let open_count = 0\n      let close_count = 0\n      for (let j = 0; j < last.length; j++) {\n        if (last[j] === opener) {\n          open_count++\n        } else if (last[j] === closer) {\n          close_count++\n        }\n      }\n      //is it botched?\n      if (open_count > close_count) {\n        last.push(closer)\n      }\n      //looks good, keep it\n      out.push(last.join(''))\n      last = []\n    }\n  }\n  return out\n}\n\nexport default nested_find\n", "import { images } from '../_data/i18n.js'\nimport Image from './Image.js'\nimport parseTemplate from '../template/parse/toJSON/index.js'\nimport { fromText as parseSentence } from '../04-sentence/index.js'\nimport nested_find from './nested_find.js'\n//regexes:\nconst isFile = new RegExp('(' + images.join('|') + '):', 'i')\nlet fileNames = `(${images.join('|')})`\nconst file_reg = new RegExp(fileNames + ':(.+?)[\\\\||\\\\]]', 'iu')\nconst linkToFile = /^\\[\\[:/\n\n//style directives for Wikipedia:Extended_image_syntax\nconst imgLayouts = {\n  thumb: true,\n  thumbnail: true,\n  border: true,\n  right: true,\n  left: true,\n  center: true,\n  top: true,\n  bottom: true,\n  none: true,\n  upright: true,\n  baseline: true,\n  middle: true,\n  sub: true,\n  super: true,\n}\n\n//images are usually [[image:my_pic.jpg]]\nconst oneImage = function (img, doc) {\n  let m = img.match(file_reg)\n  if (m === null || !m[2]) {\n    return null\n  }\n  if (linkToFile.test(img)) {\n    return null\n  }\n  let file = `${m[1]}:${m[2] || ''}`\n  if (file) {\n    let obj = {\n      file: file,\n      lang: doc._lang,\n      domain: doc._domain,\n      wiki: img,\n      pluginData: {}\n    }\n    //try to grab other metadata, too\n    img = img.replace(/^\\[\\[/, '')\n    img = img.replace(/\\]\\]$/, '')\n\n    //https://en.wikipedia.org/wiki/Wikipedia:Extended_image_syntax\n    //- [[File:Name|Type|Border|Location|Alignment|Size|link=Link|alt=Alt|lang=Langtag|Caption]]\n    let imgData = parseTemplate(img)\n    let arr = imgData.list || []\n    //parse-out alt text, if explicitly given\n    if (imgData.alt) {\n      obj.alt = imgData.alt\n    }\n    //remove 'thumb' and things\n    arr = arr.filter((str) => imgLayouts.hasOwnProperty(str) === false)\n    if (arr[arr.length - 1]) {\n      obj.caption = parseSentence(arr[arr.length - 1])\n    }\n    return new Image(obj)\n  }\n  return null\n}\n\nconst parseImages = function (paragraph, doc) {\n  let wiki = paragraph.wiki\n  //parse+remove scary '[[ [[]] ]]' stuff\n  let matches = nested_find(wiki)\n  matches.forEach(function (s) {\n    if (isFile.test(s) === true) {\n      paragraph.images = paragraph.images || []\n      let img = oneImage(s, doc)\n      if (img) {\n        paragraph.images.push(img)\n        wiki = wiki.replace(s, '')\n      }\n    }\n  })\n  paragraph.wiki = wiki\n}\nexport default parseImages\n", "import setDefaults from '../_lib/setDefaults.js'\nconst defaults = {}\n\nconst toText = (list, options) => {\n  return list\n    .map((s) => {\n      let str = s.text(options)\n      return ' * ' + str\n    })\n    .join('\\n')\n}\n\nconst List = function (data, wiki = '') {\n  Object.defineProperty(this, 'data', {\n    enumerable: false,\n    value: data,\n  })\n  Object.defineProperty(this, 'wiki', {\n    enumerable: false,\n    value: wiki,\n  })\n}\n\nconst methods = {\n  lines() {\n    return this.data\n  },\n  links(clue) {\n    let links = []\n    this.lines().forEach((s) => {\n      links = links.concat(s.links())\n    })\n    if (typeof clue === 'string') {\n      //grab a link like .links('Fortnight')\n      clue = clue.charAt(0).toUpperCase() + clue.substring(1) //titlecase it\n      let link = links.find((o) => o.page() === clue)\n      return link === undefined ? [] : [link]\n    }\n    return links\n  },\n  json(options) {\n    options = setDefaults(options, defaults)\n    return this.lines().map((s) => s.json(options))\n  },\n  text() {\n    return toText(this.data)\n  },\n  wikitext() {\n    return this.wiki || ''\n  },\n}\n\nObject.keys(methods).forEach((k) => {\n  List.prototype[k] = methods[k]\n})\nexport default List\n", "import List from './List.js'\nimport { fromText as parseSentence } from '../04-sentence/index.js'\nconst list_reg = /^[#*:;|]+/\nconst bullet_reg = /^\\*+[^:,|]{4}/\nconst number_reg = /^ ?#[^:,|]{4}/\nconst has_word = /[\\p{Letter}_0-9\\]}]/iu\n\n// does it start with a bullet point or something?\nconst isList = function (line) {\n  return list_reg.test(line) || bullet_reg.test(line) || number_reg.test(line)\n}\n\n//make bullets/numbers into human-readable *'s\nconst cleanList = function (list) {\n  let number = 1\n  list = list.filter((l) => l)\n  for (let i = 0; i < list.length; i++) {\n    let line = list[i]\n    //add # numberings formatting\n    if (line.match(number_reg)) {\n      line = line.replace(/^ ?#*/, number + ') ')\n      line = line + '\\n'\n      number += 1\n    } else if (line.match(list_reg)) {\n      number = 1\n      line = line.replace(list_reg, '')\n    }\n    list[i] = parseSentence(line)\n  }\n  return list\n}\n\nconst grabList = function (lines, i) {\n  let sub = []\n  for (let o = i; o < lines.length; o++) {\n    if (isList(lines[o])) {\n      sub.push(lines[o])\n    } else {\n      break\n    }\n  }\n  sub = sub.filter((a) => a && has_word.test(a))\n  sub = cleanList(sub)\n  return sub\n}\n\nconst parseList = function (paragraph) {\n  let wiki = paragraph.wiki\n  let lines = wiki.split(/\\n/g)\n  let lists = []\n  let theRest = []\n  for (let i = 0; i < lines.length; i++) {\n    if (isList(lines[i])) {\n      let sub = grabList(lines, i)\n      if (sub.length > 0) {\n        lists.push(sub)\n        i += sub.length - 1\n      }\n    } else {\n      theRest.push(lines[i])\n    }\n  }\n  paragraph.lists = lists.map((l) => new List(l, wiki))\n  paragraph.wiki = theRest.join('\\n')\n}\nexport default parseList\n", "import Paragraph from './Paragraph.js'\nimport { byParagraph as parseSentences } from '../04-sentence/index.js'\n\nconst twoNewLines = /\\r?\\n\\r?\\n/\nimport parseImage from '../image/index.js'\nimport parseList from '../list/index.js'\n\nconst parseParagraphs = function (section, doc) {\n  let wiki = section._wiki\n  let paragraphs = wiki.split(twoNewLines)\n  //don't create empty paragraphs\n  paragraphs = paragraphs.filter((p) => p && p.trim().length > 0)\n  paragraphs = paragraphs.map((str) => {\n    let paragraph = {\n      wiki: str,\n      lists: [],\n      sentences: [],\n      images: [],\n    }\n    //parse the lists\n    parseList(paragraph)\n    //parse images\n    parseImage(paragraph, doc)\n    //parse the sentences\n    parseSentences(paragraph)\n    return new Paragraph(paragraph)\n  })\n  section._wiki = wiki\n  section._paragraphs = paragraphs\n}\nexport default parseParagraphs\n", "const open = '{'\nconst close = '}'\n\n//grab all first-level recursions of '{{...}}'\nconst findFlat = function (wiki) {\n  let depth = 0\n  let list = []\n  let carry = []\n  for (let i = wiki.indexOf(open); i !== -1 && i < wiki.length; depth > 0 ? i++ : (i = wiki.indexOf(open, i + 1))) {\n    let c = wiki[i]\n    //open it\n    if (c === open) {\n      depth += 1\n    }\n    //close it\n    if (depth > 0) {\n      if (c === close) {\n        depth -= 1\n        if (depth === 0) {\n          carry.push(c)\n          let tmpl = carry.join('')\n          carry = []\n          //last check\n          if (/\\{\\{/.test(tmpl) && /\\}\\}/.test(tmpl)) {\n            list.push(tmpl)\n          }\n          continue\n        }\n      }\n      //require two '{{' to open it\n      if (depth === 1 && c !== open && c !== close) {\n        depth = 0\n        carry = []\n        continue\n      }\n      carry.push(c)\n    }\n  }\n  return list\n}\nexport default findFlat\n", "import fmtName from './_fmtName.js'\n//get the name of the template\n//templates are usually '{{name|stuff}}'\nconst getName = function (tmpl) {\n  let name = null\n  //{{name|foo}}\n  if (/^\\{\\{[^\\n]+\\|/.test(tmpl)) {\n    name = (tmpl.match(/^\\{\\{(.+?)\\|/) || [])[1]\n  } else if (tmpl.indexOf('\\n') !== -1) {\n    // {{name \\n...\n    name = (tmpl.match(/^\\{\\{(.+)\\n/) || [])[1]\n  } else {\n    //{{name here}}\n    name = (tmpl.match(/^\\{\\{(.+?)\\}\\}$/) || [])[1]\n  }\n  if (name) {\n    name = name.replace(/:.*/, '')\n    name = fmtName(name)\n  }\n  return name || null\n}\nexport default getName\n", "import findFlat from './02-flat.js'\nimport getName from '../parse/toJSON/_getName.js'\nconst hasTemplate = /\\{\\{/\n\nconst parseTemplate = function (tmpl) {\n  // this is some unexplained Lua thing\n  return {\n    body: tmpl,\n    name: getName(tmpl),\n    children: [],\n  }\n}\n\nconst doEach = function (obj) {\n  // peel-off top-level\n  let wiki = obj.body.substr(2)\n  wiki = wiki.replace(/\\}\\}$/, '')\n\n  // get our child templates\n  obj.children = findFlat(wiki)\n  obj.children = obj.children.map(parseTemplate)\n\n  if (obj.children.length === 0) {\n    return obj\n  }\n  // recurse through children\n  obj.children.forEach((ch) => {\n    let inside = ch.body.substr(2)\n    if (hasTemplate.test(inside)) {\n      return doEach(ch) //keep going\n    }\n    return null\n  })\n  return obj\n}\n\n// return a nested structure of all templates\nconst findTemplates = function (wiki) {\n  let list = findFlat(wiki)\n  list = list.map(parseTemplate)\n  list = list.map(doEach)\n  return list\n}\n\nexport default findTemplates\n", "//we explicitly ignore these, because they sometimes have resolve some data\nconst list = [\n  //https://en.wikipedia.org/wiki/category:templates_with_no_visible_output\n  'anchor',\n  'defaultsort',\n  'use list-defined references',\n  'void',\n  //https://en.wikipedia.org/wiki/Category:Protection_templates\n  'pp',\n  'pp-move-indef',\n  'pp-semi-indef',\n  'pp-vandalism',\n  //https://en.wikipedia.org/wiki/Template:R\n  'r',\n  //out-of-scope still - https://en.wikipedia.org/wiki/Template:Tag\n  '#tag',\n  //https://en.wikipedia.org/wiki/Template:Navboxes\n  // 'navboxes',\n  // 'reflist',\n  // 'ref-list',\n  'div col',\n  // 'authority control',\n  //https://en.wikipedia.org/wiki/Template:Citation_needed\n  // 'better source',\n  // 'citation needed',\n  // 'clarify',\n  // 'cite quote',\n  // 'dead link',\n  // 'by whom',\n  // 'dubious',\n  // 'when',\n  // 'who',\n  // 'quantify',\n  // 'refimprove',\n  // 'weasel inline',\n  //https://en.wikipedia.org/wiki/Template:End\n  'pope list end',\n  'shipwreck list end',\n  'starbox end',\n  'end box',\n  'end',\n  's-end',\n]\nconst ignore = list.reduce((h, str) => {\n  h[str] = true\n  return h\n}, {})\nexport default ignore\n", "export default {\n  'gnf protein box': true,\n  'automatic taxobox': true,\n  'chembox ': true,\n  editnotice: true,\n  geobox: true,\n  hybridbox: true,\n  ichnobox: true,\n  infraspeciesbox: true,\n  mycomorphbox: true,\n  oobox: true,\n  'paraphyletic group': true,\n  speciesbox: true,\n  subspeciesbox: true,\n  'starbox short': true,\n  taxobox: true,\n  nhlteamseason: true,\n  'asian games bid': true,\n  'canadian federal election results': true,\n  'dc thomson comic strip': true,\n  'daytona 24 races': true,\n  edencharacter: true,\n  'moldova national football team results': true,\n  samurai: true,\n  protein: true,\n  'sheet authority': true,\n  'order-of-approx': true,\n  'bacterial labs': true,\n  'medical resources': true,\n  ordination: true,\n  'hockey team coach': true,\n  'hockey team gm': true,\n  'pro hockey team': true,\n  'hockey team player': true,\n  'hockey team start': true,\n  mlbbioret: true,\n}\n", "import infoboxList from '../../infobox/_infoboxes.js'\nimport { infoboxes } from '../../_data/i18n.js'\nconst i18nReg = new RegExp('^(subst.)?(' + infoboxes.join('|') + ')(?=:| |\\n|$)', 'i')\ninfoboxes.forEach(name => {\n  infoboxList[name] = true\n})\n\n//some looser ones\nconst startReg = /^infobox /i\nconst endReg = / infobox$/i\nconst yearIn = /^year in [A-Z]/i\n\n//some known ones from\n//https://en.wikipedia.org/wiki/Wikipedia:List_of_infoboxes\n//and https://en.wikipedia.org/wiki/Category:Infobox_templates\nconst isInfobox = function (name) {\n  //known\n  if (infoboxList.hasOwnProperty(name) === true) {\n    return true\n  }\n  if (i18nReg.test(name)) {\n    return true\n  }\n  if (startReg.test(name) || endReg.test(name)) {\n    return true\n  }\n  //these are also infoboxes: 'Year in Belarus'\n  if (yearIn.test(name)) {\n    return true\n  }\n  return false\n}\n\n//turns template data into good infobox data\nconst fmtInfobox = function (obj = {}) {\n  let m = obj.template.match(i18nReg)\n  let type = obj.template\n  if (m && m[0]) {\n    type = type.replace(m[0], '')\n  }\n  type = type.trim()\n  let infobox = {\n    template: 'infobox',\n    type: type,\n    data: obj,\n  }\n  delete infobox.data.template //already have this.\n  delete infobox.data.list //just in case!\n  return infobox\n}\n\nexport { isInfobox, fmtInfobox }\n", "import languages from '../../_data/languages.js'\n\n//aliases\nlet aliases = {\n  imdb: 'imdb name',\n  'imdb episodes': 'imdb episode',\n  localday: 'currentday',\n  localdayname: 'currentdayname',\n  localyear: 'currentyear',\n  'birth date based on age at death': 'birth based on age as of date',\n  'bare anchored list': 'anchored list',\n  cvt: 'convert',\n  cricon: 'flagicon',\n  sfrac: 'frac',\n  sqrt: 'radic',\n  'unreferenced section': 'unreferenced',\n  redir: 'redirect',\n  sisterlinks: 'sister project links',\n  'main article': 'main',\n  'by': 'baseball year',\n  'aldsy': 'alds year',\n  'nldsy': 'nlds year',\n  //not perfect..\n  'str rep': 'replace',\n  'ushr2': 'ushr',\n  'stn': 'station',\n  'metrod': 'metro',\n  'fw': 'ferry',\n  'rws': 'stnlnk',\n  sclass2: 'sclass',\n  under: 'underline',\n  brackets: 'bracket',\n  raise: 'lower'\n}\n\n//multiple aliases\nlet multi = {\n  date: ['byline', 'dateline'], //wikinews\n  citation: ['cite', 'source', 'source-pr', 'source-science'],\n\n  'no spam': ['email', '@', 'no spam blue'],\n\n  'lrt station': ['lrt', 'lrts'],\n  'mrt station': ['mrt', 'mrts'],\n\n  flagcountry: ['cr', 'cr-rt'],\n\n  trunc: ['str left', 'str crop'],\n\n  percentage: ['pct', 'percentage'],\n\n  rnd: ['rndfrac', 'rndnear'],\n\n  abbr: ['tooltip', 'abbrv', 'define'],\n\n  sfn: ['sfnref', 'harvid', 'harvnb'],\n\n  'birth date and age': ['death date and age', 'bda'],\n\n  currentmonth: ['localmonth', 'currentmonthname', 'currentmonthabbrev'],\n\n  currency: ['monnaie', 'unit\u00E9', 'nombre', 'nb', 'iso4217'],\n\n  coord: ['coor', 'coor title dms', 'coor title dec', 'coor dms', 'coor dm', 'coor dec'],\n\n  'columns-list': ['cmn', 'col-list', 'columnslist', 'collist'],\n\n  nihongo: ['nihongo2', 'nihongo3', 'nihongo-s', 'nihongo foot'],\n\n  plainlist: ['flatlist', 'plain list'],\n\n  'winning percentage': ['winpct', 'winperc'],\n\n  'collapsible list': [\n    'nblist',\n    'nonbulleted list',\n    'ubl',\n    'ublist',\n    'ubt',\n    'unbullet',\n    'unbulleted list',\n    'unbulleted',\n    'unbulletedlist',\n    'vunblist'\n  ],\n\n  'election box begin': [\n    'election box begin no change',\n    'election box begin no party',\n    'election box begin no party no change',\n    'election box inline begin',\n    'election box inline begin no change',\n  ],\n\n  'election box candidate': [\n    'election box candidate for alliance',\n    'election box candidate minor party',\n    'election box candidate no party link no change',\n    'election box candidate with party link',\n    'election box candidate with party link coalition 1918',\n    'election box candidate with party link no change',\n    'election box inline candidate',\n    'election box inline candidate no change',\n    'election box inline candidate with party link',\n    'election box inline candidate with party link no change',\n    'election box inline incumbent',\n  ],\n\n  '4teambracket': [\n    '2teambracket',\n    '4team2elimbracket',\n    '8teambracket',\n    '16teambracket',\n    '32teambracket',\n    '4roundbracket-byes',\n    'cwsbracket',\n    'nhlbracket',\n    'nhlbracket-reseed',\n    '4teambracket-nhl',\n    '4teambracket-ncaa',\n    '4teambracket-mma',\n    '4teambracket-mlb',\n    '16teambracket-two-reseeds',\n    '8teambracket-nhl',\n    '8teambracket-mlb',\n    '8teambracket-ncaa',\n    '8teambracket-afc',\n    '8teambracket-afl',\n    '8teambracket-tennis3',\n    '8teambracket-tennis5',\n    '16teambracket-nhl',\n    '16teambracket-nhl divisional',\n    '16teambracket-nhl-reseed',\n    '16teambracket-nba',\n    '16teambracket-swtc',\n    '16teambracket-afc',\n    '16teambracket-tennis3',\n    '16teambracket-tennis5',\n  ],\n\n  start: [\n    'end',\n    'birth',\n    'death',\n    'start date',\n    'end date',\n    'birth date',\n    'death date',\n    'start date and age',\n    'end date and age',\n    'dob',\n  ],\n\n  'start-date': [\n    'end-date',\n    'birth-date',\n    'death-date',\n    'birth-date and age',\n    'birth-date and given age',\n    'death-date and age',\n    'death-date and given age',\n  ],\n\n  tl: [\n    'lts',\n    't',\n    'tfd links',\n    'tiw',\n    'tltt',\n    'tetl',\n    'tsetl',\n    'ti',\n    'tic',\n    'tiw',\n    'tlt',\n    'ttl',\n    'twlh',\n    'tl2',\n    'tlu',\n    'demo',\n    'xpd',\n    'para',\n    'elc',\n    'xtag',\n    'mli',\n    'mlix',\n    'url', //https://en.wikipedia.org/wiki/Template:URL\n  ],\n\n  // https://en.wikipedia.org/wiki/Template:Done/See_also\n  done: [\n    'resolved mark large',\n    'implemented',\n    'pimplemented',\n    'resolved mark',\n    'accepted',\n    'agree',\n    'approved',\n    'checked2',\n    'verified',\n    'conditional yes',\n    'confirmed',\n    'confirmed-nc',\n    'tallyho',\n    'tick',\n    'helped',\n    'doneu|example',\n    'edited2',\n    'donetask',\n    'unprod',\n    'autp',\n    'responded',\n    'sure',\n    'merge done',\n    'marked',\n    'pass',\n    'aye',\n    'yes check',\n    'y&',\n    'yeac',\n    'yeag',\n  ],\n  xmark: [\n    'expired',\n    'deleted',\n    'not done',\n    'not done empty request',\n    'not done unclear',\n    'not done not likely',\n    'stale-small',\n    'smallrejected',\n    'x mark',\n    'nay',\n    'no mark',\n    'not done-t',\n    'fail',\n    'n&',\n    'x mark-n',\n    'xed box',\n    'cancelled',\n    'deleted-image',\n    'already declined',\n    'opblocked',\n    'user-blocked',\n    'notabug',\n    'notfixed',\n    'won\\'t fix',\n    'withdraw',\n    'nojoy',\n    'unrelated',\n    'off-topic talk',\n    'nayc',\n    'nayg',\n  ],\n  checked: [\n    'already done',\n    'resolved1',\n    'check mark-n',\n    'checked box',\n  ],\n  // https://en.wikipedia.org/wiki/Template:Ferry\n  'station link': [\n    'amtk',\n    'cta',\n    'bts',\n    'mnrr',\n    'mtams',\n    'munis',\n    'njts',\n    'scax',\n    'wmata',\n    'rwsa',\n  ],\n  // 'br separated entries': [\n  //   'br list',\n  //   'br-separated entries',\n  //   'br separated entries',\n  // ]\n}\n\n// - other languages -\n// Polish, {{IPAc-pl}}\t{{IPAc-pl|'|sz|cz|e|\u0107|i|n}} \u2192 [\u02C8\u0282t\u0361\u0282\u025Bt\u0361\u0255in]\n// Portuguese, {{IPAc-pt}}\t{{IPAc-pt|p|o|<|r|t|u|'|g|a|l|lang=pt}} and {{IPAc-pt|b|r|a|'|s|i|l|lang=br}} \u2192 [pu\u027Etu\u02C8\u0263a\u026B] and [b\u027Ea\u02C8siw]\nObject.keys(languages).forEach((lang) => {\n  aliases['ipa-' + lang] = 'ipa'\n  aliases['ipac-' + lang] = 'ipac'\n})\n\n// add each alias in\nObject.keys(multi).forEach((k) => {\n  multi[k].forEach((str) => {\n    aliases[str] = k\n  })\n})\n\nexport default aliases\n", "export default {\n  '\u00B7': '\u00B7',\n  dot: '\u00B7',\n  middot: '\u00B7',\n  '\u2022': ' \u2022 ',\n  ',': ',',\n  '=': '=',\n  '1/2': '1\u20442',\n  '1/3': '1\u20443',\n  '2/3': '2\u20443',\n  '1/4': '1\u20444',\n  '3/4': '3\u20444',\n  '\u2013': '\u2013',\n  ndash: '\u2013',\n  'en dash': '\u2013',\n  'spaced ndash': ' \u2013 ',\n  '\u2014': '\u2014',\n  mdash: '\u2014',\n  spd: ' \u2013 ',\n  'em dash': '\u2014',\n  'number sign': '#',\n  'hash-tag': '#',\n  ibeam: 'I',\n  '&': '&',\n  ';': ';',\n  ampersand: '&',\n  'dagger': '\u2020',\n  'double-dagger': '\u2021',\n  snds: ' \u2013 ',\n  snd: ' \u2013 ',\n  '^': ' ',\n  '!': '|',\n  \"'\": `'`,\n  '\\\\': ' /',\n  '`': '`',\n  // bracket: '[',\n  '[': '[',\n  '*': '*',\n  asterisk: '*',\n  'long dash': '\u2014\u2014\u2014',\n  clear: '\\n\\n',\n  'h.': '\u1E25',\n  profit: '\u25B2',\n  loss: '\u25BC',\n  gain: '\u25B2',\n  ell: '\u2113',\n  '1~': '~',\n  '2~': '~~',\n  '3~': '~~~',\n  '4~': '~~~~',\n  '5~': '~~~~~',\n  // some emoji replacements\n  goldmedal: '\uD83E\uDD47',\n  silvermedal: '\uD83E\uDD48',\n  bronzemedal: '\uD83E\uDD49',\n  done: '\u2705',\n  xmark: '\u274C',\n  checked: '\u2714\uFE0F',\n  'thumbs up': '\uD83D\uDC4D',\n  'thumbs down': '\uD83D\uDC4E',\n  'minusplus': '\u2213',\n  'plusminus': '\u00B1'\n}\n", "//grab the first, second or third pipe..\nlet templates = {\n  p1: 0,\n  p2: 1,\n  p3: 2,\n  resize: 1, //https://en.wikipedia.org/wiki/'Resize',\n  lang: 1,\n  'rtl-lang': 1,\n  'line-height': 1,\n  l: 2,\n  h: 1, //https://en.wikipedia.org/wiki/'Hover_title',\n  sort: 1, //https://en.wikipedia.org/wiki/'Sort',\n}\n\n//templates that we simply grab their insides as plaintext\nlet zeros = [\n  'defn',\n  'lino', //https://en.wikipedia.org/wiki/'Linum',\n  'finedetail', //https://en.wikipedia.org/wiki/'Finedetail',\n  'nobold',\n  'noitalic',\n  'nocaps',\n  'vanchor', //https://en.wikipedia.org/wiki/'Visible_anchor',\n  'rnd',\n  'date', //Explictly-set dates - https://en.wikipedia.org/wiki/'Date',\n  'taste',\n  'monthname',\n  'baseball secondary style',\n  'nowrap',\n  'nobr',\n  'big',\n  'cquote',\n  'pull quote',\n  'smaller',\n  'midsize',\n  'larger',\n  'big',\n  'kbd',\n  'bigger',\n  'large',\n  'mono',\n  'strongbad',\n  'stronggood',\n  'huge',\n  'xt',\n  'xt2',\n  '!xt',\n  'xtn',\n  'xtd',\n  'dc',\n  'dcr',\n  'mxt',\n  '!mxt',\n  'mxtn',\n  'mxtd',\n  'bxt',\n  '!bxt',\n  'bxtn',\n  'bxtd',\n  'delink', //https://en.wikipedia.org/wiki/'Delink',\n  'pre',\n  'var',\n  'mvar',\n  'pre2',\n  'code',\n  'char',\n  'angle bracket',\n  'angbr',\n  'symb',\n  'dabsearch',\n  'key press', //needs work - https://en.m.wikipedia.org/wiki/'Key_press',\n  // these should escape certain chars\n  'nowiki',\n  'nowiki2',\n  'unstrip',\n  'unstripnowiki',\n  'plain text',\n  'make code',\n  'killmarkers',\n  'longitem',\n  'longlink',\n  'strikethrough',\n  'underline',\n  'uuline',\n  'not a typo',\n  'text',\n  'var serif',\n  'double underline',\n  'nee',\n  'ne',\n  'left',\n  'right',\n  'center',\n  'centered',\n  'justify',\n  'smalldiv',\n  'bold div',\n  'monodiv',\n  'italic div',\n  'bigdiv',\n  'strikethroughdiv',\n  'strikethrough color',\n  'pbpe'//pt\n]\nzeros.forEach((k) => {\n  templates[k] = 0\n})\n\n\nexport default templates\n", "import parse from '../../parse/toJSON/index.js'\nlet templates = {}\n// these templates all have a predictable pattern\n// {{HSC|Ship Name|ID}} -> [[HSC Name (id)]]\nlet arr = [\n  // ships\n  'mv',\n  'm/v',\n  'gts',\n  'hsc',\n  'ms',\n  'm/s',\n  'my',\n  'm/y',\n  'ps',\n  'rms',\n  'rv',\n  'r/v',\n  'sb',\n  'ss',\n  's/s',\n  'sv',\n  's/v',\n  'sy',\n  's/y',\n  'tss',\n  'ans',\n  'hmas',\n  'hmbs',\n  'bns',\n  'hmcs',\n  'ccgs',\n  'arc',\n  'hdms',\n  'bae',\n  'ens',\n  'eml',\n  'rfns',\n  'fns',\n  'hs',\n  'sms',\n  'smu',\n  'gs',\n  'icgv',\n  'ins',\n  'kri',\n  'l\u00E9',\n  'jsub',\n  'jds',\n  'js',\n  'hnlms',\n  'hmnzs',\n  'nns',\n  'hnoms',\n  'hmpngs',\n  'bap',\n  'rps',\n  'brp',\n  'orp',\n  'nrp',\n  'nms',\n  'rss',\n  'sas',\n  'hmsas',\n  'roks',\n  'hswms',\n  'htms',\n  'tcg',\n  'hms',\n  'hmt',\n  'rfaux',\n  'usat',\n  'uscgc',\n  'usns',\n  'usrc',\n  'uss',\n  'usav'\n]\n\narr.forEach(word => {\n  templates[word] = (tmpl) => {\n    let { name, id } = parse(tmpl, ['name', 'id'])\n    return id ? `[[${word.toUpperCase()} ${name} (${id})]]` : `[[${word.toUpperCase()} ${name}]]`\n  }\n})\nexport default templates", "import languages from '../../_data/languages.js'\n\n//simply num/denom * 100\nconst percentage = function (obj) {\n  if (!obj.numerator && !obj.denominator) {\n    return null\n  }\n  let perc = Number(obj.numerator) / Number(obj.denominator)\n  perc *= 100\n  let dec = Number(obj.decimals)\n  if (isNaN(dec)) {\n    dec = 1\n  }\n  return parseInt(perc, 10)\n}\n\nconst toNumber = function (str = '') {\n  if (typeof str === 'number') {\n    return str\n  }\n  str = str.replace(/,/g, '')\n  str = str.replace(/\u2212/g, '-')\n  let num = Number(str)\n  if (isNaN(num)) {\n    return str\n  }\n  return num\n}\n\nconst getLang = function (name) {\n  //grab the language from the template name - 'ipa-de'\n  let lang = name.match(/ipac?-(.+)/)\n  if (lang !== null) {\n    if (languages.hasOwnProperty(lang[1]) === true) {\n      return languages[lang[1]].english_title\n    }\n    return lang[1]\n  }\n  return null\n}\n\nconst titlecase = (str) => {\n  return str.charAt(0).toUpperCase() + str.substring(1)\n}\n\nconst toOrdinal = function (i) {\n  let j = i % 10\n  let k = i % 100\n  if (j === 1 && k !== 11) {\n    return i + 'st'\n  }\n  if (j === 2 && k !== 12) {\n    return i + 'nd'\n  }\n  if (j === 3 && k !== 13) {\n    return i + 'rd'\n  }\n  return i + 'th'\n}\n\nconst sisterProjects = {\n  wikt: 'wiktionary',\n  commons: 'commons',\n  c: 'commons',\n  commonscat: 'commonscat',\n  n: 'wikinews',\n  q: 'wikiquote',\n  s: 'wikisource',\n  a: 'wikiauthor',\n  b: 'wikibooks',\n  voy: 'wikivoyage',\n  v: 'wikiversity',\n  d: 'wikidata',\n  species: 'wikispecies',\n  m: 'meta',\n  mw: 'mediawiki',\n}\n\nexport {\n  titlecase,\n  sisterProjects,\n  getLang,\n  toOrdinal,\n  percentage,\n  toNumber,\n}\n", "import parse from '../../parse/toJSON/index.js'\nimport strip from '../../parse/toJSON/_strip.js'\nimport { titlecase, percentage, toOrdinal } from '../_lib.js'\nexport default {\n  //https://en.wikipedia.org/wiki/Template:Ra\n  ra: (tmpl) => {\n    let obj = parse(tmpl, ['hours', 'minutes', 'seconds'])\n    return [obj.hours || 0, obj.minutes || 0, obj.seconds || 0].join(':')\n  },\n\n  //https://en.wikipedia.org/wiki/Template:Deg2HMS\n  deg2hms: (tmpl) => {\n    //this template should do the conversion\n    let obj = parse(tmpl, ['degrees'])\n    return (obj.degrees || '') + '\u00B0'\n  },\n\n  hms2deg: (tmpl) => {\n    //this template should do the conversion too\n    let obj = parse(tmpl, ['hours', 'minutes', 'seconds'])\n    return [obj.hours || 0, obj.minutes || 0, obj.seconds || 0].join(':')\n  },\n\n  decdeg: (tmpl) => {\n    //this template should do the conversion too\n    let obj = parse(tmpl, ['deg', 'min', 'sec', 'hem', 'rnd'])\n    return (obj.deg || obj.degrees) + '\u00B0'\n  },\n  //https://en.wikipedia.org/wiki/Template:Sortname\n  sortname: (tmpl) => {\n    let obj = parse(tmpl, ['first', 'last', 'target', 'sort'])\n    let name = `${obj.first || ''} ${obj.last || ''}`\n    name = name.trim()\n    if (obj.nolink) {\n      return obj.target || name\n    }\n    if (obj.dab) {\n      name += ` (${obj.dab})`\n      if (obj.target) {\n        obj.target += ` (${obj.dab})`\n      }\n    }\n    if (obj.target) {\n      return `[[${obj.target}|${name}]]`\n    }\n    return `[[${name}]]`\n  },\n\n  // https://en.wikipedia.org/wiki/Template:First_word\n  'first word': (tmpl) => {\n    let obj = parse(tmpl, ['text'])\n    let str = obj.text || ''\n    if (obj.sep) {\n      return str.split(obj.sep)[0]\n    }\n    return str.split(' ')[0]\n  },\n\n  trunc: (tmpl) => {\n    let obj = parse(tmpl, ['str', 'len'])\n    return (obj.str || '').substr(0, obj.len)\n  },\n\n  'str mid': (tmpl) => {\n    let obj = parse(tmpl, ['str', 'start', 'end'])\n    let start = parseInt(obj.start, 10) - 1\n    let end = parseInt(obj.end, 10)\n    return obj.str.substr(start, end)\n  },\n\n  reign: (tmpl) => {\n    let obj = parse(tmpl, ['start', 'end'])\n    return `(r. ${obj.start} \u2013 ${obj.end})`\n  },\n\n  circa: (tmpl) => {\n    let { year } = parse(tmpl, ['year'])\n    return year ? `c. ${year}` : 'c. '\n  },\n\n  // https://en.wikipedia.org/wiki/Template:Decade_link\n  'decade link': (tmpl) => {\n    let { year } = parse(tmpl, ['year'])\n    return `${year}|${year}s`\n  },\n\n  // https://en.wikipedia.org/wiki/Template:Decade\n  decade: (tmpl) => {\n    let obj = parse(tmpl, ['year'])\n    let year = Number(obj.year)\n    year = Math.floor(year / 10) * 10 // round to decade\n    return `${year}s`\n  },\n\n  // https://en.wikipedia.org/wiki/Template:Century\n  century: (tmpl) => {\n    let obj = parse(tmpl, ['year'])\n    let year = parseInt(obj.year, 10)\n    year = Math.floor(year / 100) + 1\n    return `${year}`\n  },\n\n  //https://en.wikipedia.org/wiki/Template:Radic\n  radic: (tmpl) => {\n    let obj = parse(tmpl, ['after', 'before'])\n    return `${obj.before || ''}\u221A${obj.after || ''}`\n  },\n\n  'medical cases chart/row': (tmpl) => {\n    // Deprecated template; we keep it.\n    return tmpl\n  },\n\n  //https://en.wikipedia.org/wiki/Template:OldStyleDate\n  oldstyledate: (tmpl) => {\n    let obj = parse(tmpl, ['date', 'year'])\n    return obj.year ? obj.date + ' ' + obj.year : obj.date\n  },\n\n  //formatting things - https://en.wikipedia.org/wiki/Template:Nobold\n  braces: (tmpl) => {\n    let obj = parse(tmpl, ['text'])\n    let attrs = ''\n    if (obj.list) {\n      attrs = '|' + obj.list.join('|')\n    }\n    return '{{' + (obj.text || '') + attrs + '}}'\n  },\n\n  hlist: (tmpl) => {\n    let obj = parse(tmpl)\n    obj.list = obj.list || []\n    return obj.list.join(' \u00B7 ')\n  },\n\n  pagelist: (tmpl) => {\n    let arr = parse(tmpl).list || []\n    return arr.join(', ')\n  },\n\n  //actually rendering these links removes the text.\n  //https://en.wikipedia.org/wiki/Template:Catlist\n  catlist: (tmpl) => {\n    let arr = parse(tmpl).list || []\n    return arr.join(', ')\n  },\n\n  //https://en.wikipedia.org/wiki/Template:Br_separated_entries\n  'br separated entries': (tmpl) => {\n    let arr = parse(tmpl).list || []\n    return arr.join('\\n\\n')\n  },\n\n  'comma separated entries': (tmpl) => {\n    let arr = parse(tmpl).list || []\n    return arr.join(', ')\n  },\n\n  //https://en.wikipedia.org/wiki/Template:Bare_anchored_list\n  'anchored list': (tmpl) => {\n    let arr = parse(tmpl).list || []\n    arr = arr.map((str, i) => `${i + 1}. ${str}`)\n    return arr.join('\\n\\n')\n  },\n\n  'bulleted list': (tmpl) => {\n    let arr = parse(tmpl).list || []\n    arr = arr.filter((f) => f)\n    arr = arr.map((str) => '\u2022 ' + str)\n    return arr.join('\\n\\n')\n  },\n\n  //a strange, newline-based list - https://en.wikipedia.org/wiki/Template:Plainlist\n  plainlist: (tmpl) => {\n    tmpl = strip(tmpl)\n    let arr = tmpl.split('|').slice(1) //remove the title\n    arr = arr.join('|').split(/\\n ?\\* ?/) //split on newline\n    arr = arr.filter((s) => s)\n    return arr.join('\\n\\n')\n  },\n\n  //https://en.wikipedia.org/wiki/Template:Term\n  term: (tmpl) => {\n    let obj = parse(tmpl, ['term'])\n    return `${obj.term}:`\n  },\n\n  linum: (tmpl) => {\n    let { num, text } = parse(tmpl, ['num', 'text'])\n    return `${num}. ${text}`\n  },\n\n  'block indent': (tmpl) => {\n    let obj = parse(tmpl)\n    if (obj['1']) {\n      return '\\n' + obj['1'] + '\\n'\n    }\n    return ''\n  },\n\n  //https://en.wikipedia.org/wiki/Template:Lbs\n  lbs: (tmpl) => {\n    let obj = parse(tmpl, ['text'])\n    return `[[${obj.text} Lifeboat Station|${obj.text}]]`\n  },\n\n  //Foo-class\n  lbc: (tmpl) => {\n    let obj = parse(tmpl, ['text'])\n    return `[[${obj.text}-class lifeboat|${obj.text}-class]]`\n  },\n\n  lbb: (tmpl) => {\n    let obj = parse(tmpl, ['text'])\n    return `[[${obj.text}-class lifeboat|${obj.text}]]`\n  },\n\n  //https://www.mediawiki.org/wiki/Help:Magic_words#Formatting\n  '#dateformat': (tmpl) => {\n    tmpl = tmpl.replace(/:/, '|')\n    let obj = parse(tmpl, ['date', 'format'])\n    return obj.date\n  },\n\n  //https://www.mediawiki.org/wiki/Help:Magic_words#Formatting\n  lc: (tmpl) => {\n    tmpl = tmpl.replace(/:/, '|')\n    let obj = parse(tmpl, ['text'])\n    return (obj.text || '').toLowerCase()\n  },\n\n  //https://www.mediawiki.org/wiki/Help:Magic_words#Formatting\n  uc: (tmpl) => {\n    tmpl = tmpl.replace(/:/, '|')\n    let obj = parse(tmpl, ['text'])\n    return (obj.text || '').toUpperCase()\n  },\n\n  lcfirst: (tmpl) => {\n    tmpl = tmpl.replace(/:/, '|')\n    let text = parse(tmpl, ['text']).text\n    if (!text) {\n      return ''\n    }\n    return text[0].toLowerCase() + text.substr(1)\n  },\n\n  ucfirst: (tmpl) => {\n    tmpl = tmpl.replace(/:/, '|')\n    let text = parse(tmpl, ['text']).text\n    if (!text) {\n      return ''\n    }\n    return text[0].toUpperCase() + text.substr(1)\n  },\n\n  padleft: (tmpl) => {\n    tmpl = tmpl.replace(/:/, '|')\n    let obj = parse(tmpl, ['text', 'num'])\n    let text = obj.text || ''\n    return text.padStart(obj.num, obj.str || '0')\n  },\n\n  padright: (tmpl) => {\n    tmpl = tmpl.replace(/:/, '|')\n    let obj = parse(tmpl, ['text', 'num'])\n    let text = obj.text || ''\n    return text.padEnd(obj.num, obj.str || '0')\n  },\n\n  //https://en.wikipedia.org/wiki/Template:Abbrlink\n  abbrlink: (tmpl) => {\n    let obj = parse(tmpl, ['abbr', 'page'])\n    if (obj.page) {\n      return `[[${obj.page}|${obj.abbr}]]`\n    }\n    return `[[${obj.abbr}]]`\n  },\n\n  // https://en.wikipedia.org/wiki/Template:Own\n  own: (tmpl) => {\n    let obj = parse(tmpl, ['author'])\n    let str = 'Own work'\n    if (obj.author) {\n      str += ' by ' + obj.author\n    }\n    return str\n  },\n\n  //https://www.mediawiki.org/wiki/Help:Magic_words#Formatting\n  formatnum: (tmpl) => {\n    tmpl = tmpl.replace(/:/, '|')\n    let obj = parse(tmpl, ['number'])\n    let str = obj.number || ''\n    str = str.replace(/,/g, '')\n    let num = Number(str)\n    return num.toLocaleString() || ''\n  },\n\n  //https://en.wikipedia.org/wiki/Template:Frac\n  frac: (tmpl) => {\n    let obj = parse(tmpl, ['a', 'b', 'c'])\n    if (obj.c) {\n      return `${obj.a} ${obj.b}/${obj.c}`\n    }\n    if (obj.b) {\n      return `${obj.a}/${obj.b}`\n    }\n    return `1/${obj.b}`\n  },\n\n  //https://en.wikipedia.org/wiki/Template:Convert#Ranges_of_values\n  convert: (tmpl) => {\n    let obj = parse(tmpl, ['num', 'two', 'three', 'four'])\n    //todo: support plural units\n    if (obj.two === '-' || obj.two === 'to' || obj.two === 'and') {\n      if (obj.four) {\n        return `${obj.num} ${obj.two} ${obj.three} ${obj.four}`\n      }\n      return `${obj.num} ${obj.two} ${obj.three}`\n    }\n    return `${obj.num} ${obj.two}`\n  },\n\n  // Large number of aliases - https://en.wikipedia.org/wiki/Template:Tl\n  tl: (tmpl) => {\n    let obj = parse(tmpl, ['first', 'second'])\n    return obj.second || obj.first\n  },\n\n  //this one's a little different\n  won: (tmpl) => {\n    let data = parse(tmpl, ['text'])\n    return data.place || data.text || titlecase(data.template)\n  },\n\n  //a convulated way to make a xml tag - https://en.wikipedia.org/wiki/Template:Tag\n  tag: (tmpl) => {\n    let obj = parse(tmpl, ['tag', 'open'])\n    const ignore = {\n      span: true,\n      div: true,\n      p: true,\n    }\n    //pair, empty, close, single\n    if (!obj.open || obj.open === 'pair') {\n      //just skip generating spans and things..\n      if (ignore[obj.tag]) {\n        return obj.content || ''\n      }\n      return `<${obj.tag} ${obj.attribs || ''}>${obj.content || ''}</${obj.tag}>`\n    }\n    return ''\n  },\n\n  //dumb inflector - https://en.wikipedia.org/wiki/Template:Plural\n  plural: (tmpl) => {\n    tmpl = tmpl.replace(/plural:/, 'plural|')\n    let obj = parse(tmpl, ['num', 'word'])\n    let num = Number(obj.num)\n    let word = obj.word\n    if (num !== 1) {\n      if (/.y$/.test(word)) {\n        word = word.replace(/y$/, 'ies')\n      } else {\n        word += 's'\n      }\n    }\n    return num + ' ' + word\n  },\n\n  //https://en.wikipedia.org/wiki/Template:DEC\n  dec: (tmpl) => {\n    let obj = parse(tmpl, ['degrees', 'minutes', 'seconds'])\n    let str = (obj.degrees || 0) + '\u00B0'\n    if (obj.minutes) {\n      str += obj.minutes + `\u2032`\n    }\n    if (obj.seconds) {\n      str += obj.seconds + '\u2033'\n    }\n    return str\n  },\n\n  //https://en.wikipedia.org/wiki/Template:Val\n  val: (tmpl) => {\n    let obj = parse(tmpl, ['number', 'uncertainty'])\n    let num = obj.number\n    if (num && Number(num)) {\n      num = Number(num).toLocaleString()\n    }\n    let str = num || ''\n    //prefix/suffix\n    if (obj.p) {\n      str = obj.p + str\n    }\n    if (obj.s) {\n      str = obj.s + str\n    }\n    //add units, too\n    if (obj.u || obj.ul || obj.upl) {\n      str = str + ' ' + (obj.u || obj.ul || obj.upl)\n    }\n    return str\n  },\n\n  //{{percentage | numerator | denominator | decimals to round to (zero or greater) }}\n  percentage: (tmpl) => {\n    let obj = parse(tmpl, ['numerator', 'denominator', 'decimals'])\n    let num = percentage(obj)\n    if (num === null) {\n      return ''\n    }\n    return num + '%'\n  },\n  // this one is re-used by i18n\n  small: (tmpl) => {\n    let obj = parse(tmpl)\n    if (obj.list && obj.list[0]) {\n      return obj.list[0]\n    }\n    return ''\n  },\n\n  // {{Percent-done|done=N|total=N|digits=N}}\n  'percent-done': (tmpl) => {\n    let obj = parse(tmpl, ['done', 'total', 'digits'])\n    let num = percentage({\n      numerator: obj.done,\n      denominator: obj.total,\n      decimals: obj.digits,\n    })\n    if (num === null) {\n      return ''\n    }\n    return `${obj.done} (${num}%) done`\n  },\n\n  'loop': (tmpl) => {\n    let data = parse(tmpl, ['times', 'text'])\n    let n = Number(data.times) || 0\n    let out = ''\n    for (let i = 0; i < n; i += 1) {\n      out += data.text || ''\n    }\n    return out\n  },\n  'str len': (tmpl) => {\n    let data = parse(tmpl, ['text'])\n    return String((data.text || '').trim().length)\n  },\n  'digits': (tmpl) => {\n    let data = parse(tmpl, ['text'])\n    return (data.text || '').replace(/[^0-9]/g, '')\n  },\n  'resize': (tmpl) => {\n    let { n, text } = parse(tmpl, ['n', 'text'])\n    if (!text) {\n      return n || ''\n    }\n    return text || ''\n  },\n  'last word': (tmpl) => {\n    let data = parse(tmpl, ['text'])\n    let arr = (data.text || '').split(/ /g)\n    return arr[arr.length - 1] || ''\n  },\n  'replace': (tmpl) => {\n    let data = parse(tmpl, ['text', 'from', 'to'])\n    if (!data.from || !data.to) {\n      return data.text || ''\n    }\n    return (data.text || '').replace(data.from, data.to)\n  },\n  'title case': (tmpl) => {\n    let data = parse(tmpl, ['text'])\n    let txt = data.text || ''\n    return txt.split(/ /).map((w, i) => {\n      if (i > 0 && w === 'the' || w === 'of') {\n        return w\n      }\n      return titlecase(w)\n    }).join(' ')\n  },\n  'no spam': (tmpl) => {\n    let data = parse(tmpl, ['account', 'domain'])\n    return `${data.account || ''}@${data.domain}`\n  },\n  'baseball year': (tmpl) => {\n    let year = parse(tmpl, ['year']).year || ''\n    return `[[${year} in baseball|${year}]]`\n  },\n  'mlb year': (tmpl) => {\n    let year = parse(tmpl, ['year']).year || ''\n    return `[[${year} Major League Baseball season|${year}]]`\n  },\n  'nlds year': (tmpl) => {\n    let { year } = parse(tmpl, ['year'])\n    return `[[${year || ''} National League Division Series|${year}]]`\n  },\n  'alds year': (tmpl) => {\n    let { year } = parse(tmpl, ['year'])\n    return `[[${year || ''} American League Division Series|${year}]]`\n  },\n  'nfl year': (tmpl) => {\n    let { year, other } = parse(tmpl, ['year', 'other'])\n    if (other && year) {\n      return `[[${year} NFL season|${year}]]\u2013[[${other} NFL season|${other}]]`\n    }\n    return `[[${year || ''} NFL season|${year}]]`\n  },\n  'nfl playoff year': (tmpl) => {\n    let { year } = parse(tmpl, ['year'])\n    year = Number(year)\n    let after = year + 1\n    return `[[${year}\u2013${after} NFL playoffs|${year}]]`\n  },\n  'nba year': (tmpl) => {\n    let { year } = parse(tmpl, ['year'])\n    year = Number(year)\n    let after = year + 1\n    return `[[${year}\u2013${after} NBA season|${year}\u2013${after}]]`\n  },\n  'mhl year': (tmpl) => {\n    let data = parse(tmpl, ['year'])\n    let year = Number(data.year)\n    let after = year + 1\n    return `[[${year}\u2013${after} NHL season|${year}\u2013${after}]]`\n  },\n  // some math\n  'min': (tmpl) => {\n    let arr = parse(tmpl).list || []\n    let min = Number(arr[0]) || 0\n    arr.forEach(str => {\n      let n = Number(str)\n      if (!isNaN(n) && n < min) {\n        min = n\n      }\n    })\n    return String(min)\n  },\n  'max': (tmpl) => {\n    let arr = parse(tmpl).list\n    let max = Number(arr[0]) || 0\n    arr.forEach(str => {\n      let n = Number(str)\n      if (!isNaN(n) && n > max) {\n        max = n\n      }\n    })\n    return String(max)\n  },\n  // US-politics\n  'uspolabbr': (tmpl) => {\n    let { party, state, house } = parse(tmpl, ['party', 'state', 'house', 'link'])\n    if (!party || !state) {\n      return ''\n    }\n    let out = `${party}\u2011${state}`\n    if (house) {\n      out += ` ${toOrdinal(house)}`\n    }\n    return out\n  },\n  // https://en.wikipedia.org/wiki/Template:Ushr\n  'ushr': (tmpl) => {\n    let { state, num, type } = parse(tmpl, ['state', 'num', 'type'])\n    let link = ''\n    if (num === 'AL') {\n      link = `${state}'s at-large congressional district`\n    } else {\n      num = toOrdinal(Number(num))\n      return `${state}'s ${num} congressional district`\n    }\n    if (type) {\n      type = type.toLowerCase()\n      num = num === 'AL' ? 'At-large' : num\n      // there are many of these\n      if (type === 'e') {\n        return `[[${link}|${num}]]`\n      }\n      if (type === 'u') {\n        return `[[${link}|${state}]]`\n      }\n      if (type === 'b' || type === 'x') {\n        return `[[${link}|${state} ${num}]]`\n      }\n    }\n    return `[[${link}]]`\n  },\n\n  // transit station links\n  'metro': (tmpl) => {\n    let { name, dab } = parse(tmpl, ['name', 'dab'])\n    if (dab) {\n      return `[[${name} station (${dab})|${name}]]`\n    }\n    return `[[${name} station|${name}]]`\n  },\n  'station': (tmpl) => {\n    let { name, dab } = parse(tmpl, ['name', 'x', 'dab'])\n    if (dab) {\n      return `[[${name} station (${dab})|${name}]]`\n    }\n    return `[[${name} station|${name}]]`\n  },\n  'bssrws': (tmpl) => {\n    let { one, two } = parse(tmpl, ['one', 'two'])\n    let name = one\n    if (two) {\n      name += ' ' + two\n    }\n    return `[[${name} railway station|${name}]]`\n  },\n  'stnlnk': (tmpl) => {\n    let { name, dab } = parse(tmpl, ['name', 'dab'])\n    if (dab) {\n      return `[[${name} railway station (${dab})|${name}]]`\n    }\n    return `[[${name} railway station|${name}]]`\n  },\n  // https://en.wikipedia.org/wiki/Template:Station_link\n  'station link': (tmpl) => {\n    let { station, system } = parse(tmpl, ['system', 'station']) //incomplete\n    return station || system\n  },\n  'line link': (tmpl) => {\n    let { station, system } = parse(tmpl, ['system', 'station']) //incomplete\n    return station || system\n  },\n  'subway': (tmpl) => {\n    let { name } = parse(tmpl, ['name'])\n    return `[[${name} subway station|${name}]]`\n  },\n  'lrt station': (tmpl) => {\n    let { name } = parse(tmpl, ['name'])\n    return `[[${name} LRT station|${name}]]`\n  },\n  'mrt station': (tmpl) => {\n    let { name } = parse(tmpl, ['name'])\n    return `[[${name} MRT station|${name}]]`\n  },\n  'rht': (tmpl) => {\n    let { name } = parse(tmpl, ['name'])\n    return `[[${name} railway halt|${name}]]`\n  },\n  'ferry': (tmpl) => {\n    let { name } = parse(tmpl, ['name'])\n    return `[[${name} ferry wharf|${name}]]`\n  },\n  'tram': (tmpl) => {\n    let { name, dab } = parse(tmpl, ['name', 'dab'])\n    if (dab) {\n      return `[[${name} tram stop (${dab})|${name}]]`\n    }\n    return `[[${name} tram stop|${name}]]`\n  },\n  'tstop': (tmpl) => {\n    let { name, dab } = parse(tmpl, ['name', 'dab'])\n    if (dab) {\n      return `[[${name} ${dab} stop|${name}]]`\n    }\n    return `[[${name} stop|${name}]]`\n  },\n  // boats\n  'ship': (tmpl) => {\n    let { prefix, name, id } = parse(tmpl, ['prefix', 'name', 'id'])\n    prefix = prefix || ''\n    return id ? `[[${prefix.toUpperCase()} ${name}]]` : `[[${prefix.toUpperCase()} ${name}]]`\n  },\n  'sclass': (tmpl) => {\n    let { cl, type } = parse(tmpl, ['cl', 'type', 'fmt'])\n    return `[[${cl}-class ${type} |''${cl}''-class]] [[${type}]]`\n  },\n  'center block': (tmpl) => {\n    let { text } = parse(tmpl, ['text'])\n    return text || ''\n  },\n  'align': (tmpl) => {\n    let { text } = parse(tmpl, ['dir', 'text'])\n    return text || ''\n  },\n  'font': (tmpl) => {\n    let { text } = parse(tmpl, ['text'])\n    return text || ''\n  },\n  'float': (tmpl) => {\n    let { text, dir } = parse(tmpl, ['dir', 'text'])\n    if (!text) {\n      return dir\n    }\n    return text || ''\n  },\n  'lower': (tmpl) => {\n    let { text, n } = parse(tmpl, ['n', 'text'])\n    if (!text) {\n      return n\n    }\n    return text || ''\n  },\n  'splitspan': (tmpl) => {\n    let list = parse(tmpl).list || []\n    return (list[0] || '') + '\\n' + (list[1] || '')\n  },\n  'bracket': (tmpl) => {\n    let { text } = parse(tmpl, ['text'])\n    if (text) {\n      return `[${text}]`\n    }\n    return '['\n  },\n\n\n  // https://en.wikipedia.org/wiki/Template:In_title\n  'in title': (tmpl) => {\n    let { title, text } = parse(tmpl, ['title', 'text'])\n    if (text) {\n      return text\n    }\n    if (title) {\n      return `All pages with titles containing ${title}`//[[Special: ..]]\n    }\n    return ''\n  },\n  'look from': (tmpl) => {\n    let { title, text } = parse(tmpl, ['title', 'text'])\n    if (text) {\n      return text\n    }\n    if (title) {\n      return `All pages with titles beginning with ${title}`//[[Special: ..]]\n    }\n    return ''\n  },\n\n}\n", "import languages from '../../../_data/languages.js'\n\nlet templates = {}\nlet more = [\n  'sr-latn-cyrl', //first parameter latin, second cyrillic\n  'sr-cyrl-latn', //first parameter cyrillic, second latin\n  'sr-latn', //one parameter latin\n  'sr-cyrl', //one parameter cyrillic\n  'sr-cyr',\n  'sh-latn-cyrl', //for both Latin and Cyrillic in that order\n  'sh-cyrl-latn', //for both Cyrillic and Latin in that order\n  'sh-latn', //for Latin\n  'sh-cyrl', //for Cyrillic\n  'cel-1bd',\n  'cel-x-proto',\n  'en-emodeng',\n  'de-at',\n  'de-ch',\n  'gem-x-proto',\n  'gsw-fr',\n  'nds-nl',\n  'nl-be',\n  'ku-arab',\n  'ku-cyrl',\n  'pt-br',\n  'fra-frc',\n  'fra-que',\n  'roa-leo',\n  'roa-nor',\n  'ca-valencia',\n  'ast-leo',\n  'grc-gre',\n  'grc-x-doric',\n  'grc-x-proto',\n  'grc-x-medieval',\n  'cpg',\n  'gmy',\n  'grc',\n  'grk-x-proto',\n  'pnt',\n  'mga',\n  'owl',\n  'pgl',\n  'sga',\n  'wlm',\n  'xbm',\n  'xcb',\n  'xcg',\n  'xpi',\n  'aae',\n  'aln',\n  'sq-definite',\n  'bs-cyrl',\n  'hsb',\n  'ltg',\n  'orv',\n  'prg',\n  'rsk',\n  'rue',\n  'rus',\n  'sgs',\n  'sla',\n  'szl',\n  'wen',\n  'aoa',\n  'chn',\n  'cri',\n  'dlm',\n  'egl',\n  'fax',\n  'frc',\n  'frm',\n  'fro',\n  'fr-gallo',\n  'oc-gascon',\n  'gcf',\n  'gcr',\n  'ist',\n  'la-x-medieval',\n  'lij-mc',\n  'lld',\n  'lou',\n  'mfe',\n  'mol',\n  'mwl',\n  'mxi',\n  'nrf',\n  'osc',\n  'osp',\n  'pcd',\n  'pln',\n  'rcf',\n  'rgn',\n  'roa',\n  'ruo',\n  'rup',\n  'ruq',\n  'sdc',\n  'sdn',\n  'src',\n  'sro',\n  'xvo',\n  'bzj',\n  'cim',\n  'dum',\n  'enm',\n  'frk',\n  'frr',\n  'frs',\n  'gmh',\n  'gml',\n  'gmw',\n  'goh',\n  'gos',\n  'gsw',\n  'gyn',\n  'icr',\n  'jam',\n  'kri',\n  'lng',\n  'nb',\n  'non',\n  'nrn',\n  'odt',\n  'ofs',\n  'osx',\n  'pey',\n  'sli',\n  'srm',\n  'srn',\n  'stq',\n  'swg',\n  'vmf',\n  'wae',\n  'wep',\n  'wes',\n  'zea',\n  'hmd',\n  'hoc',\n  'kha',\n  'mnw',\n  'mtq',\n  'vi-chunom',\n  'vi-hantu',\n  'mvi',\n  'rys',\n  'ryu',\n  'yoi',\n  'ace',\n  'akl',\n  'ami',\n  'bew',\n  'bik',\n  'bjn',\n  'bya',\n  'cal',\n  'cbk',\n  'cjm',\n  'coa',\n  'cyo',\n  'dev',\n  'fil',\n  'gad',\n  'hil',\n  'iba',\n  'ibg',\n  'ibl',\n  'ilp',\n  'itv',\n  'ivv',\n  'jax',\n  'kne',\n  'krj',\n  'kxd',\n  'ljp',\n  'mad',\n  'mak',\n  'mdh',\n  'mrv',\n  'mrw',\n  'ms-arab',\n  'nia',\n  'niu',\n  'pau',\n  'pwn',\n  'rap',\n  'rar',\n  'sgd',\n  'su-fonts',\n  'szy',\n  'tao',\n  'tkl',\n  'tsg',\n  'tvl',\n  'uli',\n  'wls',\n  'xsb',\n  'yap',\n  'yka',\n  'ckt',\n  'itl',\n  'brh',\n  'oty',\n  'tcy',\n  'abq',\n  'ady',\n  'ddo',\n  'inh',\n  'kbd',\n  'lbe',\n  'lez',\n  'rut',\n  'tab',\n  'uby',\n  'udi',\n  'bai',\n  'bin',\n  'bsq',\n  'dag',\n  'dyu',\n  'efi',\n  'fan',\n  'fmp',\n  'fuc',\n  'fuf',\n  'gaa',\n  'ibb',\n  'kbp',\n  'kcg',\n  'kpo',\n  'ktu',\n  'lu',\n  'lua',\n  'lun',\n  'mkw',\n  'mos',\n  'oaa',\n  'sjo',\n  'ude',\n  'anm',\n  'bft',\n  'blk',\n  'brx',\n  'dng',\n  'kjp',\n  'kjz',\n  'ksw',\n  'lbj',\n  'lus',\n  'aae',\n  'aaq',\n  'abe',\n  'abq',\n  'aca',\n  'ace',\n  'acf',\n  'acm',\n  'acw',\n  'ady',\n  'ae',\n  'aeb',\n  'aec',\n  'aer',\n  'afb',\n  'aht',\n  'aii',\n  'aij',\n  'ain',\n  'aiq',\n  'akk',\n  'akl',\n  'akz',\n  'ale',\n  'aln',\n  'alq',\n  'alt',\n  'ami',\n  'anm',\n  'aoa',\n  'apj',\n  'apm',\n  'apw',\n  'ayn',\n  'arb',\n  'arh',\n  'ari',\n  'arn',\n  'arp',\n  'arq',\n  'ary',\n  'arz',\n  'asb',\n  'ath',\n  'ats',\n  'awa',\n  'axm',\n  'azb',\n  'azd',\n  'azj',\n  'bai',\n  'bal',\n  'ban',\n  'bax',\n  'bdz',\n  'bea',\n  'ber',\n  'bew',\n  'bft',\n  'bgn',\n  'bho',\n  'bik',\n  'bin',\n  'bjn',\n  'bla',\n  'blc',\n  'blk',\n  'bqi',\n  'brh',\n  'brx',\n  'bsk',\n  'bsq',\n  'bua',\n  'bvb',\n  'bya',\n  'bzj',\n  'cal',\n  'cay',\n  'cbk',\n  'ccp',\n  'chg',\n  'chm',\n  'chn',\n  'chp',\n  'cic',\n  'cim',\n  'ciw',\n  'cjm',\n  'cjs',\n  'ckb',\n  'ckt',\n  'cku',\n  'cld',\n  'clm',\n  'cmg',\n  'cmn',\n  'cms',\n  'cnu',\n  'coa',\n  'coc',\n  'coj',\n  'com',\n  'coo',\n  'cop',\n  'cpg',\n  'crg',\n  'crh',\n  'cri',\n  'crj',\n  'crk',\n  'crl',\n  'crm',\n  'cro',\n  'csw',\n  'csz',\n  'ctg',\n  'ctm',\n  'cyo',\n  'dag',\n  'dak',\n  'ddo',\n  'deh',\n  'del',\n  'den',\n  'dev',\n  'din',\n  'dlm',\n  'dng',\n  'dum',\n  'dyu',\n  'efi',\n  'egl',\n  'egy',\n  'elx',\n  'eml',\n  'ems',\n  'cmn',\n  'och',\n  'yue',\n  'mjw',\n  'mni',\n  'my-name-mlcts',\n  'nan',\n  'nwc',\n  'omp',\n  'otb',\n  'pwo',\n  'sip',\n  'xct',\n  'xsr',\n  '1ca',\n  'alt',\n  'az-arab',\n  'azb',\n  'azj',\n  'chg',\n  'cjs',\n  'crh',\n  'crh3',\n  'kaa',\n  'kjh',\n  'krc',\n  'kum',\n  'nog',\n  'ota',\n  'otk',\n  'sah',\n  'slr',\n  'sty',\n  'tt-arab',\n  'tt-cyrl',\n  'tt-latn',\n  'tyv',\n  'uniturk',\n  'chm',\n  'est-sea',\n  'fit',\n  'fkv',\n  'izh',\n  'jmy',\n  'koi',\n  'krl',\n  'liv',\n  'mdf',\n  'mhr',\n  'mrj',\n  'myv',\n  'olo',\n  'sia',\n  'sjd',\n  'sje',\n  'sjk',\n  'sjt',\n  'sju',\n  'sma',\n  'smi',\n  'smj',\n  'smn',\n  'sms',\n  'vep',\n  'vot',\n  'vro',\n  'yrk',\n  'din',\n  'luo',\n  'srr',\n  'sus',\n  'swh',\n  'umb',\n  'yao',\n]\n\n// more languages\nmore.forEach((k) => {\n  templates['lang-' + k] = 0\n})\n\n//https://en.wikipedia.org/wiki/Category:Lang-x_templates\nObject.keys(languages).forEach((k) => {\n  templates['lang-' + k] = 0\n})\nexport default templates", "export default [\n  ['\uD83C\uDDE6\uD83C\uDDE9', 'and', 'andorra'],\n  ['\uD83C\uDDE6\uD83C\uDDEA', 'are', 'united arab emirates'],\n  ['\uD83C\uDDE6\uD83C\uDDEB', 'afg', 'afghanistan'],\n  ['\uD83C\uDDE6\uD83C\uDDEC', 'atg', 'antigua and barbuda'],\n  ['\uD83C\uDDE6\uD83C\uDDEE', 'aia', 'anguilla'],\n  ['\uD83C\uDDE6\uD83C\uDDF1', 'alb', 'albania'],\n  ['\uD83C\uDDE6\uD83C\uDDF2', 'arm', 'armenia'],\n  ['\uD83C\uDDE6\uD83C\uDDF4', 'ago', 'angola'],\n  ['\uD83C\uDDE6\uD83C\uDDF6', 'ata', 'antarctica'],\n  ['\uD83C\uDDE6\uD83C\uDDF7', 'arg', 'argentina'],\n  ['\uD83C\uDDE6\uD83C\uDDF8', 'asm', 'american samoa'],\n  ['\uD83C\uDDE6\uD83C\uDDF9', 'aut', 'austria'],\n  ['\uD83C\uDDE6\uD83C\uDDFA', 'aus', 'australia'],\n  ['\uD83C\uDDE6\uD83C\uDDFC', 'abw', 'aruba'],\n  ['\uD83C\uDDE6\uD83C\uDDFD', 'ala', '\u00E5land islands'],\n  ['\uD83C\uDDE6\uD83C\uDDFF', 'aze', 'azerbaijan'],\n  ['\uD83C\uDDE7\uD83C\uDDE6', 'bih', 'bosnia and herzegovina'],\n  ['\uD83C\uDDE7\uD83C\uDDE7', 'brb', 'barbados'],\n  ['\uD83C\uDDE7\uD83C\uDDE9', 'bgd', 'bangladesh'],\n  ['\uD83C\uDDE7\uD83C\uDDEA', 'bel', 'belgium'],\n  ['\uD83C\uDDE7\uD83C\uDDEB', 'bfa', 'burkina faso'],\n  ['\uD83C\uDDE7\uD83C\uDDEC', 'bgr', 'bulgaria'],\n  ['\uD83C\uDDE7\uD83C\uDDEC', 'bul', 'bulgaria'], //dupe\n  ['\uD83C\uDDE7\uD83C\uDDED', 'bhr', 'bahrain'],\n  ['\uD83C\uDDE7\uD83C\uDDEE', 'bdi', 'burundi'],\n  ['\uD83C\uDDE7\uD83C\uDDEF', 'ben', 'benin'],\n  ['\uD83C\uDDE7\uD83C\uDDF1', 'blm', 'saint barth\u00E9lemy'],\n  ['\uD83C\uDDE7\uD83C\uDDF2', 'bmu', 'bermuda'],\n  ['\uD83C\uDDE7\uD83C\uDDF3', 'brn', 'brunei darussalam'],\n  ['\uD83C\uDDE7\uD83C\uDDF4', 'bol', 'bolivia'],\n  ['\uD83C\uDDE7\uD83C\uDDF6', 'bes', 'bonaire, sint eustatius and saba'],\n  ['\uD83C\uDDE7\uD83C\uDDF7', 'bra', 'brazil'],\n  ['\uD83C\uDDE7\uD83C\uDDF8', 'bhs', 'bahamas'],\n  ['\uD83C\uDDE7\uD83C\uDDF9', 'btn', 'bhutan'],\n  ['\uD83C\uDDE7\uD83C\uDDFB', 'bvt', 'bouvet island'],\n  ['\uD83C\uDDE7\uD83C\uDDFC', 'bwa', 'botswana'],\n  ['\uD83C\uDDE7\uD83C\uDDFE', 'blr', 'belarus'],\n  ['\uD83C\uDDE7\uD83C\uDDFF', 'blz', 'belize'],\n  ['\uD83C\uDDE8\uD83C\uDDE6', 'can', 'canada'],\n  ['\uD83C\uDDE8\uD83C\uDDE8', 'cck', 'cocos (keeling) islands'],\n  ['\uD83C\uDDE8\uD83C\uDDE9', 'cod', 'congo'],\n  ['\uD83C\uDDE8\uD83C\uDDEB', 'caf', 'central african republic'],\n  ['\uD83C\uDDE8\uD83C\uDDEC', 'cog', 'congo'],\n  ['\uD83C\uDDE8\uD83C\uDDED', 'che', 'switzerland'],\n  ['\uD83C\uDDE8\uD83C\uDDEE', 'civ', 'c\u00F4te d\\'ivoire'],\n  ['\uD83C\uDDE8\uD83C\uDDF0', 'cok', 'cook islands'],\n  ['\uD83C\uDDE8\uD83C\uDDF1', 'chl', 'chile'],\n  ['\uD83C\uDDE8\uD83C\uDDF2', 'cmr', 'cameroon'],\n  ['\uD83C\uDDE8\uD83C\uDDF3', 'chn', 'china'],\n  ['\uD83C\uDDE8\uD83C\uDDF4', 'col', 'colombia'],\n  ['\uD83C\uDDE8\uD83C\uDDF7', 'cri', 'costa rica'],\n  ['\uD83C\uDDE8\uD83C\uDDFA', 'cub', 'cuba'],\n  ['\uD83C\uDDE8\uD83C\uDDFB', 'cpv', 'cape verde'],\n  ['\uD83C\uDDE8\uD83C\uDDFC', 'cuw', 'cura\u00E7ao'],\n  ['\uD83C\uDDE8\uD83C\uDDFD', 'cxr', 'christmas island'],\n  ['\uD83C\uDDE8\uD83C\uDDFE', 'cyp', 'cyprus'],\n  ['\uD83C\uDDE8\uD83C\uDDFF', 'cze', 'czech republic'],\n  ['\uD83C\uDDE9\uD83C\uDDEA', 'deu', 'germany'],\n  ['\uD83C\uDDE9\uD83C\uDDEA', 'ger', 'germany'],//alias\n  ['\uD83C\uDDE9\uD83C\uDDEF', 'dji', 'djibouti'],\n  ['\uD83C\uDDE9\uD83C\uDDF0', 'dnk', 'denmark'],\n  ['\uD83C\uDDE9\uD83C\uDDF2', 'dma', 'dominica'],\n  ['\uD83C\uDDE9\uD83C\uDDF4', 'dom', 'dominican republic'],\n  ['\uD83C\uDDE9\uD83C\uDDFF', 'dza', 'algeria'],\n  ['\uD83C\uDDEA\uD83C\uDDE8', 'ecu', 'ecuador'],\n  ['\uD83C\uDDEA\uD83C\uDDEA', 'est', 'estonia'],\n  ['\uD83C\uDDEA\uD83C\uDDEC', 'egy', 'egypt'],\n  ['\uD83C\uDDEA\uD83C\uDDED', 'esh', 'western sahara'],\n  ['\uD83C\uDDEA\uD83C\uDDF7', 'eri', 'eritrea'],\n  ['\uD83C\uDDEA\uD83C\uDDF8', 'esp', 'spain'],\n  ['\uD83C\uDDEA\uD83C\uDDF9', 'eth', 'ethiopia'],\n  ['\uD83C\uDDEB\uD83C\uDDEE', 'fin', 'finland'],\n  ['\uD83C\uDDEB\uD83C\uDDEF', 'fji', 'fiji'],\n  ['\uD83C\uDDEB\uD83C\uDDF0', 'flk', 'falkland islands (malvinas)'],\n  ['\uD83C\uDDEB\uD83C\uDDF2', 'fsm', 'micronesia'],\n  ['\uD83C\uDDEB\uD83C\uDDF4', 'fro', 'faroe islands'],\n  ['\uD83C\uDDEB\uD83C\uDDF7', 'fra', 'france'],\n  ['\uD83C\uDDEC\uD83C\uDDE6', 'gab', 'gabon'],\n  ['\uD83C\uDDEC\uD83C\uDDE7', 'gbr', 'united kingdom'],\n  ['\uD83C\uDDEC\uD83C\uDDE9', 'grd', 'grenada'],\n  //['\uD83C\uDDEC\uD83C\uDDEA', 'geo', 'georgia'],\n  ['\uD83C\uDDEC\uD83C\uDDEB', 'guf', 'french guiana'],\n  ['\uD83C\uDDEC\uD83C\uDDEC', 'ggy', 'guernsey'],\n  ['\uD83C\uDDEC\uD83C\uDDED', 'gha', 'ghana'],\n  ['\uD83C\uDDEC\uD83C\uDDEE', 'gib', 'gibraltar'],\n  ['\uD83C\uDDEC\uD83C\uDDF1', 'grl', 'greenland'],\n  ['\uD83C\uDDEC\uD83C\uDDF2', 'gmb', 'gambia'],\n  ['\uD83C\uDDEC\uD83C\uDDF3', 'gin', 'guinea'],\n  ['\uD83C\uDDEC\uD83C\uDDF5', 'glp', 'guadeloupe'],\n  ['\uD83C\uDDEC\uD83C\uDDF6', 'gnq', 'equatorial guinea'],\n  ['\uD83C\uDDEC\uD83C\uDDF7', 'grc', 'greece'],\n  ['\uD83C\uDDEC\uD83C\uDDF8', 'sgs', 'south georgia'],\n  ['\uD83C\uDDEC\uD83C\uDDF9', 'gtm', 'guatemala'],\n  ['\uD83C\uDDEC\uD83C\uDDFA', 'gum', 'guam'],\n  ['\uD83C\uDDEC\uD83C\uDDFC', 'gnb', 'guinea-bissau'],\n  ['\uD83C\uDDEC\uD83C\uDDFE', 'guy', 'guyana'],\n  ['\uD83C\uDDED\uD83C\uDDF0', 'hkg', 'hong kong'],\n  ['\uD83C\uDDED\uD83C\uDDF2', 'hmd', 'heard island and mcdonald islands'],\n  ['\uD83C\uDDED\uD83C\uDDF3', 'hnd', 'honduras'],\n  ['\uD83C\uDDED\uD83C\uDDF7', 'hrv', 'croatia'],\n  ['\uD83C\uDDED\uD83C\uDDF9', 'hti', 'haiti'],\n  ['\uD83C\uDDED\uD83C\uDDFA', 'hun', 'hungary'],\n  ['\uD83C\uDDEE\uD83C\uDDE9', 'idn', 'indonesia'],\n  ['\uD83C\uDDEE\uD83C\uDDEA', 'irl', 'ireland'],\n  ['\uD83C\uDDEE\uD83C\uDDF1', 'isr', 'israel'],\n  ['\uD83C\uDDEE\uD83C\uDDF2', 'imn', 'isle of man'],\n  ['\uD83C\uDDEE\uD83C\uDDF3', 'ind', 'india'],\n  ['\uD83C\uDDEE\uD83C\uDDF4', 'iot', 'british indian ocean territory'],\n  ['\uD83C\uDDEE\uD83C\uDDF6', 'irq', 'iraq'],\n  ['\uD83C\uDDEE\uD83C\uDDF7', 'irn', 'iran'],\n  ['\uD83C\uDDEE\uD83C\uDDF8', 'isl', 'iceland'],\n  ['\uD83C\uDDEE\uD83C\uDDF9', 'ita', 'italy'],\n  ['\uD83C\uDDEF\uD83C\uDDEA', 'jey', 'jersey'],\n  ['\uD83C\uDDEF\uD83C\uDDF2', 'jam', 'jamaica'],\n  ['\uD83C\uDDEF\uD83C\uDDF4', 'jor', 'jordan'],\n  ['\uD83C\uDDEF\uD83C\uDDF5', 'jpn', 'japan'],\n  ['\uD83C\uDDF0\uD83C\uDDEA', 'ken', 'kenya'],\n  ['\uD83C\uDDF0\uD83C\uDDEC', 'kgz', 'kyrgyzstan'],\n  ['\uD83C\uDDF0\uD83C\uDDED', 'khm', 'cambodia'],\n  ['\uD83C\uDDF0\uD83C\uDDEE', 'kir', 'kiribati'],\n  ['\uD83C\uDDF0\uD83C\uDDF2', 'com', 'comoros'],\n  ['\uD83C\uDDF0\uD83C\uDDF3', 'kna', 'saint kitts and nevis'],\n  ['\uD83C\uDDF0\uD83C\uDDF5', 'prk', 'north korea'],\n  ['\uD83C\uDDF0\uD83C\uDDF7', 'kor', 'south korea'],\n  ['\uD83C\uDDF0\uD83C\uDDFC', 'kwt', 'kuwait'],\n  ['\uD83C\uDDF0\uD83C\uDDFE', 'cym', 'cayman islands'],\n  ['\uD83C\uDDF0\uD83C\uDDFF', 'kaz', 'kazakhstan'],\n  ['\uD83C\uDDF1\uD83C\uDDE6', 'lao', 'lao people\\'s democratic republic'],\n  ['\uD83C\uDDF1\uD83C\uDDE7', 'lbn', 'lebanon'],\n  ['\uD83C\uDDF1\uD83C\uDDE8', 'lca', 'saint lucia'],\n  ['\uD83C\uDDF1\uD83C\uDDEE', 'lie', 'liechtenstein'],\n  ['\uD83C\uDDF1\uD83C\uDDF0', 'lka', 'sri lanka'],\n  ['\uD83C\uDDF1\uD83C\uDDF7', 'lbr', 'liberia'],\n  ['\uD83C\uDDF1\uD83C\uDDF8', 'lso', 'lesotho'],\n  ['\uD83C\uDDF1\uD83C\uDDF9', 'ltu', 'lithuania'],\n  ['\uD83C\uDDF1\uD83C\uDDFA', 'lux', 'luxembourg'],\n  ['\uD83C\uDDF1\uD83C\uDDFB', 'lva', 'latvia'],\n  ['\uD83C\uDDF1\uD83C\uDDFE', 'lby', 'libya'],\n  ['\uD83C\uDDF2\uD83C\uDDE6', 'mar', 'morocco'],\n  ['\uD83C\uDDF2\uD83C\uDDE8', 'mco', 'monaco'],\n  ['\uD83C\uDDF2\uD83C\uDDE9', 'mda', 'moldova'],\n  ['\uD83C\uDDF2\uD83C\uDDEA', 'mne', 'montenegro'],\n  ['\uD83C\uDDF2\uD83C\uDDEB', 'maf', 'saint martin (french part)'],\n  ['\uD83C\uDDF2\uD83C\uDDEC', 'mdg', 'madagascar'],\n  ['\uD83C\uDDF2\uD83C\uDDED', 'mhl', 'marshall islands'],\n  ['\uD83C\uDDF2\uD83C\uDDF0', 'mkd', 'macedonia'],\n  ['\uD83C\uDDF2\uD83C\uDDF1', 'mli', 'mali'],\n  ['\uD83C\uDDF2\uD83C\uDDF2', 'mmr', 'myanmar'],\n  ['\uD83C\uDDF2\uD83C\uDDF3', 'mng', 'mongolia'],\n  ['\uD83C\uDDF2\uD83C\uDDF4', 'mac', 'macao'],\n  ['\uD83C\uDDF2\uD83C\uDDF5', 'mnp', 'northern mariana islands'],\n  ['\uD83C\uDDF2\uD83C\uDDF6', 'mtq', 'martinique'],\n  ['\uD83C\uDDF2\uD83C\uDDF7', 'mrt', 'mauritania'],\n  ['\uD83C\uDDF2\uD83C\uDDF8', 'msr', 'montserrat'],\n  ['\uD83C\uDDF2\uD83C\uDDF9', 'mlt', 'malta'],\n  ['\uD83C\uDDF2\uD83C\uDDFA', 'mus', 'mauritius'],\n  ['\uD83C\uDDF2\uD83C\uDDFB', 'mdv', 'maldives'],\n  ['\uD83C\uDDF2\uD83C\uDDFC', 'mwi', 'malawi'],\n  ['\uD83C\uDDF2\uD83C\uDDFD', 'mex', 'mexico'],\n  ['\uD83C\uDDF2\uD83C\uDDFE', 'mys', 'malaysia'],\n  ['\uD83C\uDDF2\uD83C\uDDFF', 'moz', 'mozambique'],\n  ['\uD83C\uDDF3\uD83C\uDDE6', 'nam', 'namibia'],\n  ['\uD83C\uDDF3\uD83C\uDDE8', 'ncl', 'new caledonia'],\n  ['\uD83C\uDDF3\uD83C\uDDEA', 'ner', 'niger'],\n  ['\uD83C\uDDF3\uD83C\uDDEB', 'nfk', 'norfolk island'],\n  ['\uD83C\uDDF3\uD83C\uDDEC', 'nga', 'nigeria'],\n  ['\uD83C\uDDF3\uD83C\uDDEE', 'nic', 'nicaragua'],\n  ['\uD83C\uDDF3\uD83C\uDDF1', 'nld', 'netherlands'],\n  ['\uD83C\uDDF3\uD83C\uDDF4', 'nor', 'norway'],\n  ['\uD83C\uDDF3\uD83C\uDDF5', 'npl', 'nepal'],\n  ['\uD83C\uDDF3\uD83C\uDDF7', 'nru', 'nauru'],\n  ['\uD83C\uDDF3\uD83C\uDDFA', 'niu', 'niue'],\n  ['\uD83C\uDDF3\uD83C\uDDFF', 'nzl', 'new zealand'],\n  ['\uD83C\uDDF4\uD83C\uDDF2', 'omn', 'oman'],\n  ['\uD83C\uDDF5\uD83C\uDDE6', 'pan', 'panama'],\n  ['\uD83C\uDDF5\uD83C\uDDEA', 'per', 'peru'],\n  ['\uD83C\uDDF5\uD83C\uDDEB', 'pyf', 'french polynesia'],\n  ['\uD83C\uDDF5\uD83C\uDDEC', 'png', 'papua new guinea'],\n  ['\uD83C\uDDF5\uD83C\uDDED', 'phl', 'philippines'],\n  ['\uD83C\uDDF5\uD83C\uDDF0', 'pak', 'pakistan'],\n  ['\uD83C\uDDF5\uD83C\uDDF1', 'pol', 'poland'],\n  ['\uD83C\uDDF5\uD83C\uDDF2', 'spm', 'saint pierre and miquelon'],\n  ['\uD83C\uDDF5\uD83C\uDDF3', 'pcn', 'pitcairn'],\n  ['\uD83C\uDDF5\uD83C\uDDF7', 'pri', 'puerto rico'],\n  ['\uD83C\uDDF5\uD83C\uDDF8', 'pse', 'palestinian territory'],\n  ['\uD83C\uDDF5\uD83C\uDDF9', 'prt', 'portugal'],\n  ['\uD83C\uDDF5\uD83C\uDDFC', 'plw', 'palau'],\n  ['\uD83C\uDDF5\uD83C\uDDFE', 'pry', 'paraguay'],\n  ['\uD83C\uDDF6\uD83C\uDDE6', 'qat', 'qatar'],\n  ['\uD83C\uDDF7\uD83C\uDDEA', 'reu', 'r\u00E9union'],\n  ['\uD83C\uDDF7\uD83C\uDDF4', 'rou', 'romania'],\n  ['\uD83C\uDDF7\uD83C\uDDF8', 'srb', 'serbia'],\n  ['\uD83C\uDDF7\uD83C\uDDFA', 'rus', 'russia'],\n  ['\uD83C\uDDF7\uD83C\uDDFC', 'rwa', 'rwanda'],\n  ['\uD83C\uDDF8\uD83C\uDDE6', 'sau', 'saudi arabia'],\n  ['\uD83C\uDDF8\uD83C\uDDE7', 'slb', 'solomon islands'],\n  ['\uD83C\uDDF8\uD83C\uDDE8', 'syc', 'seychelles'],\n  ['\uD83C\uDDF8\uD83C\uDDE9', 'sdn', 'sudan'],\n  ['\uD83C\uDDF8\uD83C\uDDEA', 'swe', 'sweden'],\n  ['\uD83C\uDDF8\uD83C\uDDEC', 'sgp', 'singapore'],\n  ['\uD83C\uDDF8\uD83C\uDDED', 'shn', 'saint helena, ascension and tristan da cunha'],\n  ['\uD83C\uDDF8\uD83C\uDDEE', 'svn', 'slovenia'],\n  ['\uD83C\uDDF8\uD83C\uDDEF', 'sjm', 'svalbard and jan mayen'],\n  ['\uD83C\uDDF8\uD83C\uDDF0', 'svk', 'slovakia'],\n  ['\uD83C\uDDF8\uD83C\uDDF1', 'sle', 'sierra leone'],\n  ['\uD83C\uDDF8\uD83C\uDDF2', 'smr', 'san marino'],\n  ['\uD83C\uDDF8\uD83C\uDDF3', 'sen', 'senegal'],\n  ['\uD83C\uDDF8\uD83C\uDDF4', 'som', 'somalia'],\n  ['\uD83C\uDDF8\uD83C\uDDF7', 'sur', 'suriname'],\n  ['\uD83C\uDDF8\uD83C\uDDF8', 'ssd', 'south sudan'],\n  ['\uD83C\uDDF8\uD83C\uDDF9', 'stp', 'sao tome and principe'],\n  ['\uD83C\uDDF8\uD83C\uDDFB', 'slv', 'el salvador'],\n  ['\uD83C\uDDF8\uD83C\uDDFD', 'sxm', 'sint maarten (dutch part)'],\n  ['\uD83C\uDDF8\uD83C\uDDFE', 'syr', 'syrian arab republic'],\n  ['\uD83C\uDDF8\uD83C\uDDFF', 'swz', 'swaziland'],\n  ['\uD83C\uDDF9\uD83C\uDDE8', 'tca', 'turks and caicos islands'],\n  ['\uD83C\uDDF9\uD83C\uDDE9', 'tcd', 'chad'],\n  ['\uD83C\uDDF9\uD83C\uDDEB', 'atf', 'french southern territories'],\n  ['\uD83C\uDDF9\uD83C\uDDEC', 'tgo', 'togo'],\n  ['\uD83C\uDDF9\uD83C\uDDED', 'tha', 'thailand'],\n  ['\uD83C\uDDF9\uD83C\uDDEF', 'tjk', 'tajikistan'],\n  ['\uD83C\uDDF9\uD83C\uDDF0', 'tkl', 'tokelau'],\n  ['\uD83C\uDDF9\uD83C\uDDF1', 'tls', 'timor-leste'],\n  ['\uD83C\uDDF9\uD83C\uDDF2', 'tkm', 'turkmenistan'],\n  ['\uD83C\uDDF9\uD83C\uDDF3', 'tun', 'tunisia'],\n  ['\uD83C\uDDF9\uD83C\uDDF4', 'ton', 'tonga'],\n  ['\uD83C\uDDF9\uD83C\uDDF7', 'tur', 'turkey'],\n  ['\uD83C\uDDF9\uD83C\uDDF9', 'tto', 'trinidad and tobago'],\n  ['\uD83C\uDDF9\uD83C\uDDFB', 'tuv', 'tuvalu'],\n  ['\uD83C\uDDF9\uD83C\uDDFC', 'twn', 'taiwan'],\n  ['\uD83C\uDDF9\uD83C\uDDFF', 'tza', 'tanzania'],\n  ['\uD83C\uDDFA\uD83C\uDDE6', 'ukr', 'ukraine'],\n  ['\uD83C\uDDFA\uD83C\uDDEC', 'uga', 'uganda'],\n  ['\uD83C\uDDFA\uD83C\uDDF2', 'umi', 'united states minor outlying islands'],\n  ['\uD83C\uDDFA\uD83C\uDDF8', 'us', 'united states'],//alias\n  ['\uD83C\uDDFA\uD83C\uDDF8', 'usa', 'united states'],\n  ['\uD83C\uDDFA\uD83C\uDDFE', 'ury', 'uruguay'],\n  ['\uD83C\uDDFA\uD83C\uDDFF', 'uzb', 'uzbekistan'],\n  ['\uD83C\uDDFB\uD83C\uDDE6', 'vat', 'vatican city'],\n  ['\uD83C\uDDFB\uD83C\uDDE8', 'vct', 'saint vincent and the grenadines'],\n  ['\uD83C\uDDFB\uD83C\uDDEA', 'ven', 'venezuela'],\n  ['\uD83C\uDDFB\uD83C\uDDEC', 'vgb', 'virgin islands, british'],\n  ['\uD83C\uDDFB\uD83C\uDDEE', 'vir', 'virgin islands, u.s.'],\n  ['\uD83C\uDDFB\uD83C\uDDF3', 'vnm', 'viet nam'],\n  ['\uD83C\uDDFB\uD83C\uDDFA', 'vut', 'vanuatu'],\n  ['\uD83C\uDDFC\uD83C\uDDEB', 'wlf', 'wallis and futuna'],\n  ['\uD83C\uDDFC\uD83C\uDDF8', 'wsm', 'samoa'],\n  ['\uD83C\uDDFE\uD83C\uDDEA', 'yem', 'yemen'],\n  ['\uD83C\uDDFE\uD83C\uDDF9', 'myt', 'mayotte'],\n  ['\uD83C\uDDFF\uD83C\uDDE6', 'zaf', 'south africa'],\n  ['\uD83C\uDDFF\uD83C\uDDF2', 'zmb', 'zambia'],\n  ['\uD83C\uDDFF\uD83C\uDDFC ', 'zwe', 'zimbabwe'],\n  //others (later unicode versions)\n  ['\uD83C\uDDFA\uD83C\uDDF3', 'un', 'united nations'],\n  ['\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67\uDB40\uDC7F\uDB40\uDC67\uDB40\uDC62\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67\uDB40\uDC7F', 'eng', 'england'],\n  ['\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74\uDB40\uDC7F', 'sct', 'scotland'],\n  ['\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73\uDB40\uDC7F', 'wal', 'wales'],\n  ['\uD83C\uDDEA\uD83C\uDDFA', 'eu', 'european union'],\n]\n", "import parse from '../../parse/toJSON/index.js'\nimport flags from '../../../_data/flags.js'\nconst order = ['flag', 'variant']\nlet templates = {\n  //https://en.wikipedia.org/wiki/Template:Flag\n  // {{flag|USA}} \u2192  USA\n  flag: (tmpl) => {\n    let obj = parse(tmpl, order)\n    let name = obj.flag || ''\n    obj.flag = (obj.flag || '').toLowerCase()\n    let found = flags.find((a) => obj.flag === a[1] || obj.flag === a[2]) || []\n    let flag = found[0] || ''\n    return `${flag} [[${found[2]}|${name}]]`\n  },\n  // {{flagcountry|USA}} \u2192  United States\n  flagcountry: (tmpl) => {\n    let obj = parse(tmpl, order)\n    obj.flag = (obj.flag || '').toLowerCase()\n    let found = flags.find((a) => obj.flag === a[1] || obj.flag === a[2]) || []\n    let flag = found[0] || ''\n    return `${flag} [[${found[2]}]]`\n  },\n  // (unlinked flag-country)\n  flagcu: (tmpl) => {\n    let obj = parse(tmpl, order)\n    obj.flag = (obj.flag || '').toLowerCase()\n    let found = flags.find((a) => obj.flag === a[1] || obj.flag === a[2]) || []\n    let flag = found[0] || ''\n    return `${flag} ${found[2]}`\n  },\n  //https://en.wikipedia.org/wiki/Template:Flagicon\n  // {{flagicon|USA}} \u2192 United States\n  flagicon: (tmpl) => {\n    let obj = parse(tmpl, order)\n    obj.flag = (obj.flag || '').toLowerCase()\n    let found = flags.find((a) => obj.flag === a[1] || obj.flag === a[2])\n    if (!found) {\n      return ''\n    }\n    return `[[${found[2]}|${found[0]}]]`\n  },\n  //unlinked flagicon\n  flagdeco: (tmpl) => {\n    let obj = parse(tmpl, order)\n    obj.flag = (obj.flag || '').toLowerCase()\n    let found = flags.find((a) => obj.flag === a[1] || obj.flag === a[2]) || []\n    return found[0] || ''\n  },\n  //same, but a soccer team\n  fb: (tmpl) => {\n    let obj = parse(tmpl, order)\n    obj.flag = (obj.flag || '').toLowerCase()\n    let found = flags.find((a) => obj.flag === a[1] || obj.flag === a[2])\n    if (!found) {\n      return ''\n    }\n    return `${found[0]} [[${found[2]} national football team|${found[2]}]]`\n  },\n  fbicon: (tmpl) => {\n    let obj = parse(tmpl, order)\n    obj.flag = (obj.flag || '').toLowerCase()\n    let found = flags.find((a) => obj.flag === a[1] || obj.flag === a[2])\n    if (!found) {\n      return ''\n    }\n    return ` [[${found[2]} national football team|${found[0]}]]`\n  },\n  flagathlete: (tmpl) => {\n    let obj = parse(tmpl, ['name', 'flag', 'variant'])\n    obj.flag = (obj.flag || '').toLowerCase()\n    let found = flags.find((a) => obj.flag === a[1] || obj.flag === a[2])\n    if (!found) {\n      return `[[${obj.name || ''}]]`\n    }\n    return `${found[0]} [[${obj.name || ''}]] (${found[1].toUpperCase()})`\n  },\n}\n//support {{can}}\nflags.forEach((a) => {\n  templates[a[1]] = () => {\n    return a[0]\n  }\n})\nexport default templates\n", "//random misc for inline wikipedia templates\nimport parse from '../../parse/toJSON/index.js'\nimport { titlecase } from '../_lib.js'\n\n//https://en.wikipedia.org/wiki/Template:Yes\nlet templates = {}\nlet cells = [\n  'rh',\n  'rh2',\n  'yes',\n  'no',\n  'maybe',\n  'eliminated',\n  'lost',\n  'safe',\n  'active',\n  'site active',\n  'coming soon',\n  'good',\n  'won',\n  'nom',\n  'sho',\n  'longlisted',\n  'tba',\n  'success',\n  'operational',\n  'failure',\n  'partial',\n  'regional',\n  'maybecheck',\n  'partial success',\n  'partial failure',\n  'okay',\n  'yes-no',\n  'some',\n  'nonpartisan',\n  'pending',\n  'unofficial',\n  'unofficial2',\n  'usually',\n  'rarely',\n  'sometimes',\n  'any',\n  'varies',\n  'black',\n  'non-album single',\n  'unreleased',\n  'unknown',\n  'perhaps',\n  'depends',\n  'included',\n  'dropped',\n  'terminated',\n  'beta',\n  'table-experimental',\n  'free',\n  'proprietary',\n  'nonfree',\n  'needs',\n  'nightly',\n  'release-candidate',\n  'planned',\n  'scheduled',\n  'incorrect',\n  'no result',\n  'cmain',\n  'calso starring',\n  'crecurring',\n  'cguest',\n  'not yet',\n  'optional',\n]\ncells.forEach((str) => {\n  templates[str] = (tmpl) => {\n    let data = parse(tmpl, ['text'])\n    return data.text || titlecase(data.template)\n  }\n})\n\n//these ones have a text result\nlet moreCells = [\n  ['active fire', 'Active'],\n  ['site active', 'Active'],\n  ['site inactive', 'Inactive'],\n  ['yes2', ''],\n  ['no2', ''],\n  ['ya', '\u2705'],\n  ['na', '\u274C'],\n  ['nom', 'Nominated'],\n  ['sho', 'Shortlisted'],\n  ['tba', 'TBA'],\n  ['maybecheck', '\u2714\uFE0F'],\n  ['okay', 'Neutral'],\n  ['n/a', 'N/A'],\n  ['sdash', '\u2014'],\n  ['dunno', '?'],\n  ['draw', ''],\n  ['cnone', ''],\n  ['nocontest', ''],\n]\nmoreCells.forEach((a) => {\n  templates[a[0]] = (tmpl) => {\n    let data = parse(tmpl, ['text'])\n    return data.text || a[1]\n  }\n})\n\nexport default templates\n", "import hardcoded from './hardcoded.js'\nimport easyInline from './easy-inline.js'\nimport shorthand from './shorthands.js'\nimport functions from './functions.js'\nimport moreLangs from './languages.js'\nimport flags from './flags.js'\nimport table from './table-cell.js'\n\nexport default Object.assign(\n  {},\n  hardcoded,\n  easyInline,\n  shorthand,\n  functions,\n  moreLangs,\n  flags,\n  table,\n)\n", "let templates = {}\n// these all have ['id', 'name']\nlet idName = [\n  'goodreads author',\n  'twitter',\n  'facebook',\n  'instagram',\n  'tumblr',\n  'pinterest',\n  'espn nfl',\n  'espn nhl',\n  'espn fc',\n  'hockeydb',\n  'fifa player',\n  'worldcat',\n  'worldcat id',\n  'nfl player',\n  'ted speaker',\n  'playmate',\n]\nidName.forEach((name) => {\n  templates[name] = ['id', 'name']\n})\nexport default templates\n", "let templates = {}\n// these all have ['id', 'title', 'description', 'section']\nlet idTitle = [\n  'imdb title', //https://en.wikipedia.org/wiki/Template:IMDb_title\n  'imdb name',\n  'imdb episode',\n  'imdb event',\n  'afi film',\n  'allmovie title',\n  'allgame',\n  'tcmdb title',\n  'discogs artist',\n  'discogs label',\n  'discogs release',\n  'discogs master',\n  'librivox author',\n  'musicbrainz artist',\n  'musicbrainz label',\n  'musicbrainz recording',\n  'musicbrainz release',\n  'musicbrainz work',\n  'youtube',\n  'goodreads book',\n  'dmoz', //https://en.wikipedia.org/wiki/Template:DMOZ\n]\nidTitle.forEach((name) => {\n  templates[name] = ['id', 'title', 'description', 'section']\n})\nexport default templates\n", "import parse from '../../parse/toJSON/index.js'\nimport Image from '../../../image/Image.js'\nimport { getLang, sisterProjects, toNumber } from '../_lib.js'\n\nexport default {\n  // https://en.wikipedia.org/wiki/Template:IPA\n  ipa: (tmpl, list) => {\n    let obj = parse(tmpl, ['transcription', 'lang', 'audio'])\n    obj.lang = getLang(obj.template)\n    obj.template = 'ipa'\n    list.push(obj)\n    return ''\n  },\n  //https://en.wikipedia.org/wiki/Template:IPAc-en\n  ipac: (tmpl, list) => {\n    let obj = parse(tmpl)\n    obj.transcription = (obj.list || []).join(',')\n    delete obj.list\n    obj.lang = getLang(obj.template)\n    obj.template = 'ipac'\n    list.push(obj)\n    return ''\n  },\n\n  quote: (tmpl, list) => {\n    let obj = parse(tmpl, ['text', 'author'])\n    list.push(obj)\n    //create plaintext version\n    if (obj.text) {\n      let str = `\"${obj.text}\"`\n      if (obj.author) {\n        str += '\\n\\n'\n        str += `    - ${obj.author}`\n      }\n      return str + '\\n'\n    }\n    return ''\n  },\n\n  //this one sucks - https://en.wikipedia.org/wiki/Template:GNIS\n  'cite gnis': (tmpl, list) => {\n    let obj = parse(tmpl, ['id', 'name', 'type'])\n    obj.type = 'gnis'\n    obj.template = 'citation'\n    list.push(obj)\n    return ''\n  },\n\n  'spoken wikipedia': (tmpl, list) => {\n    let obj = parse(tmpl, ['file', 'date'])\n    obj.template = 'audio'\n    list.push(obj)\n    return ''\n  },\n\n  //yellow card\n  yel: (tmpl, list) => {\n    let obj = parse(tmpl, ['min'])\n    list.push(obj)\n    if (obj.min) {\n      return `yellow: ${obj.min || ''}'` //no yellow-card emoji\n    }\n    return ''\n  },\n\n  subon: (tmpl, list) => {\n    let obj = parse(tmpl, ['min'])\n    list.push(obj)\n    if (obj.min) {\n      return `sub on: ${obj.min || ''}'` //no yellow-card emoji\n    }\n    return ''\n  },\n\n  suboff: (tmpl, list) => {\n    let obj = parse(tmpl, ['min'])\n    list.push(obj)\n    if (obj.min) {\n      return `sub off: ${obj.min || ''}'` //no yellow-card emoji\n    }\n    return ''\n  },\n\n  //https://en.wikipedia.org/wiki/Template:Sfn\n  sfn: (tmpl, list, parser, alias) => {\n    let obj = parse(tmpl, ['author', 'year', 'location'])\n    if (alias) {\n      obj.name = obj.template\n      obj.teplate = alias\n    }\n    list.push(obj)\n    return ''\n  },\n\n  //https://en.wikipedia.org/wiki/Template:Redirect\n  redirect: (tmpl, list) => {\n    let data = parse(tmpl, ['redirect'])\n    let lines = data.list || []\n    let links = []\n    for (let i = 0; i < lines.length; i += 2) {\n      links.push({\n        page: lines[i + 1],\n        desc: lines[i],\n      })\n    }\n    let obj = {\n      template: 'redirect',\n      redirect: data.redirect,\n      links: links,\n    }\n    list.push(obj)\n    return ''\n  },\n\n  //https://en.wikipedia.org/wiki/Template:Sister_project_links\n  'sister project links': (tmpl, list) => {\n    let data = parse(tmpl)\n    //rename 'wd' to 'wikidata'\n    let links = {}\n    Object.keys(sisterProjects).forEach((k) => {\n      if (data.hasOwnProperty(k) === true) {\n        links[sisterProjects[k]] = data[k] //.text();\n      }\n    })\n    let obj = {\n      template: 'sister project links',\n      links: links,\n    }\n    list.push(obj)\n    return ''\n  },\n\n  //https://en.wikipedia.org/wiki/Template:Subject_bar\n  'subject bar': (tmpl, list) => {\n    let data = parse(tmpl)\n    Object.keys(data).forEach((k) => {\n      //rename 'voy' to 'wikivoyage'\n      if (sisterProjects.hasOwnProperty(k)) {\n        data[sisterProjects[k]] = data[k]\n        delete data[k]\n      }\n    })\n    let obj = {\n      template: 'subject bar',\n      links: data,\n    }\n    list.push(obj)\n    return ''\n  },\n\n  //amazingly, this one does not obey any known patterns\n  //https://en.wikipedia.org/wiki/Template:Gallery\n  gallery: (tmpl, list) => {\n    let obj = parse(tmpl)\n    let images = (obj.list || []).filter((line) => /^ *File ?:/.test(line))\n    images = images.map((file) => {\n      let img = {\n        file: file,\n      }\n      // todo: add lang and domain information\n      return new Image(img).json()\n    })\n    obj = {\n      template: 'gallery',\n      images: images,\n    }\n    list.push(obj)\n    return ''\n  },\n\n  //https://en.wikipedia.org/wiki/Template:Sky\n  sky: (tmpl, list) => {\n    let obj = parse(tmpl, [\n      'asc_hours',\n      'asc_minutes',\n      'asc_seconds',\n      'dec_sign',\n      'dec_degrees',\n      'dec_minutes',\n      'dec_seconds',\n      'distance',\n    ])\n    let template = {\n      template: 'sky',\n      ascension: {\n        hours: obj.asc_hours,\n        minutes: obj.asc_minutes,\n        seconds: obj.asc_seconds,\n      },\n      declination: {\n        sign: obj.dec_sign,\n        degrees: obj.dec_degrees,\n        minutes: obj.dec_minutes,\n        seconds: obj.dec_seconds,\n      },\n      distance: obj.distance,\n    }\n    list.push(template)\n    return ''\n  },\n\n  // Parse https://en.wikipedia.org/wiki/Template:Medical_cases_chart -- see\n  // https://en.wikipedia.org/wiki/Module:Medical_cases_chart for the original\n  // parsing code.\n  'medical cases chart': (tmpl, list) => {\n    let order = [\n      'date',\n      'deathsExpr',\n      'recoveriesExpr',\n      'casesExpr',\n      '4thExpr',\n      '5thExpr',\n      'col1',\n      'col1Change',\n      'col2',\n      'col2Change',\n    ]\n\n    let obj = parse(tmpl)\n    obj.data = obj.data || ''\n    let rows = obj.data.split('\\n')\n\n    // Mimic row parsing in _buildBars in the Lua source, from the following\n    // line on:\n    //\n    //     for parameter in mw.text.gsplit(line, ';') do\n    let dataArray = rows.map((row) => {\n      let parameters = row.split(';')\n      let rowObject = {\n        options: new Map(),\n      }\n      let positionalIndex = 0\n      for (let i = 0; i < parameters.length; i++) {\n        let parameter = parameters[i].trim()\n        if (parameter.match(/^[a-zA-Z_]/)) {\n          // Named argument\n          let [key, value] = parameter.split('=')\n          // At this point, the Lua code evaluates alttot1 and alttot2 values as\n          // #expr expressions, but we just pass them through. See also:\n          // https://www.mediawiki.org/wiki/Help:Extension:ParserFunctions##expr\n          if (value === undefined) {\n            value = null\n          }\n          rowObject.options.set(key, value)\n        } else {\n          // Positional argument\n          // Here again, the Lua code evaluates arguments at index 1 through 5\n          // as #expr expressions, but we just pass them through.\n          if (positionalIndex < order.length) {\n            rowObject[order[positionalIndex]] = parameter\n          }\n          positionalIndex++\n        }\n      }\n      for (; positionalIndex < order.length; positionalIndex++) {\n        rowObject[order[positionalIndex]] = null\n      }\n      return rowObject\n    })\n    obj.data = dataArray\n    list.push(obj)\n    return ''\n  },\n\n  graph: (tmpl, list) => {\n    let data = parse(tmpl)\n    if (data.x) {\n      data.x = data.x.split(',').map((str) => str.trim())\n    }\n    if (data.y) {\n      data.y = data.y.split(',').map((str) => str.trim())\n    }\n    let y = 1\n    while (data['y' + y]) {\n      data['y' + y] = data['y' + y].split(',').map((str) => str.trim())\n      y += 1\n    }\n    list.push(data)\n    return ''\n  },\n\n  //https://en.wikipedia.org/wiki/Template:Historical_populations\n  'historical populations': (tmpl, list) => {\n    let data = parse(tmpl)\n    data.list = data.list || []\n    let years = []\n    for (let i = 0; i < data.list.length; i += 2) {\n      let num = data.list[i + 1]\n      years.push({\n        year: data.list[i],\n        val: Number(num) || num,\n      })\n    }\n    data.data = years\n    delete data.list\n    list.push(data)\n    return ''\n  },\n\n  // this one is a handful!\n  //https://en.wikipedia.org/wiki/Template:Weather_box\n  'weather box': (tmpl, list) => {\n    const hasMonth = /^jan /i\n    const isYear = /^year /i\n    let obj = parse(tmpl)\n    const monthList = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']\n    let byMonth = {}\n    let properties = Object.keys(obj).filter((k) => hasMonth.test(k))\n    properties = properties.map((k) => k.replace(hasMonth, ''))\n    properties.forEach((prop) => {\n      byMonth[prop] = []\n      monthList.forEach((m) => {\n        let key = `${m} ${prop}`\n        if (obj.hasOwnProperty(key)) {\n          let num = toNumber(obj[key])\n          delete obj[key]\n          byMonth[prop].push(num)\n        }\n      })\n    })\n    //add these to original\n    obj.byMonth = byMonth\n    //collect year-based data\n    let byYear = {}\n    Object.keys(obj).forEach((k) => {\n      if (isYear.test(k)) {\n        let prop = k.replace(isYear, '')\n        byYear[prop] = obj[k]\n        delete obj[k]\n      }\n    })\n    obj.byYear = byYear\n    list.push(obj)\n    return ''\n  },\n\n  //The 36 parameters are: 12 monthly highs (C), 12 lows (total 24) plus an optional 12 monthly rain/precipitation\n  //https://en.wikipedia.org/wiki/Template:Weather_box/concise_C\n  'weather box/concise c': (tmpl, list) => {\n    let obj = parse(tmpl)\n    obj.list = obj.list.map((s) => toNumber(s))\n    obj.byMonth = {\n      'high c': obj.list.slice(0, 12),\n      'low c': obj.list.slice(12, 24),\n      'rain mm': obj.list.slice(24, 36),\n    }\n    delete obj.list\n    obj.template = 'weather box'\n    list.push(obj)\n    return ''\n  },\n\n  'weather box/concise f': (tmpl, list) => {\n    let obj = parse(tmpl)\n    obj.list = obj.list.map((s) => toNumber(s))\n    obj.byMonth = {\n      'high f': obj.list.slice(0, 12),\n      'low f': obj.list.slice(12, 24),\n      'rain inch': obj.list.slice(24, 36),\n    }\n    delete obj.list\n    obj.template = 'weather box'\n    list.push(obj)\n    return ''\n  },\n\n  //https://en.wikipedia.org/wiki/Template:Climate_chart\n  'climate chart': (tmpl, list) => {\n    let lines = parse(tmpl).list || []\n    let title = lines[0]\n    let source = lines[38]\n    lines = lines.slice(1)\n    //amazingly, they use '\u2212' symbol here instead of negatives...\n    lines = lines.map((str) => {\n      if (str && str[0] === '\u2212') {\n        str = str.replace(/\u2212/, '-')\n      }\n      return str\n    })\n    let months = []\n    //groups of three, for 12 months\n    for (let i = 0; i < 36; i += 3) {\n      months.push({\n        low: toNumber(lines[i]),\n        high: toNumber(lines[i + 1]),\n        precip: toNumber(lines[i + 2]),\n      })\n    }\n    let obj = {\n      template: 'climate chart',\n      data: {\n        title: title,\n        source: source,\n        months: months,\n      },\n    }\n    list.push(obj)\n    return ''\n  },\n  //https://en.wikipedia.org/wiki/Template:MedalCount\n  'medalcount': (tmpl, list) => {\n    let all = parse(tmpl).list || []\n    let lines = []\n    for (let i = 0; i < all.length; i += 4) {\n      lines.push({\n        name: all[i],\n        '1st': Number(all[i + 1]),\n        '2nd': Number(all[i + 2]),\n        '3rd': Number(all[i + 3]),\n      })\n    }\n    let obj = {\n      template: 'medalcount',\n      list: lines\n    }\n    list.push(obj)\n    return ''\n  }\n}\n", "let templates = {\n  //https://en.wikipedia.org/wiki/Category:External_link_templates\n  'find a grave': ['id', 'name', 'work', 'last', 'first', 'date', 'accessdate'],\n  congbio: ['id', 'name', 'date'],\n  'hollywood walk of fame': ['name'],\n  'wide image': ['file', 'width', 'caption'],\n  audio: ['file', 'text', 'type'],\n  rp: ['page'],\n  'short description': ['description'],\n  'coord missing': ['region'],\n  unreferenced: ['date'],\n  'taxon info': ['taxon', 'item'], //https://en.wikipedia.org/wiki/Template:Taxon_info\n  'portuguese name': ['first', 'second', 'suffix'], // https://en.wikipedia.org/wiki/Template:Portuguese_name\n  geo: ['lat', 'lon', 'zoom'], //https://en.wikivoyage.org/wiki/Template:Geo\n  hatnote: ['text']\n}\n\n\nimport idName from './id-name.js'\nimport idTitle from './id-title.js'\nimport fns from './functions.js'\n\ntemplates = Object.assign(\n  templates,\n  idName,\n  idTitle,\n  fns\n)\n\nexport default templates\n", "const mlbplayer = {\n  props: ['number', 'name', 'il'],\n  out: 'name',\n}\nconst syntaxhighlight = {\n  props: [],\n  out: 'code',\n}\nconst samp = {\n  props: ['1'],\n  out: '1',\n}\nconst sub = {\n  props: ['text'],\n  out: 'text',\n}\nconst sup = {\n  props: ['text'],\n  out: 'text',\n}\nconst chem2 = {\n  props: ['equation'],\n  out: 'equation',\n}\nconst ill = {\n  props: ['text', 'lan1', 'text1', 'lan2', 'text2'],\n  out: 'text',\n}\nconst abbr = {\n  props: ['abbr', 'meaning', 'ipa'],\n  out: 'abbr',\n}\n\nexport default {\n  mlbplayer,\n  syntaxhighlight,\n  samp,\n  sub,\n  sup,\n  chem2,\n  ill,\n  abbr,\n}", "import parse from '../../parse/toJSON/index.js'\nimport { percentage } from '../_lib.js'\n\nlet templates = {\n  // https://en.wikipedia.org/wiki/Template:Math\n  math: (tmpl, list) => {\n    let obj = parse(tmpl, ['formula'])\n    list.push(obj)\n    return '\\n\\n' + (obj.formula || '') + '\\n\\n'\n  },\n\n  //svg labels - https://en.m.wikipedia.org/wiki/Template:Legend\n  legend: (tmpl, list) => {\n    let obj = parse(tmpl, ['color', 'label'])\n    list.push(obj)\n    // return obj.label || ' '\n    return tmpl // keep the wiki?\n  },\n\n  isbn: (tmpl, list) => {\n    let obj = parse(tmpl, ['id', 'id2', 'id3'])\n    list.push(obj)\n    return 'ISBN ' + (obj.id || '')\n  },\n\n  //https://en.wikipedia.org/wiki/Template:Based_on\n  'based on': (tmpl, list) => {\n    let obj = parse(tmpl, ['title', 'author'])\n    list.push(obj)\n    return `${obj.title} by ${obj.author || ''}`\n  },\n\n  //barrels of oil https://en.wikipedia.org/wiki/Template:Bbl_to_t\n  'bbl to t': (tmpl, list) => {\n    let obj = parse(tmpl, ['barrels'])\n    list.push(obj)\n    if (obj.barrels === '0') {\n      return obj.barrels + ' barrel'\n    }\n    return obj.barrels + ' barrels'\n  },\n\n  //minor planet - https://en.wikipedia.org/wiki/Template:MPC\n  mpc: (tmpl, list) => {\n    let obj = parse(tmpl, ['number', 'text'])\n    list.push(obj)\n    return `[https://minorplanetcenter.net/db_search/show_object?object_id=P/2011+NO1 ${obj.text || obj.number}]`\n  },\n\n  pengoal: (_tmpl, list) => {\n    list.push({\n      template: 'pengoal',\n    })\n    return '\u2705'\n  },\n\n  penmiss: (_tmpl, list) => {\n    list.push({\n      template: 'penmiss',\n    })\n    return '\u274C'\n  },\n\n  // https://en.wikipedia.org/wiki/Template:Ordered_list\n  'ordered list': (tmpl, list) => {\n    let obj = parse(tmpl)\n    list.push(obj)\n    obj.list = obj.list || []\n    let lines = obj.list.map((str, i) => `${i + 1}. ${str}`)\n    return lines.join('\\n\\n')\n  },\n\n  // https://en.wikipedia.org/wiki/Template:Title_year\n  'title year': (tmpl, _list, _alias, _parse, doc) => {\n    let obj = parse(tmpl, ['match', 'nomatch', 'page'])\n    let title = obj.page || doc.title()\n    if (title) {\n      let m = title.match(/\\b[0-9]{4}\\b/) //parse the year out of the title's name\n      if (m) {\n        return m[0]\n      }\n    }\n    return obj.nomatch || '' //use default response\n  },\n\n  // https://en.wikipedia.org/wiki/Template:Title_century\n  'title century': (tmpl, _list, _alias, _parse, doc) => {\n    let obj = parse(tmpl, ['match', 'nomatch', 'page'])\n    let title = obj.page || doc.title()\n    if (title) {\n      let m = title.match(/\\b([0-9]+)(st|nd|rd|th)\\b/) //parse the century out of the title's name\n      if (m) {\n        return m[1] || ''\n      }\n    }\n    return obj.nomatch || '' //use default response\n  },\n\n  // https://en.wikipedia.org/wiki/Template:Title_decade\n  'title decade': (tmpl, _list, _alias, _parse, doc) => {\n    let obj = parse(tmpl, ['match', 'nomatch', 'page'])\n    let title = obj.page || doc.title()\n    if (title) {\n      let m = title.match(/\\b([0-9]+)s\\b/) //parse the decade out of the title's name\n      if (m) {\n        return m[1] || ''\n      }\n    }\n    return obj.nomatch || '' //use default response\n  },\n\n  //https://en.wikipedia.org/wiki/Template:Nihongo\n  nihongo: (tmpl, list) => {\n    let obj = parse(tmpl, ['english', 'kanji', 'romaji', 'extra'])\n    list.push(obj)\n    let str = obj.english || obj.romaji || ''\n    if (obj.kanji) {\n      str += ` (${obj.kanji})`\n    }\n    return str\n  },\n\n  //https://en.wikipedia.org/wiki/Template:Marriage\n  //this one creates a template, and an inline response\n  marriage: (tmpl, list) => {\n    let data = parse(tmpl, ['spouse', 'from', 'to', 'end'])\n    list.push(data)\n    let str = data.spouse || ''\n    if (data.from) {\n      if (data.to) {\n        str += ` (m. ${data.from}-${data.to})`\n      } else {\n        str += ` (m. ${data.from})`\n      }\n    }\n    return str\n  },\n\n  //'red' card - {{sent off|cards|min1|min2}}\n  'sent off': (tmpl, list) => {\n    let obj = parse(tmpl, ['cards'])\n    let result = {\n      template: 'sent off',\n      cards: obj.cards,\n      minutes: obj.list || [],\n    }\n    list.push(result)\n    let mins = result.minutes.map((m) => m + \"'\").join(', ')\n    return 'sent off: ' + mins\n  },\n\n  transl: (tmpl, list) => {\n    let obj = parse(tmpl, ['lang', 'text', 'text2'])\n    // support 3-param\n    if (obj.text2) {\n      obj.iso = obj.text\n      obj.text = obj.text2\n      delete obj.text2\n    }\n    list.push(obj)\n    return obj.text || ''\n  },\n\n  //show/hide: https://en.wikipedia.org/wiki/Template:Collapsible_list\n  'collapsible list': (tmpl, list) => {\n    let obj = parse(tmpl)\n    list.push(obj)\n    let str = ''\n    if (obj.title) {\n      str += `'''${obj.title}'''` + '\\n\\n'\n    }\n    if (!obj.list) {\n      obj.list = []\n      for (let i = 1; i < 10; i += 1) {\n        if (obj[i]) {\n          obj.list.push(obj[i])\n          delete obj[i]\n        }\n      }\n    }\n    obj.list = obj.list.filter((s) => s)\n    str += obj.list.join('\\n\\n')\n    return str\n  },\n\n  //https://en.wikipedia.org/wiki/Template:Columns-list\n  'columns-list': (tmpl, list) => {\n    let arr = parse(tmpl).list || []\n    let str = arr[0] || ''\n    let lines = str.split(/\\n/).filter((f) => f)\n    lines = lines.map((s) => s.replace(/\\*/, ''))\n    list.push({\n      template: 'columns-list',\n      list: lines,\n    })\n    lines = lines.map((s) => '\u2022 ' + s)\n    return lines.join('\\n\\n')\n  },\n\n  //https://en.wikipedia.org/wiki/Template:Height - {{height|ft=6|in=1}}\n  height: (tmpl, list) => {\n    let obj = parse(tmpl)\n    list.push(obj)\n    let result = []\n    let units = ['m', 'cm', 'ft', 'in'] //order matters\n    units.forEach((unit) => {\n      if (obj.hasOwnProperty(unit) === true) {\n        result.push(obj[unit] + unit)\n      }\n    })\n    return result.join(' ')\n  },\n\n  //https://en.wikipedia.org/wiki/Template:Sic\n  sic: (tmpl, list) => {\n    let obj = parse(tmpl, ['one', 'two', 'three'])\n    let word = (obj.one || '') + (obj.two || '')\n    //support '[sic?]'\n    if (obj.one === '?') {\n      word = (obj.two || '') + (obj.three || '')\n    }\n    list.push({\n      template: 'sic',\n      word: word,\n    })\n    if (obj.nolink === 'y') {\n      return word\n    }\n    return `${word} [sic]`\n  },\n\n  //\n  inrconvert: (tmpl, list) => {\n    let o = parse(tmpl, ['rupee_value', 'currency_formatting'])\n    list.push(o)\n    const mults = {\n      k: 1000,\n      m: 1000000,\n      b: 1000000000,\n      t: 1000000000000,\n      l: 100000,\n      c: 10000000,\n      lc: 1000000000000,\n    }\n    if (o.currency_formatting) {\n      let multiplier = mults[o.currency_formatting] || 1\n      o.rupee_value = o.rupee_value * multiplier\n    }\n    return `inr ${o.rupee_value || ''}`\n  },\n\n  //fraction - https://en.wikipedia.org/wiki/Template:Sfrac\n  frac: (tmpl, list) => {\n    let obj = parse(tmpl, ['a', 'b', 'c'])\n    let data = {\n      template: 'sfrac',\n    }\n    if (obj.c) {\n      data.integer = obj.a\n      data.numerator = obj.b\n      data.denominator = obj.c\n    } else if (obj.b) {\n      data.numerator = obj.a\n      data.denominator = obj.b\n    } else {\n      data.numerator = 1\n      data.denominator = obj.a\n    }\n    list.push(data)\n    if (data.integer) {\n      return `${data.integer} ${data.numerator}\u2044${data.denominator}`\n    }\n    return `${data.numerator}\u2044${data.denominator}`\n  },\n\n  'winning percentage': (tmpl, list) => {\n    let obj = parse(tmpl, ['wins', 'losses', 'ties'])\n    list.push(obj)\n    let wins = Number(obj.wins)\n    let losses = Number(obj.losses)\n    let ties = Number(obj.ties) || 0\n    let games = wins + losses + ties\n    if (obj.ignore_ties === 'y') {\n      ties = 0\n    }\n    if (ties) {\n      wins += ties / 2\n    }\n    let num = percentage({\n      numerator: wins,\n      denominator: games,\n      decimals: 1,\n    })\n    if (num === null) {\n      return ''\n    }\n    return `.${num * 10}`\n  },\n\n  winlosspct: (tmpl, list) => {\n    let obj = parse(tmpl, ['wins', 'losses'])\n    list.push(obj)\n    let wins = Number(obj.wins)\n    let losses = Number(obj.losses)\n    let num = percentage({\n      numerator: wins,\n      denominator: wins + losses,\n      decimals: 1,\n    })\n    if (num === null) {\n      return ''\n    }\n    let out = `.${num * 10}`\n    return `${wins || 0} || ${losses || 0} || ${out || '-'}`\n  },\n\n  //https://en.wikipedia.org/wiki/Template:Video_game_release\n  'video game release': (tmpl, list) => {\n    let order = ['region', 'date', 'region2', 'date2', 'region3', 'date3', 'region4', 'date4']\n    let obj = parse(tmpl, order)\n    let template = {\n      template: 'video game release',\n      releases: [],\n    }\n    for (let i = 0; i < order.length; i += 2) {\n      if (obj[order[i]]) {\n        template.releases.push({\n          region: obj[order[i]],\n          date: obj[order[i + 1]],\n        })\n      }\n    }\n    list.push(template)\n    let str = template.releases.map((o) => `${o.region}: ${o.date || ''}`).join('\\n\\n')\n    return '\\n' + str + '\\n'\n  },\n  // https://en.m.wikipedia.org/wiki/Template:USS\n  uss: (tmpl, list) => {\n    let obj = parse(tmpl, ['name', 'id'])\n    list.push(obj)\n    if (obj.id) {\n      return `[[USS ${obj.name} (${obj.id})|USS ''${obj.name}'' (${obj.id})]]`\n    }\n    return `[[USS ${obj.name}|USS ''${obj.name}'']]`\n  },\n  // https://en.wikipedia.org/wiki/Template:Blockquote\n  blockquote: (tmpl, list) => {\n    let props = ['text', 'author', 'title', 'source', 'character']\n    let obj = parse(tmpl, props)\n    list.push(obj)\n    let txt = obj.text\n    // used first un-named param\n    if (!txt) {\n      obj.list = obj.list || []\n      txt = obj.list[0] || ''\n    }\n    // replace double quotes with singles and put the text inside double quotes\n    let result = txt.replace(/\"/g, '\\'')\n    result = '\"' + result + '\"'\n    return result\n  },\n\n}\nexport default templates\n", "import parse from '../../parse/toJSON/index.js'\n\nconst codes = {\n  '\u00A3': 'GB\u00A3', // https://en.wikipedia.org/wiki/Template:GBP\n  '\u00A5': '\u00A5', // https://en.wikipedia.org/wiki/Template:JPY\n  '\u09F3': '\u09F3', // https://en.wikipedia.org/wiki/Template:BDT\n  '\u20A9': '\u20A9', // https://en.wikipedia.org/wiki/Template:SK_won\n  '\u20AC': '\u20AC', // https://en.wikipedia.org/wiki/Template:\u20AC\n  '\u20B1': '\u20B1', // https://en.wikipedia.org/wiki/Template:Philippine_peso\n  '\u20B9': '\u20B9', // https://en.wikipedia.org/wiki/Template:Indian_Rupee\n  '\u20BD': '\u20BD', // https://en.wikipedia.org/wiki/Template:RUB\n  'cn\u00A5': 'CN\u00A5', // https://en.wikipedia.org/wiki/Template:CNY\n  'gb\u00A3': 'GB\u00A3', // https://en.wikipedia.org/wiki/Template:GBP\n  'india rs': '\u20B9', // https://en.wikipedia.org/wiki/Template:Indian_Rupee\n  'indian rupee symbol': '\u20B9', // https://en.wikipedia.org/wiki/Template:Indian_Rupee\n  'indian rupee': '\u20B9', // https://en.wikipedia.org/wiki/Template:Indian_Rupee\n  'indian rupees': '\u20B9', // https://en.wikipedia.org/wiki/Template:Indian_Rupee\n  'philippine peso': '\u20B1', // https://en.wikipedia.org/wiki/Template:Philippine_peso\n  'russian ruble': '\u20BD', // https://en.wikipedia.org/wiki/Template:Russian_ruble\n  'SK won': '\u20A9', // https://en.wikipedia.org/wiki/Template:SK_won\n  'turkish lira': 'TRY', //https://en.wikipedia.org/wiki/Template:Turkish_lira\n  a$: 'A$', // https://en.wikipedia.org/wiki/Template:AUD\n  au$: 'A$', //https://en.wikipedia.org/wiki/Template:AUD\n  aud: 'A$', //https://en.wikipedia.org/wiki/Template:AUD\n  bdt: 'BDT', //https://en.wikipedia.org/wiki/Template:BDT\n  brl: 'BRL', //https://en.wikipedia.org/wiki/Template:BRL\n  ca$: 'CA$', // https://en.wikipedia.org/wiki/Template:CAD\n  cad: 'CA$', // https://en.wikipedia.org/wiki/Template:CAD\n  chf: 'CHF', // https://en.wikipedia.org/wiki/Template:CHF\n  cny: 'CN\u00A5', // https://en.wikipedia.org/wiki/Template:CNY\n  czk: 'czk', // https://en.wikipedia.org/wiki/Template:CZK\n  dkk: 'dkk', // https://en.wikipedia.org/wiki/Template:DKK\n  dkk2: 'dkk', // https://en.wikipedia.org/wiki/Template:DKK\n  euro: '\u20AC', // https://en.wikipedia.org/wiki/Template:\u20AC\n  gbp: 'GB\u00A3', // https://en.wikipedia.org/wiki/Template:GBP\n  hk$: 'HK$', // https://en.wikipedia.org/wiki/Template:HKD\n  hkd: 'HK$', // https://en.wikipedia.org/wiki/Template:HKD\n  ils: 'ILS', // https://en.wikipedia.org/wiki/Template:ILS\n  inr: '\u20B9', // https://en.wikipedia.org/wiki/Template:Indian_Rupee\n  jpy: '\u00A5', // https://en.wikipedia.org/wiki/Template:JPY\n  myr: 'MYR', // https://en.wikipedia.org/wiki/Template:MYR\n  nis: 'ILS', // https://en.wikipedia.org/wiki/Template:ILS\n  nok: 'NOK', //https://en.wikipedia.org/wiki/Template:NOK\n  nok2: 'NOK', //https://en.wikipedia.org/wiki/Template:NOK\n  nz$: 'NZ$', //https://en.wikipedia.org/wiki/Template:NZD\n  nzd: 'NZ$', //https://en.wikipedia.org/wiki/Template:NZD\n  peso: 'peso', //https://en.wikipedia.org/wiki/Template:Peso\n  pkr: '\u20A8', // https://en.wikipedia.org/wiki/Template:Pakistani_Rupee\n  r$: 'BRL', //https://en.wikipedia.org/wiki/Template:BRL\n  rmb: 'CN\u00A5', // https://en.wikipedia.org/wiki/Template:CNY\n  rub: '\u20BD', // https://en.wikipedia.org/wiki/Template:RUB\n  ruble: '\u20BD', // https://en.wikipedia.org/wiki/Template:Ruble\n  rupee: '\u20B9', // https://en.wikipedia.org/wiki/Template:Rupee\n  s$: 'sgd', // https://en.wikipedia.org/wiki/Template:SGD\n  sek: 'SEK', // https://en.wikipedia.org/wiki/Template:SEK\n  sek2: 'SEK', // https://en.wikipedia.org/wiki/Template:SEK\n  sfr: 'CHF', // https://en.wikipedia.org/wiki/Template:CHF\n  sgd: 'sgd', // https://en.wikipedia.org/wiki/Template:SGD\n  shekel: 'ILS', // https://en.wikipedia.org/wiki/Template:ILS\n  sheqel: 'ILS', // https://en.wikipedia.org/wiki/Template:ILS\n  ttd: 'TTD', //https://en.wikipedia.org/wiki/Template:TTD\n  us$: 'US$', // https://en.wikipedia.org/wiki/Template:US$\n  usd: 'US$', // https://en.wikipedia.org/wiki/Template:US$\n  yen: '\u00A5', // https://en.wikipedia.org/wiki/Template:JPY\n  zar: 'R', //https://en.wikipedia.org/wiki/Template:ZAR\n}\n\nconst parseCurrency = (tmpl, list) => {\n  let o = parse(tmpl, ['amount', 'code'])\n  list.push(o)\n  let code = o.template || ''\n  if (code === 'currency') {\n    code = o.code\n    if (!code) {\n      o.code = code = 'usd' //Special case when currency template has no code argument\n    }\n  } else if (code === '' || code === 'monnaie' || code === 'unit\u00E9' || code === 'nombre' || code === 'nb') {\n    code = o.code\n  }\n  code = (code || '').toLowerCase()\n  if (code === 'us') {\n    o.code = code = 'usd'\n  } else if (code === 'uk') {\n    o.code = code = 'gbp'\n  }\n  let str = `${codes[code] || ''}${o.amount || ''}`\n  //support unknown currencies after the number - like '5 BTC'\n  if (o.code && !codes[o.code.toLowerCase()]) {\n    str += ' ' + o.code\n  }\n  return str\n}\n\nlet templates = {\n  currency: parseCurrency,\n}\n//and the others fit the same pattern\nObject.keys(codes).forEach((k) => {\n  templates[k] = parseCurrency\n})\n\nexport default templates\n", "\n\n//this is allowed to be rough\nconst day = 1000 * 60 * 60 * 24\nconst month = day * 30\nconst year = day * 365\n\nconst getEpoch = function (obj) {\n  return new Date(`${obj.year}-${obj.month || 0}-${obj.date || 1}`).getTime()\n}\n\n//very rough!\nconst delta = function (from, to) {\n  from = getEpoch(from)\n  to = getEpoch(to)\n  let diff = to - from\n  let obj = {}\n  //get years\n  let years = Math.floor(diff / year)\n  if (years > 0) {\n    obj.years = years\n    diff -= obj.years * year\n  }\n  //get months\n  let monthCount = Math.floor(diff / month)\n  if (monthCount > 0) {\n    obj.months = monthCount\n    diff -= obj.months * month\n  }\n  //get days\n  let days = Math.floor(diff / day)\n  if (days > 0) {\n    obj.days = days\n    // diff -= (obj.days * day);\n  }\n  return obj\n}\n\n//not all too fancy - used in {{timesince}}\nconst timeSince = function (str) {\n  let d = new Date(str)\n  if (isNaN(d.getTime())) {\n    return ''\n  }\n  let now = new Date()\n  let delt = now.getTime() - d.getTime()\n  let predicate = 'ago'\n  if (delt < 0) {\n    predicate = 'from now'\n    delt = Math.abs(delt)\n  }\n  //figure out units\n  let hours = delt / 1000 / 60 / 60\n  let days = hours / 24\n  if (days < 365) {\n    return Number(days) + ' days ' + predicate\n  }\n  let years = days / 365\n  return Number(years) + ' years ' + predicate\n}\n\nconst days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n\nexport { days, timeSince, delta }", "//assorted parsing methods for date/time templates\nconst months = [\n  undefined, //1-based months.. :/\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n]\n\nconst monthName = months.reduce((h, str, i) => {\n  if (i === 0) {\n    return h\n  }\n  h[str.toLowerCase()] = i\n  h[str.substring(0, 3).toLowerCase()] = i\n  return h\n}, {})\n\n//parse year|month|date numbers\nconst ymd = function (arr) {\n  let obj = {}\n  let units = ['year', 'month', 'date', 'hour', 'minute', 'second']\n  //parse each unit in sequence..\n  for (let i = 0; i < units.length; i += 1) {\n    //skip it\n    if (!arr[i] && arr[1] !== 0) {\n      continue\n    }\n    let num = parseInt(arr[i], 10)\n    if (isNaN(num) === false) {\n      obj[units[i]] = num //we good.\n    } else if (units[i] === 'month') {\n      let m = arr[i].toLowerCase().trim()\n      //try for month-name, like 'january\n      if (monthName.hasOwnProperty(m)) {\n        let month = monthName[m]\n        obj[units[i]] = month\n      }\n    } else {\n      //we dead. so skip this unit\n      delete obj[units[i]]\n    }\n  }\n  //try for timezone,too ftw\n  let last = arr[arr.length - 1] || ''\n  last = String(last)\n  if (last.toLowerCase() === 'z') {\n    obj.tz = 'UTC'\n  } else if (/[+-][0-9]+:[0-9]/.test(last)) {\n    obj.tz = arr[6]\n  }\n  return obj\n}\n\n//zero-pad a number\nconst pad = function (num) {\n  if (num < 10) {\n    return '0' + num\n  }\n  return String(num)\n}\n\nconst toText = function (date) {\n  //eg '1995'\n  let str = String(date.year || '')\n  if (date.month !== undefined && months.hasOwnProperty(date.month) === true) {\n    if (date.date === undefined) {\n      //January 1995\n      str = `${months[date.month]} ${date.year}`\n    } else {\n      //January 5, 1995\n      str = `${months[date.month]} ${date.date}, ${date.year}`\n      //add times, if available\n      if (date.hour !== undefined && date.minute !== undefined) {\n        let time = `${pad(date.hour)}:${pad(date.minute)}`\n        if (date.second !== undefined) {\n          time = time + ':' + pad(date.second)\n        }\n        str = time + ', ' + str\n        //add timezone, if there, at the end in brackets\n      }\n      if (date.tz) {\n        str += ` (${date.tz})`\n      }\n    }\n  }\n  return str\n}\n\nexport { toText, ymd }\n\n// console.log(toText(ymd([2018, 3, 28])));\n", "import strip from '../../../parse/toJSON/_strip.js'\nimport parse from '../../../parse/toJSON/index.js'\nimport { delta } from './_lib.js'\nimport { ymd, toText } from './_format.js'\n\n//wrap it up as a template\nconst template = function (date) {\n  return {\n    template: 'date',\n    data: date,\n  }\n}\n\nconst getBoth = function (tmpl) {\n  tmpl = strip(tmpl)\n  let arr = tmpl.split('|')\n  let from = ymd(arr.slice(1, 4))\n  let to = arr.slice(4, 7)\n  //assume now, if 'to' is empty\n  if (to.length === 0) {\n    let d = new Date()\n    to = [d.getFullYear(), d.getMonth(), d.getDate()]\n  }\n  to = ymd(to)\n  return {\n    from: from,\n    to: to,\n  }\n}\n\nconst parsers = {\n  //generic {{date|year|month|date}} template\n  date: (tmpl, list) => {\n    let order = ['year', 'month', 'date', 'hour', 'minute', 'second', 'timezone']\n    let obj = parse(tmpl, order)\n    let data = ymd([obj.year, obj.month, obj.date || obj.day])\n    obj.text = toText(data) //make the replacement string\n    if (obj.timezone) {\n      if (obj.timezone === 'Z') {\n        obj.timezone = 'UTC'\n      }\n      obj.text += ` (${obj.timezone})`\n    }\n    if (obj.hour && obj.minute) {\n      if (obj.second) {\n        obj.text = `${obj.hour}:${obj.minute}:${obj.second}, ` + obj.text\n      } else {\n        obj.text = `${obj.hour}:${obj.minute}, ` + obj.text\n      }\n    }\n    if (obj.text) {\n      list.push(template(obj))\n    }\n    return obj.text\n  },\n\n  //support parsing of 'February 10, 1992'\n  natural_date: (tmpl, list) => {\n    let obj = parse(tmpl, ['text'])\n    let str = obj.text || ''\n    // - just a year\n    let date = {}\n    if (/^[0-9]{4}$/.test(str)) {\n      date.year = parseInt(str, 10)\n    } else {\n      //parse the date, using the js date object (for now?)\n      let txt = str.replace(/[a-z]+\\/[a-z]+/i, '')\n      txt = txt.replace(/[0-9]+:[0-9]+(am|pm)?/i, '')\n      let d = new Date(txt)\n      if (isNaN(d.getTime()) === false) {\n        date.year = d.getFullYear()\n        date.month = d.getMonth() + 1\n        date.date = d.getDate()\n      }\n    }\n    list.push(template(date))\n    return str.trim()\n  },\n\n  //just grab the first value, and assume it's a year\n  one_year: (tmpl, list) => {\n    let obj = parse(tmpl, ['year'])\n    let year = Number(obj.year)\n    list.push(\n      template({\n        year: year,\n      })\n    )\n    return String(year)\n  },\n\n  //assume 'y|m|d' | 'y|m|d' // {{BirthDeathAge|B|1976|6|6|1990|8|8}}\n  two_dates: (tmpl, list) => {\n    let order = ['b', 'birth_year', 'birth_month', 'birth_date', 'death_year', 'death_month', 'death_date']\n    let obj = parse(tmpl, order)\n    //'b' means show birth-date, otherwise show death-date\n    if (obj.b && obj.b.toLowerCase() === 'b') {\n      let date = ymd([obj.birth_year, obj.birth_month, obj.birth_date])\n      list.push(template(date))\n      return toText(date)\n    }\n    let date = ymd([obj.death_year, obj.death_month, obj.death_date])\n    list.push(template(date))\n    return toText(date)\n  },\n\n  age: (tmpl) => {\n    let d = getBoth(tmpl)\n    let diff = delta(d.from, d.to)\n    return diff.years || 0\n  },\n\n  'diff-y': (tmpl) => {\n    let d = getBoth(tmpl)\n    let diff = delta(d.from, d.to)\n    if (diff.years === 1) {\n      return diff.years + ' year'\n    }\n    return (diff.years || 0) + ' years'\n  },\n\n  'diff-ym': (tmpl) => {\n    let d = getBoth(tmpl)\n    let diff = delta(d.from, d.to)\n    let arr = []\n    if (diff.years === 1) {\n      arr.push(diff.years + ' year')\n    } else if (diff.years && diff.years !== 0) {\n      arr.push(diff.years + ' years')\n    }\n    if (diff.months === 1) {\n      arr.push('1 month')\n    } else if (diff.months && diff.months !== 0) {\n      arr.push(diff.months + ' months')\n    }\n    return arr.join(', ')\n  },\n\n  'diff-ymd': (tmpl) => {\n    let d = getBoth(tmpl)\n    let diff = delta(d.from, d.to)\n    let arr = []\n    if (diff.years === 1) {\n      arr.push(diff.years + ' year')\n    } else if (diff.years && diff.years !== 0) {\n      arr.push(diff.years + ' years')\n    }\n    if (diff.months === 1) {\n      arr.push('1 month')\n    } else if (diff.months && diff.months !== 0) {\n      arr.push(diff.months + ' months')\n    }\n    if (diff.days === 1) {\n      arr.push('1 day')\n    } else if (diff.days && diff.days !== 0) {\n      arr.push(diff.days + ' days')\n    }\n    return arr.join(', ')\n  },\n\n  'diff-yd': (tmpl) => {\n    let d = getBoth(tmpl)\n    let diff = delta(d.from, d.to)\n    let arr = []\n    if (diff.years === 1) {\n      arr.push(diff.years + ' year')\n    } else if (diff.years && diff.years !== 0) {\n      arr.push(diff.years + ' years')\n    }\n    //ergh...\n    diff.days += (diff.months || 0) * 30\n    if (diff.days === 1) {\n      arr.push('1 day')\n    } else if (diff.days && diff.days !== 0) {\n      arr.push(diff.days + ' days')\n    }\n    return arr.join(', ')\n  },\n\n  'diff-d': (tmpl) => {\n    let d = getBoth(tmpl)\n    let diff = delta(d.from, d.to)\n    let arr = []\n    //ergh...\n    diff.days += (diff.years || 0) * 365\n    diff.days += (diff.months || 0) * 30\n    if (diff.days === 1) {\n      arr.push('1 day')\n    } else if (diff.days && diff.days !== 0) {\n      arr.push(diff.days + ' days')\n    }\n    return arr.join(', ')\n  },\n}\nexport default parsers\n", "import parsers from './_parsers.js'\nimport parse from '../../../parse/toJSON/index.js'\nimport { days, timeSince } from './_lib.js'\nimport { toOrdinal } from '../../_lib.js'\nimport { ymd, toText } from './_format.js'\n\nconst months = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n]\n\n//date- templates we support\nexport default {\n  currentday: () => {\n    let d = new Date()\n    return String(d.getDate())\n  },\n  currentdayname: () => {\n    let d = new Date()\n    return days[d.getDay()]\n  },\n  currentmonth: () => {\n    let d = new Date()\n    return months[d.getMonth()]\n  },\n  currentyear: () => {\n    let d = new Date()\n    return String(d.getFullYear())\n  },\n  monthyear: () => {\n    let d = new Date()\n    return months[d.getMonth()] + ' ' + d.getFullYear()\n  },\n  'monthyear-1': () => {\n    let d = new Date()\n    d.setMonth(d.getMonth() - 1)\n    return months[d.getMonth()] + ' ' + d.getFullYear()\n  },\n  'monthyear+1': () => {\n    let d = new Date()\n    d.setMonth(d.getMonth() + 1)\n    return months[d.getMonth()] + ' ' + d.getFullYear()\n  },\n\n  'year': (tmpl) => {\n    let date = parse(tmpl, ['date']).date\n    let d = new Date(date)\n    if (date && isNaN(d.getTime()) === false) {\n      return String(d.getFullYear())\n    }\n    return ''\n  },\n\n  'time ago': (tmpl) => {\n    let time = parse(tmpl, ['date', 'fmt']).date\n    return timeSince(time)\n  },\n  //https://en.wikipedia.org/wiki/Template:Birth_date_and_age\n  'birth date and age': (tmpl, list) => {\n    let obj = parse(tmpl, ['year', 'month', 'day'])\n    //support 'one property' version\n    if (obj.year && /[a-z]/i.test(obj.year)) {\n      return parsers.natural_date(tmpl, list)\n    }\n    list.push(obj)\n    obj = ymd([obj.year, obj.month, obj.day])\n    return toText(obj)\n  },\n  'birth year and age': (tmpl, list) => {\n    let obj = parse(tmpl, ['birth_year', 'birth_month'])\n    //support 'one property' version\n    if (obj.death_year && /[a-z]/i.test(obj.death_year)) {\n      return parsers.natural_date(tmpl, list)\n    }\n    list.push(obj)\n    let age = new Date().getFullYear() - parseInt(obj.birth_year, 10)\n    obj = ymd([obj.birth_year, obj.birth_month])\n    let str = toText(obj)\n    if (age) {\n      str += ` (age ${age})`\n    }\n    return str\n  },\n  'death year and age': (tmpl, list) => {\n    let obj = parse(tmpl, ['death_year', 'birth_year', 'death_month'])\n    //support 'one property' version\n    if (obj.death_year && /[a-z]/i.test(obj.death_year)) {\n      return parsers.natural_date(tmpl, list)\n    }\n    list.push(obj)\n    obj = ymd([obj.death_year, obj.death_month])\n    return toText(obj)\n  },\n  //https://en.wikipedia.org/wiki/Template:Birth_date_and_age2\n  'birth date and age2': (tmpl, list) => {\n    let order = ['at_year', 'at_month', 'at_day', 'birth_year', 'birth_month', 'birth_day']\n    let obj = parse(tmpl, order)\n    list.push(obj)\n    obj = ymd([obj.birth_year, obj.birth_month, obj.birth_day])\n    return toText(obj)\n  },\n  //https://en.wikipedia.org/wiki/Template:Birth_based_on_age_as_of_date\n  'birth based on age as of date': (tmpl, list) => {\n    let obj = parse(tmpl, ['age', 'year', 'month', 'day'])\n    list.push(obj)\n    let age = parseInt(obj.age, 10)\n    let year = parseInt(obj.year, 10)\n    let born = year - age\n    if (born && age) {\n      return `${born} (age ${obj.age})`\n    }\n    return `(age ${obj.age})`\n  },\n  //https://en.wikipedia.org/wiki/Template:Death_date_and_given_age\n  'death date and given age': (tmpl, list) => {\n    let obj = parse(tmpl, ['year', 'month', 'day', 'age'])\n    list.push(obj)\n    obj = ymd([obj.year, obj.month, obj.day])\n    let str = toText(obj)\n    if (obj.age) {\n      str += ` (age ${obj.age})`\n    }\n    return str\n  },\n  //sortable dates -\n  dts: (tmpl) => {\n    //remove formatting stuff, ewww\n    tmpl = tmpl.replace(/\\|format=[ymd]+/i, '')\n    tmpl = tmpl.replace(/\\|abbr=(on|off)/i, '')\n    let obj = parse(tmpl, ['year', 'month', 'date', 'bc'])\n    if (obj.date && obj.month && obj.year) {\n      //render 'june 5 2018'\n      if (/[a-z]/.test(obj.month) === true) {\n        return [obj.month, obj.date, obj.year].join(' ')\n      }\n      return [obj.year, obj.month, obj.date].join('-')\n    }\n    if (obj.month && obj.year) {\n      return [obj.year, obj.month].join('-')\n    }\n    if (obj.year) {\n      if (obj.year < 0) {\n        obj.year = Math.abs(obj.year) + ' BC'\n      }\n      return obj.year\n    }\n    return ''\n  },\n\n  //we can't do timezones, so fake this one a little bit\n  //https://en.wikipedia.org/wiki/Template:Time\n  time: () => {\n    let d = new Date()\n    let obj = ymd([d.getFullYear(), d.getMonth(), d.getDate()])\n    return toText(obj)\n  },\n\n  // https://en.wikipedia.org/wiki/Template:MILLENNIUM\n  millennium: (tmpl) => {\n    let obj = parse(tmpl, ['year'])\n    let year = parseInt(obj.year, 10)\n    year = Math.floor(year / 1000) + 1\n    if (obj.abbr && obj.abbr === 'y') {\n      if (year < 0) {\n        return `${toOrdinal(Math.abs(year))} BC`\n      }\n      return `${toOrdinal(year)}`\n    }\n    return `${toOrdinal(year)} millennium`\n  },\n  //date/age/time templates\n  start: parsers.date,\n  'start-date': parsers.natural_date,\n  birthdeathage: parsers.two_dates,\n  age: parsers.age,\n  'age nts': parsers.age,\n  'age in years': parsers['diff-y'],\n  'age in years and months': parsers['diff-ym'],\n  'age in years, months and days': parsers['diff-ymd'],\n  'age in years and days': parsers['diff-yd'],\n  'age in days': parsers['diff-d'],\n  // 'birth date and age2': date,\n  // 'age in years, months, weeks and days': true,\n  // 'age as of date': true,\n}\n", "import parse from '../../../parse/toJSON/index.js'\n\n/**\n * converts DMS (decimal-minute-second) geo format to lat/lng format.\n * major thank you to https://github.com/gmaclennan/parse-dms and https://github.com/WSDOT-GIS/dms-js \uD83D\uDC4F\n **/\nfunction parseDMS(arr) {\n  let hemisphere = arr.pop()\n  let degrees = Number(arr[0] || 0)\n  let minutes = Number(arr[1] || 0)\n  let seconds = Number(arr[2] || 0)\n  if (typeof hemisphere !== 'string' || isNaN(degrees)) {\n    return null\n  }\n  let sign = 1\n  if (/[SW]/i.test(hemisphere)) {\n    sign = -1\n  }\n  return sign * (degrees + minutes / 60 + seconds / 3600)\n}\n\nconst round = function (num) {\n  if (typeof num !== 'number') {\n    return num\n  }\n  let places = 100000\n  return Math.round(num * places) / places\n}\n\n//these hemispheres mean negative decimals\nconst negative = {\n  s: true,\n  w: true,\n}\n\nconst findLatLng = function (arr) {\n  const types = arr.map((s) => typeof s).join('|')\n  //support {{lat|lng}}\n  if (arr.length === 2 && types === 'number|number') {\n    return {\n      lat: arr[0],\n      lon: arr[1],\n    }\n  }\n  //support {{dd|N/S|dd|E/W}}\n  if (arr.length === 4 && types === 'number|string|number|string') {\n    if (negative[arr[1].toLowerCase()]) {\n      arr[0] *= -1\n    }\n    if (arr[3].toLowerCase() === 'w') {\n      arr[2] *= -1\n    }\n    return {\n      lat: arr[0],\n      lon: arr[2],\n    }\n  }\n  //support {{dd|mm|N/S|dd|mm|E/W}}\n  if (arr.length === 6) {\n    return {\n      lat: parseDMS(arr.slice(0, 3)),\n      lon: parseDMS(arr.slice(3)),\n    }\n  }\n  //support {{dd|mm|ss|N/S|dd|mm|ss|E/W}}\n  if (arr.length === 8) {\n    return {\n      lat: parseDMS(arr.slice(0, 4)),\n      lon: parseDMS(arr.slice(4)),\n    }\n  }\n  return {}\n}\n\nconst parseParams = function (obj) {\n  obj.list = obj.list || []\n  obj.list = obj.list.map((str) => {\n    let num = Number(str)\n    if (!isNaN(num)) {\n      return num\n    }\n    //these are weird\n    let split = str.split(/:/)\n    if (split.length > 1) {\n      obj.props = obj.props || {}\n      obj.props[split[0]] = split.slice(1).join(':')\n      return null\n    }\n    return str\n  })\n  obj.list = obj.list.filter((s) => s !== null)\n  return obj\n}\n\nconst parseCoor = function (tmpl) {\n  let obj = parse(tmpl)\n  obj = parseParams(obj)\n  let tmp = findLatLng(obj.list)\n  obj.lat = round(tmp.lat)\n  obj.lon = round(tmp.lon)\n  obj.template = 'coord'\n  delete obj.list\n  return obj\n}\n\n//console.log(parseDms([57, 18, 22, 'N']));\n//console.log(parseDms([4, 27, 32, 'W']));\n\nexport default parseCoor\n// {{Coor title dms|dd|mm|ss|N/S|dd|mm|ss|E/W|template parameters}}\n// {{Coor title dec|latitude|longitude|template parameters}}\n// {{Coor dms|dd|mm|ss|N/S|dd|mm|ss|E/W|template parameters}}\n// {{Coor dm|dd|mm|N/S|dd|mm|E/W|template parameters}}\n// {{Coor dec|latitude|longitude|template parameters}}\n\n// {{coord|latitude|longitude|coordinate parameters|template parameters}}\n// {{coord|dd|N/S|dd|E/W|coordinate parameters|template parameters}}\n// {{coord|dd|mm|N/S|dd|mm|E/W|coordinate parameters|template parameters}}\n// {{coord|dd|mm|ss|N/S|dd|mm|ss|E/W|coordinate parameters|template parameters}}\n", "import parseCoor from './_lib.js'\n\nconst templates = {\n  coord: (tmpl, list) => {\n    let obj = parseCoor(tmpl)\n    list.push(obj)\n    //display inline, by default\n    if (!obj.display || obj.display.indexOf('inline') !== -1) {\n      return `${obj.lat || ''}\u00B0N, ${obj.lon || ''}\u00B0W`\n    }\n    return ''\n  },\n}\n\n//{{coord|latitude|longitude|coordinate parameters|template parameters}}\n//{{coord|dd|N/S|dd|E/W|coordinate parameters|template parameters}}\n//{{coord|dd|mm|N/S|dd|mm|E/W|coordinate parameters|template parameters}}\n//{{coord|dd|mm|ss|N/S|dd|mm|ss|E/W|coordinate parameters|template parameters}}\n\nexport default templates\n", "import parse from '../../parse/toJSON/index.js'\n\nconst generic = function (tmpl, list, _parser, alias) {\n  let obj = parse(tmpl)\n  if (alias) {\n    obj.name = obj.template\n    obj.template = alias\n  }\n  list.push(obj)\n  return ''\n}\n// it may seem redundant,\n// but we need these templates for our i18n mappings\nconst misc = {\n  persondata: generic,\n  taxobox: generic,\n  citation: generic,\n  portal: generic,\n  reflist: generic,\n  'cite book': generic,\n  'cite journal': generic,\n  'cite web': generic,\n  'commons cat': generic,\n  'election box candidate': generic,\n  'election box begin': generic,\n  main: generic,\n}\nexport default misc\n", "import parse from '../../parse/toJSON/index.js'\n\nconst codes = {\n  adx: 'adx', //https://en.wikipedia.org/wiki/Template:Abu_Dhabi_Securities_Exchange\n  aim: 'aim', //https://en.wikipedia.org/wiki/Template:Alternative_Investment_Market\n  amex: 'amex', //https://en.wikipedia.org/wiki/Template:NYSE_American\n  asx: 'asx', //https://en.wikipedia.org/wiki/Template:Australian_Securities_Exchange\n  athex: 'athex', //https://en.wikipedia.org/wiki/Template:Athens_Exchange\n  b3: 'b3', //https://en.wikipedia.org/wiki/Template:BM%26F_Bovespa (redirects to B3 (stock exchange))\n  'B3 (stock exchange)': 'B3 (stock exchange)', //https://en.wikipedia.org/wiki/Template:B3_(stock_exchange)\n  barbadosse: 'barbadosse', //https://en.wikipedia.org/wiki/Template:Barbados_Stock_Exchange\n  bbv: 'bbv', //https://en.wikipedia.org/wiki/Template:La_Paz_Stock_Exchange\n  bcba: 'bcba', //https://en.wikipedia.org/wiki/Template:Buenos_Aires_Stock_Exchange\n  bcs: 'bcs', //https://en.wikipedia.org/wiki/Template:Santiago_Stock_Exchange\n  bhse: 'bhse', //https://en.wikipedia.org/wiki/Template:Bahrain_Bourse\n  bist: 'bist', //https://en.wikipedia.org/wiki/Template:Borsa_Istanbul\n  bit: 'bit', //https://en.wikipedia.org/wiki/Template:Borsa_Italiana\n  'bm&f bovespa': 'b3', //https://en.wikipedia.org/wiki/Template:BM%26F_Bovespa\n  'bm&f': 'b3', //https://en.wikipedia.org/wiki/Template:BM%26F_Bovespa\n  bmad: 'bmad', //https://en.wikipedia.org/wiki/Template:Bolsa_de_Madrid\n  bmv: 'bmv', //https://en.wikipedia.org/wiki/Template:Mexican_Stock_Exchange\n  'bombay stock exchange': 'bombay stock exchange', //https://en.wikipedia.org/wiki/Template:Bombay_Stock_Exchange\n  'botswana stock exchange': 'botswana stock exchange', //https://en.wikipedia.org/wiki/Template:BM%26F_Bovespa\n  bpse: 'bpse', //https://en.wikipedia.org/wiki/Template:Budapest_Stock_Exchange\n  bse: 'bse', //https://en.wikipedia.org/wiki/Template:Bombay_Stock_Exchange\n  bsx: 'bsx', //https://en.wikipedia.org/wiki/Template:Bermuda_Stock_Exchange\n  bvb: 'bvb', //https://en.wikipedia.org/wiki/Template:Bucharest_Stock_Exchange\n  bvc: 'bvc', //https://en.wikipedia.org/wiki/Template:Colombian_Securities_Exchange\n  bvl: 'bvl', //https://en.wikipedia.org/wiki/Template:Lima_Stock_Exchange\n  bvpasa: 'bvpasa', //https://en.wikipedia.org/wiki/Template:BVPASA\n  bwse: 'bwse', //https://en.wikipedia.org/wiki/Template:Botswana_Stock_Exchange\n  'canadian securities exchange': 'canadian securities exchange', //https://en.wikipedia.org/wiki/Template:Canadian_Securities_Exchange\n  cse: 'cse', //https://en.wikipedia.org/wiki/Template:Chittagong_Stock_Exchange\n  darse: 'darse', //https://en.wikipedia.org/wiki/Template:Dar_es_Salaam_Stock_Exchange\n  dfm: 'dfm', //https://en.wikipedia.org/wiki/Template:Dubai_Financial_Market\n  dse: 'dse', //https://en.wikipedia.org/wiki/Template:Dhaka_Stock_Exchange\n  euronext: 'euronext', //https://en.wikipedia.org/wiki/Template:Euronext\n  euronextparis: 'euronextparis', //https://en.wikipedia.org/wiki/Template:EuronextParis\n  fse: 'fse', //https://en.wikipedia.org/wiki/Template:Fukuoka_Stock_Exchange\n  fwb: 'fwb', //https://en.wikipedia.org/wiki/Template:Frankfurt_Stock_Exchange\n  gse: 'gse', //https://en.wikipedia.org/wiki/Template:Ghana_Stock_Exchange\n  gtsm: 'gtsm', //https://en.wikipedia.org/wiki/Template:Gre_Tai_Securities_Market\n  idx: 'idx', //https://en.wikipedia.org/wiki/Template:Indonesia_Stock_Exchange\n  ise: 'ise', //https://en.wikipedia.org/wiki/Template:Irish_Stock_Exchange\n  iseq: 'iseq', //https://en.wikipedia.org/wiki/Template:Irish_Stock_Exchange\n  isin: 'isin', //https://en.wikipedia.org/wiki/Template:ISIN\n  jasdaq: 'jasdaq', //https://en.wikipedia.org/wiki/Template:JASDAQ\n  jse: 'jse', //https://en.wikipedia.org/wiki/Template:Johannesburg_Stock_Exchange\n  kase: 'kase', //https://en.wikipedia.org/wiki/Template:Kazakhstan_Stock_Exchange\n  kn: 'kn', //https://en.wikipedia.org/wiki/Template:Nairobi_Securities_Exchange\n  krx: 'krx', //https://en.wikipedia.org/wiki/Template:Korea_Exchange\n  lse: 'lse', //https://en.wikipedia.org/wiki/Template:London_Stock_Exchange\n  luxse: 'luxse', //https://en.wikipedia.org/wiki/Template:Luxembourg_Stock_Exchange\n  'malta stock exchange': 'malta stock exchange', //https://en.wikipedia.org/wiki/Template:Malta_Stock_Exchange\n  mai: 'mai', //https://en.wikipedia.org/wiki/Template:Market_for_Alternative_Investment\n  mcx: 'mcx', //https://en.wikipedia.org/wiki/Template:Moscow_Exchange\n  mutf: 'mutf', //https://en.wikipedia.org/wiki/Template:Mutual_fund\n  myx: 'myx', //https://en.wikipedia.org/wiki/Template:Bursa_Malaysia\n  nag: 'nag', //https://en.wikipedia.org/wiki/Template:Nagoya_Stock_Exchange\n  'nasdaq dubai': 'nasdaq dubai', //https://en.wikipedia.org/wiki/Template:NASDAQ_Dubai\n  nasdaq: 'nasdaq', //https://en.wikipedia.org/wiki/Template:NASDAQ\n  neeq: 'neeq', //https://en.wikipedia.org/wiki/Template:NEEQ\n  nepse: 'nepse', //https://en.wikipedia.org/wiki/Template:Nepal_Stock_Exchange\n  nex: 'nex', //https://en.wikipedia.org/wiki/Template:TSXV_NEX\n  nse: 'nse', //https://en.wikipedia.org/wiki/Template:National_Stock_Exchange_of_India\n  newconnect: 'newconnect', //https://en.wikipedia.org/wiki/Template:NewConnect\n  'nyse arca': 'nyse arca', //https://en.wikipedia.org/wiki/Template:NYSE_Arca\n  nyse: 'nyse', //https://en.wikipedia.org/wiki/Template:New_York_Stock_Exchange\n  nzx: 'nzx', //https://en.wikipedia.org/wiki/Template:New_Zealand_Exchange\n  'omx baltic': 'omx baltic', //https://en.wikipedia.org/wiki/Template:OMX_Baltic\n  omx: 'omx', //https://en.wikipedia.org/wiki/Template:OMX\n  ose: 'ose', //https://en.wikipedia.org/wiki/Template:Oslo_Stock_Exchange\n  'otc expert': 'otc expert', //https://en.wikipedia.org/wiki/Template:OTC_Expert\n  'otc grey': 'otc grey', //https://en.wikipedia.org/wiki/template:grey_market\n  'otc pink': 'otc pink', //https://en.wikipedia.org/wiki/Template:OTC_Pink\n  otcqb: 'otcqb', //https://en.wikipedia.org/wiki/Template:OTCQB\n  otcqx: 'otcqx', //https://en.wikipedia.org/wiki/Template:OTCQX\n  'pfts ukraine stock exchange': 'pfts ukraine stock exchange', //https://en.wikipedia.org/wiki/Template:PFTS_Ukraine_Stock_Exchange\n  'philippine stock exchange': 'philippine stock exchange', //https://en.wikipedia.org/wiki/Template:Philippine_Stock_Exchange\n  prse: 'prse', //https://en.wikipedia.org/wiki/Template:Prague_Stock_Exchange\n  psx: 'psx', //https://en.wikipedia.org/wiki/Template:Pakistan_Stock_Exchange\n  karse: 'karse', //https://en.wikipedia.org/w/index.php?title=Template:Karse&redirect=no (redirects to psx)\n  qe: 'qe', //https://en.wikipedia.org/wiki/Template:Qatar_Stock_Exchange\n  'saudi stock exchange': 'saudi stock exchange', //https://en.wikipedia.org/wiki/Template:Saudi_Stock_Exchange\n  sehk: 'sehk', //https://en.wikipedia.org/wiki/Template:Hong_Kong_Stock_Exchange\n  'Stock Exchange of Thailand': 'Stock Exchange of Thailand', //https://en.wikipedia.org/wiki/Template:Stock_Exchange_of_Thailand (alternative for SET)\n  set: 'set', //https://en.wikipedia.org/wiki/Template:Stock_Exchange_of_Thailand\n  sgx: 'sgx', //https://en.wikipedia.org/wiki/Template:Singapore_Exchange\n  sse: 'sse', //https://en.wikipedia.org/wiki/Template:Shanghai_Stock_Exchange\n  swx: 'swx', //https://en.wikipedia.org/wiki/Template:SIX_Swiss_Exchange\n  szse: 'szse', //https://en.wikipedia.org/wiki/Template:Shenzhen_Stock_Exchange\n  tase: 'tase', //https://en.wikipedia.org/wiki/Template:Tel_Aviv_Stock_Exchange\n  'tsx-v': 'tsx-v', //https://en.wikipedia.org/wiki/Template:TSX_Venture_Exchange\n  tsx: 'tsx', //https://en.wikipedia.org/wiki/Template:Toronto_Stock_Exchange\n  tsxv: 'tsxv', //https://en.wikipedia.org/wiki/Template:TSX_Venture_Exchange\n  ttse: 'ttse', //https://en.wikipedia.org/wiki/Template:Trinidad_and_Tobago_Stock_Exchange\n  twse: 'twse', //https://en.wikipedia.org/wiki/Template:Taiwan_Stock_Exchange\n  tyo: 'tyo', //https://en.wikipedia.org/wiki/Template:Tokyo_Stock_Exchange\n  wbag: 'wbag', //https://en.wikipedia.org/wiki/Template:Wiener_B%C3%B6rse\n  wse: 'wse', //https://en.wikipedia.org/wiki/Template:Warsaw_Stock_Exchange\n  'zagreb stock exchange': 'zagreb stock exchange', //https://en.wikipedia.org/wiki/Template:Zagreb_Stock_Exchange\n  'zimbabwe stock exchange': 'zimbabwe stock exchange', //https://en.wikipedia.org/wiki/Template:Zimbabwe_Stock_Exchange\n  zse: 'zse', //https://en.wikipedia.org/wiki/Template:Zagreb_Stock_Exchange\n}\n\nconst parseStockExchange = (tmpl, list) => {\n  let o = parse(tmpl, ['ticketnumber', 'code'])\n  list.push(o)\n  let code = o.template || ''\n  if (code === '') {\n    code = o.code\n  }\n  code = (code || '').toLowerCase()\n  let str = codes[code] || ''\n  if (o.ticketnumber) {\n    str = `${str}: ${o.ticketnumber}`\n  }\n  if (o.code && !codes[o.code.toLowerCase()]) {\n    str += ' ' + o.code\n  }\n  return str\n}\n\nconst exchanges = {}\n//the others fit the same pattern..\nObject.keys(codes).forEach((k) => {\n  exchanges[k] = parseStockExchange\n})\n\nexport default exchanges\n", "import parse from '../../../parse/toJSON/index.js'\n\nconst zeroPad = function (num) {\n  num = String(num)\n  if (num.length === 1) {\n    num = '0' + num\n  }\n  return num\n}\n\nconst parseTeam = function (obj, round, team) {\n  if (obj[`rd${round}-team${zeroPad(team)}`]) {\n    team = zeroPad(team)\n  }\n  let score = obj[`rd${round}-score${team}`]\n  let num = Number(score)\n  if (isNaN(num) === false) {\n    score = num\n  }\n  return {\n    team: obj[`rd${round}-team${team}`],\n    score: score,\n    seed: obj[`rd${round}-seed${team}`],\n  }\n}\n\n// https://en.wikipedia.org/wiki/Category:Tournament_bracket_templates\n//these are weird.\nconst playoffBracket = function (tmpl) {\n  let rounds = []\n  let obj = parse(tmpl)\n  //try some rounds\n  for (let i = 1; i < 7; i += 1) {\n    let round = []\n    for (let t = 1; t < 16; t += 2) {\n      let key = `rd${i}-team`\n      if (obj[key + t] || obj[key + zeroPad(t)]) {\n        let one = parseTeam(obj, i, t)\n        let two = parseTeam(obj, i, t + 1)\n        round.push([one, two])\n      } else {\n        break\n      }\n    }\n    if (round.length > 0) {\n      rounds.push(round)\n    }\n  }\n  return {\n    template: 'playoffbracket',\n    rounds: rounds,\n  }\n}\n\nexport default playoffBracket\n", "import parse from '../../../parse/toJSON/index.js'\nimport flags from '../../../../_data/flags.js'\nimport playoffBracket from './_lib.js'\n\nlet sports = {\n  //playoff brackets\n  '4teambracket': function (tmpl, list) {\n    let obj = playoffBracket(tmpl)\n    list.push(obj)\n    return ''\n  },\n\n\n  player: (tmpl, list) => {\n    let res = parse(tmpl, ['number', 'country', 'name', 'dl'])\n    list.push(res)\n    let str = `[[${res.name}]]`\n    if (res.country) {\n      let country = (res.country || '').toLowerCase()\n      let flag = flags.find((a) => country === a[1] || country === a[2]) || []\n      if (flag && flag[0]) {\n        str = flag[0] + '  ' + str\n      }\n    }\n    if (res.number) {\n      str = res.number + ' ' + str\n    }\n    return str\n  },\n\n  //https://en.wikipedia.org/wiki/Template:Goal\n  goal: (tmpl, list) => {\n    let res = parse(tmpl)\n    let obj = {\n      template: 'goal',\n      data: [],\n    }\n    let arr = res.list || []\n    for (let i = 0; i < arr.length; i += 2) {\n      obj.data.push({\n        min: arr[i],\n        note: arr[i + 1] || '',\n      })\n    }\n    list.push(obj)\n    //generate a little text summary\n    let summary = '\u26BD '\n    summary += obj.data\n      .map((o) => {\n        let note = o.note\n        if (note) {\n          note = ` (${note})`\n        }\n        return o.min + \"'\" + note\n      })\n      .join(', ')\n    return summary\n  },\n\n  //a transcluded sports module - https://en.m.wikipedia.org/w/index.php?title=Special:WhatLinksHere/Module:Sports_table\n  // https://en.wikipedia.org/wiki/Template:2020\u201321_NHL_North_Division_standings\n  'sports table': (tmpl, list) => {\n    let obj = parse(tmpl)\n    let byTeam = {}\n    let teams = Object.keys(obj)\n      .filter((k) => /^team[0-9]/.test(k))\n      .map((k) => obj[k].toLowerCase())\n    teams.forEach((team) => {\n      byTeam[team] = {\n        name: obj[`name_${team}`],\n        win: Number(obj[`win_${team}`]) || 0,\n        loss: Number(obj[`loss_${team}`]) || 0,\n        tie: Number(obj[`tie_${team}`]) || 0,\n        otloss: Number(obj[`otloss_${team}`]) || 0,\n        goals_for: Number(obj[`gf_${team}`]) || 0,\n        goals_against: Number(obj[`ga_${team}`]) || 0,\n      }\n    })\n    let res = {\n      date: obj.update,\n      header: obj.table_header,\n      teams: byTeam,\n    }\n    list.push(res)\n  },\n\n  // college baseketball rosters\n  'cbb roster/header': function () {\n    return `{| class=\"wikitable\"\n    |-\n    ! POS\n    ! #\n    ! Name\n    ! Height\n    ! Weight\n    ! Year\n    ! Previous School\n    ! Hometown\n    |-\\n`\n  },\n  'cbb roster/player': function (tmpl, list) {\n    let data = parse(tmpl)\n    list.push(data)\n    // first=|last=|dab=|num=|pos=|ft=|in=|lbs=|class=|rs=|home=\n    return `|-\n| ${data.pos || ''}\n| ${data.num || ''}\n| ${data.first || ''} ${data.last || ''}\n| ${data.ft || ''}${data.in || ''}\n| ${data.lbs || ''}\n| ${data.class || ''}\n| ${data.high_school || ''}\n| ${data.home || ''}\n`\n  },\n  'cbb roster/footer': function () {\n    return `\\n|}`\n  },\n}\nexport default sports\n", "import shorthand from './shorthand.js'\nimport functions from './functions.js'\nimport currency from './currency.js'\nimport dates from './dates/index.js'\nimport geo from './geo/index.js'\nimport misc from './misc.js'\nimport stock from './stock-exchanges.js'\nimport sportsLib from './sports/_lib.js'\nimport sports from './sports/sports.js'\n\n\nexport default Object.assign(\n  {},\n  shorthand,\n  functions,\n  currency,\n  dates,\n  geo,\n  misc,\n  stock,\n  sportsLib,\n  sports,\n)\n", "import aliases from './aliases.js'\nimport textTmpl from './text-only/index.js'\nimport dataTmpl from './data-only/index.js'\nimport bothTmpl from './text-and-data/index.js'\n\nlet templates = Object.assign(\n  {},\n  textTmpl,\n  dataTmpl,\n  bothTmpl\n)\n\nObject.keys(aliases).forEach((k) => {\n  // if (templates[aliases[k]] === undefined) {\n  //   console.error(`Missing template: '${aliases[k]}'`)\n  // }\n  templates[k] = templates[aliases[k]]\n})\nexport default templates\n\n// console.log(Object.keys(templates).length)\n", "import ignore from './_ignore.js'\nimport { isInfobox, fmtInfobox } from './_infobox.js'\nimport templates from '../custom/index.js'\nimport toJSON from './toJSON/index.js'\nimport { isArray, isObject } from '../../_lib/helpers.js'\n\nconst nums = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n\n//this gets all the {{template}} objects and decides how to parse them\nconst parseTemplate = function (tmpl, doc) {\n  let name = tmpl.name\n  // dont bother with some junk templates\n  if (ignore.hasOwnProperty(name) === true) {\n    return ['']\n  }\n  //{{infobox settlement...}}\n  if (isInfobox(name) === true) {\n    let obj = toJSON(tmpl.body, [], 'raw')\n    // list.push(infobox.format(obj))\n    return ['', fmtInfobox(obj)]\n  }\n  //cite book, cite arxiv...\n  if (/^cite [a-z]/.test(name) === true) {\n    let obj = toJSON(tmpl.body)\n    obj.type = obj.template\n    obj.template = 'citation'\n    // list.push(obj)\n    return ['', obj]\n  }\n  // ok, here we go!\n  //parse some known templates\n  if (templates.hasOwnProperty(name) === true) {\n    //handle number-syntax\n    if (typeof templates[name] === 'number') {\n      let obj = toJSON(tmpl.body, nums)\n      let key = String(templates[name])\n      return [obj[key] || '']\n    }\n    //handle string-syntax\n    if (typeof templates[name] === 'string') {\n      return [templates[name]]\n    }\n    //handle array sytax\n    if (isArray(templates[name]) === true) {\n      let obj = toJSON(tmpl.body, templates[name])\n      // list.push(obj)\n      return ['', obj]\n    }\n    //handle object sytax\n    if (isObject(templates[name]) === true) {\n      let obj = toJSON(tmpl.body, templates[name].props)\n      // list.push(obj)\n      return [obj[templates[name].out], obj]\n    }\n    //handle function syntax\n    if (typeof templates[name] === 'function') {\n      // let json = toJSON(tmpl.body)\n      //(tmpl, list, alias, doc)\n      let arr = []\n      let txt = templates[name](tmpl.body, arr, toJSON, null, doc)\n      return [txt, arr[0]]\n    }\n  }\n  //if set, try using the global template fallback parser\n  if (doc && doc._templateFallbackFn) {\n    let arr = []\n    let txt = doc._templateFallbackFn(tmpl.body, arr, toJSON, null, doc)\n    if (txt !== null) {\n      return [txt, arr[0]]\n    }\n  }\n  //an unknown template with data, so just keep it.\n  let json = toJSON(tmpl.body)\n  if (Object.keys(json).length === 0) {\n    // list.push(json)\n    json = null\n  }\n  //..then remove it\n  return ['', json]\n}\nexport default parseTemplate\n", "import encodeObj from '../_lib/encode.js'\n\n/**\n * turn an infobox into some nice json\n * \n * @param {object} infobox \n * @param {object} [options] \n * @returns {object}\n */\nconst toJson = function (infobox, options) {\n  let json = Object.keys(infobox.data).reduce((h, k) => {\n    if (infobox.data[k]) {\n      h[k] = infobox.data[k].json()\n    }\n    return h\n  }, {})\n\n  //support mongo-encoding keys\n  if (options.encode === true) {\n    json = encodeObj(json)\n  }\n  return json\n}\nexport default toJson\n", "import toJson from './toJson.js'\nimport Image from '../image/Image.js'\nimport { isArray } from '../_lib/helpers.js'\nimport Sentence from '../04-sentence/Sentence.js'\n\nconst normalize = (str = '') => {\n  str = str.toLowerCase()\n  str = str.replace(/[-_]/g, ' ')\n  return str.trim()\n}\n\n//a formal key-value data table about a topic\nconst Infobox = function (obj, wiki) {\n  this._type = obj.type\n  this.domain = obj.domain\n  Object.defineProperty(this, 'data', {\n    enumerable: false,\n    value: obj.data,\n  })\n  Object.defineProperty(this, 'wiki', {\n    enumerable: false,\n    value: wiki,\n  })\n}\n\nconst methods = {\n  type: function () {\n    return this._type\n  },\n  links: function (n) {\n    let arr = []\n    Object.keys(this.data).forEach((k) => {\n      this.data[k].links().forEach((l) => arr.push(l))\n    })\n    if (typeof n === 'string') {\n      //grab a link like .links('Fortnight')\n      n = n.charAt(0).toUpperCase() + n.substring(1) //titlecase it\n      let link = arr.find((o) => o.page() === n)\n      return link === undefined ? [] : [link]\n    }\n    return arr\n  },\n  image: function () {\n    let s = this.data.image || this.data.image2 || this.data.logo || this.data.image_skyline || this.data.image_flag\n    if (!s) {\n      return null\n    }\n    let obj = s.json()\n    let file = obj.text\n    obj.file = file\n    obj.text = ''\n    obj.caption = this.data.caption\n    obj.domain = this.domain // add domain information for image\n    return new Image(obj)\n  },\n  get: function (keys) {\n    let allKeys = Object.keys(this.data)\n    if (typeof keys === 'string') {\n      let key = normalize(keys)\n      for (let i = 0; i < allKeys.length; i += 1) {\n        let tmp = normalize(allKeys[i])\n        if (key === tmp) {\n          return this.data[allKeys[i]]\n        }\n      }\n      return new Sentence()\n    }\n    if (isArray(keys)) {\n      // support array-input\n      keys = keys.map(normalize)\n      return keys.map((k) => {\n        for (let i = 0; i < allKeys.length; i += 1) {\n          let tmp = normalize(allKeys[i])\n          if (k === tmp) {\n            return this.data[allKeys[i]]\n          }\n        }\n        return new Sentence()\n      })\n    }\n    return new Sentence()\n  },\n  text: function () {\n    return ''\n  },\n  json: function (options) {\n    options = options || {}\n    return toJson(this, options)\n  },\n  wikitext: function () {\n    return this.wiki || ''\n  },\n  keyValue: function () {\n    return Object.keys(this.data).reduce((h, k) => {\n      if (this.data[k]) {\n        h[k] = this.data[k].text()\n      }\n      return h\n    }, {})\n  },\n}\n//aliases\nObject.keys(methods).forEach((k) => {\n  Infobox.prototype[k] = methods[k]\n})\nInfobox.prototype.data = Infobox.prototype.keyValue\nInfobox.prototype.template = Infobox.prototype.type\nInfobox.prototype.images = Infobox.prototype.image\nexport default Infobox\n", "import encodeObj from '../_lib/encode.js'\n\n//also called 'citations'\nconst Reference = function (data, wiki) {\n  Object.defineProperty(this, 'data', {\n    enumerable: false,\n    value: data,\n  })\n  Object.defineProperty(this, 'wiki', {\n    enumerable: false,\n    value: wiki,\n  })\n}\n\nconst methods = {\n  title: function () {\n    let data = this.data\n    return data.title || data.encyclopedia || data.author || ''\n  },\n  links: function (n) {\n    let arr = []\n    if (typeof n === 'number') {\n      return arr[n]\n    }\n    //grab a specific link..\n    if (typeof n === 'number') {\n      return arr[n]\n    } else if (typeof n === 'string') {\n      //grab a link like .links('Fortnight')\n      n = n.charAt(0).toUpperCase() + n.substring(1) //titlecase it\n      let link = arr.find((o) => o.page() === n)\n      return link === undefined ? [] : [link]\n    }\n    return arr || []\n  },\n  text: function () {\n    return '' //nah, skip these.\n  },\n  wikitext: function () {\n    return this.wiki || ''\n  },\n  json: function (options = {}) {\n    let json = this.data || {}\n    //encode them, for mongodb\n    if (options.encode === true) {\n      json = Object.assign({}, json)\n      json = encodeObj(json)\n    }\n    return json\n  },\n}\nObject.keys(methods).forEach((k) => {\n  Reference.prototype[k] = methods[k]\n})\nexport default Reference\n", "import { fromText } from '../04-sentence/index.js'\n\nconst methods = {\n  text: function () {\n    let str = this._text || ''\n    return fromText(str).text()\n  },\n  json: function () {\n    return this.data || {}\n  },\n  wikitext: function () {\n    return this.wiki || ''\n  },\n}\n\nconst Template = function (data, text = '', wiki = '') {\n  Object.defineProperty(this, 'data', {\n    enumerable: false,\n    value: data,\n  })\n  Object.defineProperty(this, '_text', {\n    enumerable: false,\n    value: text,\n  })\n  Object.defineProperty(this, 'wiki', {\n    enumerable: false,\n    value: wiki,\n  })\n}\n\nObject.keys(methods).forEach((k) => {\n  Template.prototype[k] = methods[k]\n})\nexport default Template\n", "import Infobox from '../infobox/Infobox.js'\nimport Reference from '../reference/Reference.js'\nimport Template from './Template.js'\nconst isCitation = /^(cite |citation)/i\n\nconst referenceTypes = {\n  citation: true,\n  refn: true,\n  harvnb: true,\n  source: true, //wikinews\n}\n\n// split Infoboxes from templates and references\nconst sortOut = function (list, domain) {\n  let res = {\n    infoboxes: [],\n    templates: [],\n    references: [],\n  }\n  //remove references and infoboxes from our list\n  list.forEach((obj) => {\n    let json = obj.json\n    let kind = json.template || json.type || json.name\n    // is it a Reference?\n    if (referenceTypes[kind] === true || isCitation.test(kind) === true) {\n      res.references.push(new Reference(json, obj.wiki))\n      return\n    }\n    // is it an Infobox?\n    if (json.template === 'infobox' && json.subbox !== 'yes') {\n      json.domain = domain //infoboxes need this for images, i guess\n      json.data = json.data || {} //validate it a little\n      res.infoboxes.push(new Infobox(json, obj.wiki))\n      return\n    }\n    // otherwise, it's just a template\n    res.templates.push(new Template(json, obj.text, obj.wiki))\n  })\n  return res\n}\n\nexport default sortOut\n", "import findTemplates from './find/01-nested.js'\nimport parseTemplate from './parse/index.js'\nimport sortOut from './sortOut.js'\n\n// return a flat list of all {{templates}}\nconst allTemplates = function (wiki, doc) {\n  let list = []\n  //nested data-structure of templates\n  let nested = findTemplates(wiki)\n  //recursive template-parser\n  const parseNested = function (obj, parent) {\n    obj.parent = parent\n    //do tail-first recursion\n    if (obj.children && obj.children.length > 0) {\n      obj.children.forEach((ch) => parseNested(ch, obj))\n    }\n    //parse template into json, return replacement wikitext\n    let [text, json] = parseTemplate(obj, doc)\n    obj.wiki = text\n    if (json) {\n      list.push({\n        name: obj.name,\n        wiki: obj.body,\n        nested: Boolean(obj.parent),\n        text: text,\n        json: json,\n      })\n    }\n    //remove the text from every parent\n    const removeIt = function (node, body, out) {\n      if (node.parent) {\n        node.parent.body = node.parent.body.replace(body, out)\n        removeIt(node.parent, body, out)\n      }\n    }\n    removeIt(obj, obj.body, obj.wiki)\n    wiki = wiki.replace(obj.body, obj.wiki)\n  }\n  //kick it off\n  nested.forEach((node) => parseNested(node, null))\n  //remove the templates from our wiki text\n  nested.forEach((node) => {\n    wiki = wiki.replace(node.body, node.wiki)\n  })\n  return { list: list, wiki: wiki }\n}\n\n//find + parse all templates in the section\nconst process = function (section, doc) {\n  // find+parse them all\n  let { list, wiki } = allTemplates(section._wiki, doc)\n  // split-out references and infoboxes\n  let domain = doc ? doc._domain : null\n  let { infoboxes, references, templates } = sortOut(list, domain)\n\n  //sort-out the templates we decide to keep\n  section._infoboxes = section._infoboxes || []\n  section._references = section._references || []\n  section._templates = section._templates || []\n\n  section._infoboxes = section._infoboxes.concat(infoboxes)\n  section._references = section._references.concat(references)\n  section._templates = section._templates.concat(templates)\n\n  section._wiki = wiki\n}\n\nexport default process\n", "import parse from '../template/parse/toJSON/index.js'\nimport { fromText as parseSentence } from '../04-sentence/index.js'\nimport Reference from './Reference.js'\n\n//structured Cite templates - <ref>{{Cite..</ref>\nconst hasCitation = function (str) {\n  return /^ *\\{\\{ *(cite|citation)/i.test(str) && /\\}\\} *$/.test(str) && /citation needed/i.test(str) === false\n}\n\nconst parseCitation = function (tmpl) {\n  let obj = parse(tmpl)\n  obj.type = obj.template.replace(/cite /, '')\n  obj.template = 'citation'\n  return obj\n}\n\n//handle unstructured ones - <ref>some text</ref>\nconst parseInline = function (str) {\n  let obj = parseSentence(str) || {}\n  return {\n    template: 'citation',\n    type: 'inline',\n    data: {},\n    inline: obj,\n  }\n}\n\n//parse <ref></ref> xml tags\nconst parseRefs = function (section) {\n  let references = []\n  let wiki = section._wiki\n\n  wiki = wiki.replace(/ ?<ref>([\\s\\S]{0,1800}?)<\\/ref> ?/gi, function (all, tmpl) {\n    if (hasCitation(tmpl)) {\n      let obj = parseCitation(tmpl)\n      if (obj) {\n        references.push({ json: obj, wiki: all })\n      }\n      wiki = wiki.replace(tmpl, '')\n    } else {\n      references.push({ json: parseInline(tmpl), wiki: all })\n    }\n    return ' '\n  })\n\n  //<ref name=\"\"/>\n  wiki = wiki.replace(/ ?<ref [^>]{0,200}?\\/> ?/gi, ' ')\n\n  //<ref name=\"\"></ref>\n  wiki = wiki.replace(/ ?<ref [^>]{0,200}>([\\s\\S]{0,1800}?)<\\/ref> ?/gi, function (all, tmpl) {\n    if (hasCitation(tmpl)) {\n      let obj = parseCitation(tmpl)\n      if (obj) {\n        references.push({ json: obj, wiki: tmpl })\n      }\n      wiki = wiki.replace(tmpl, '')\n    } else {\n      references.push({ json: parseInline(tmpl), wiki: all })\n    }\n    return ' '\n  })\n\n  //now that we're done with xml, do a generic + dangerous xml-tag removal\n  wiki = wiki.replace(/ ?<[ /]?[a-z0-9]{1,8}[a-z0-9=\" ]{2,20}[ /]?> ?/g, ' ') //<samp name=\"asd\">\n  section._references = references.map((obj) => new Reference(obj.json, obj.wiki))\n  section._wiki = wiki\n}\n\nexport default parseRefs\n", "import { fromText as parseSentence } from '../../04-sentence/index.js'\nimport Image from '../../image/Image.js'\n//okay, <gallery> is a xml-tag, with newline-separated data, somehow pivoted by '|'...\n//all deities help us. truly -> https://en.wikipedia.org/wiki/Help:Gallery_tag\n//- not to be confused with https://en.wikipedia.org/wiki/Template:Gallery...\n/**\n *\n * @private\n * @param {object} catcher\n * @param {object} doc\n * @param {object} section\n */\nconst parseGallery = function (catcher, doc, section) {\n  catcher.text = catcher.text.replace(/<gallery([^>]*)>([\\s\\S]+)<\\/gallery>/g, (_, _attrs, inside) => {\n    let images = inside.split(/\\n/g)\n    images = images.filter((str) => str && str.trim() !== '')\n\n    //parse the line, which has an image and sometimes a caption\n    images = images.map((str) => {\n      let arr = str.split(/\\|/)\n      let obj = {\n        file: arr[0].trim(),\n        lang: doc.lang(),\n        domain: doc.domain(),\n      }\n      let img = new Image(obj).json()\n      let caption = arr.slice(1).join('|')\n      if (caption !== '') {\n        img.caption = parseSentence(caption)\n      }\n      return img\n    })\n\n    //add it to our templates list\n    if (images.length > 0) {\n      catcher.templates.push({\n        template: 'gallery',\n        images: images,\n        pos: section.title,\n      })\n    }\n\n    //return empty string to remove the template from the wiki text\n    return ''\n  })\n}\nexport default parseGallery\n", "import parseTemplates from '../../template/index.js'\n\n/**\n * parses out the `Election_box` template from the wiki text\n *\n * this is a non-traditional template, for some reason\n * https://en.wikipedia.org/wiki/Template:Election_box\n *\n * @private\n * @param {object} catcher an object to provide and catch data\n * @param {Document} doc\n */\nconst parseElection = function (catcher, doc) {\n  catcher.text = catcher.text.replace(/\\{\\{election box begin([\\s\\S]+?)\\{\\{election box end\\}\\}/gi, (tmpl) => {\n    let data = {\n      _wiki: tmpl,\n      _templates: [],\n    }\n\n    //put it through our full template parser..\n    parseTemplates(data, doc)\n\n    //okay, pull it apart into something sensible..\n    let templates = data._templates.map((t) => t.json())\n\n    let start = templates.find((t) => t.template === 'election box') || {}\n    let candidates = templates.filter((t) => t.template === 'election box candidate')\n    let summary = templates.find((t) => t.template === 'election box gain' || t.template === 'election box hold') || {}\n\n    if (candidates.length > 0 || summary) {\n      catcher.templates.push({\n        template: 'election box',\n        title: start.title,\n        candidates: candidates,\n        summary: summary.data,\n      })\n    }\n\n    //return empty string to remove the template from the wiki text\n    return ''\n  })\n}\n\nexport default parseElection\n", "import tableParser from '../../table/parse/index.js'\nconst keys = {\n  coach: ['team', 'year', 'g', 'w', 'l', 'w-l%', 'finish', 'pg', 'pw', 'pl', 'pw-l%'],\n  player: ['year', 'team', 'gp', 'gs', 'mpg', 'fg%', '3p%', 'ft%', 'rpg', 'apg', 'spg', 'bpg', 'ppg'],\n  roster: ['player', 'gp', 'gs', 'mpg', 'fg%', '3fg%', 'ft%', 'rpg', 'apg', 'spg', 'bpg', 'ppg'],\n}\n\n/**\n * https://en.wikipedia.org/wiki/Template:NBA_player_statistics_start\n *\n * @private\n * @param {object} catcher\n */\nconst parseNBA = function (catcher) {\n  catcher.text = catcher.text.replace(\n    /\\{\\{nba (coach|player|roster) statistics start([\\s\\S]+?)\\{\\{s-end\\}\\}/gi,\n    (tmpl, name) => {\n      tmpl = tmpl.replace(/^\\{\\{.*?\\}\\}/, '')\n      tmpl = tmpl.replace(/\\{\\{s-end\\}\\}/, '')\n      name = name.toLowerCase().trim()\n\n      let headers = '! ' + keys[name].join(' !! ')\n      let table = '{|\\n' + headers + '\\n' + tmpl + '\\n|}'\n      let rows = tableParser(table)\n      rows = rows.map((row) => {\n        Object.keys(row).forEach((k) => {\n          row[k] = row[k].text()\n        })\n        return row\n      })\n\n      catcher.templates.push({\n        template: 'NBA ' + name + ' statistics',\n        data: rows,\n      })\n\n      //return empty string to remove the template from the wiki text\n      return ''\n    }\n  )\n}\nexport default parseNBA\n", "import tableParser from '../../table/parse/index.js'\n//https://en.wikipedia.org/wiki/Template:MLB_game_log_section\n\n//this is pretty nuts\nconst whichHeadings = function (tmpl) {\n  let headings = ['#', 'date', 'opponent', 'score', 'win', 'loss', 'save', 'attendance', 'record']\n  if (/\\|stadium=y/i.test(tmpl) === true) {\n    headings.splice(7, 0, 'stadium') //save, stadium, attendance\n  }\n  if (/\\|time=y/i.test(tmpl) === true) {\n    headings.splice(7, 0, 'time') //save, time, stadium, attendance\n  }\n  if (/\\|box=y/i.test(tmpl) === true) {\n    headings.push('box') //record, box\n  }\n  return headings\n}\n/**\n *\n * @private\n * @param {object} catcher\n */\nconst parseMlb = function (catcher) {\n  catcher.text = catcher.text.replace(/\\{\\{mlb game log /gi, '{{game log ')\n  catcher.text = catcher.text.replace(/\\{\\{game log (section|month)[\\s\\S]+?\\{\\{game log (section|month) end\\}\\}/gi, (tmpl) => {\n    let headings = whichHeadings(tmpl)\n\n    tmpl = tmpl.replace(/^\\{\\{.*?\\}\\}/, '')\n    tmpl = tmpl.replace(/\\{\\{game log (section|month) end\\}\\}/i, '')\n\n    let headers = '! ' + headings.join(' !! ')\n    let table = '{|\\n' + headers + '\\n' + tmpl + '\\n|}'\n    let rows = tableParser(table)\n    rows = rows.map((row) => {\n      Object.keys(row).forEach((k) => {\n        row[k] = row[k].text()\n      })\n      return row\n    })\n    catcher.templates.push({\n      template: 'mlb game log section',\n      data: rows,\n    })\n\n    //return empty string to remove the template from the wiki text\n    return ''\n  }\n  )\n}\nexport default parseMlb\n", "import tableParser from '../../table/parse/index.js'\nlet headings = ['res', 'record', 'opponent', 'method', 'event', 'date', 'round', 'time', 'location', 'notes']\n\n/**\n *\n * https://en.wikipedia.org/wiki/Template:MMA_record_start\n *\n * @private\n * @param {object} catcher\n */\nconst parseMMA = function (catcher) {\n  catcher.text = catcher.text.replace(/\\{\\{mma record start[\\s\\S]+?\\{\\{end\\}\\}/gi, (tmpl) => {\n    tmpl = tmpl.replace(/^\\{\\{.*?\\}\\}/, '')\n    tmpl = tmpl.replace(/\\{\\{end\\}\\}/i, '')\n\n    let headers = '! ' + headings.join(' !! ')\n    let table = '{|\\n' + headers + '\\n' + tmpl + '\\n|}'\n    let rows = tableParser(table)\n    rows = rows.map((row) => {\n      Object.keys(row).forEach((k) => {\n        row[k] = row[k].text()\n      })\n      return row\n    })\n\n    catcher.templates.push({\n      template: 'mma record start',\n      data: rows,\n    })\n\n    //return empty string to remove the template from the wiki text\n    return ''\n  })\n}\nexport default parseMMA\n", "import { fromText as parseSentence } from '../../04-sentence/index.js'\n\n/**\n * try to parse out the math and chem templates\n *\n * xml <math>y=mx+b</math> support\n * https://en.wikipedia.org/wiki/Help:Displaying_a_formula\n *\n * @private\n * @param {object} catcher\n */\nconst parseMath = function (catcher) {\n  catcher.text = catcher.text.replace(/<math([^>]*)>([\\s\\S]*?)<\\/math>/g, (_, attrs, inside) => {\n    //clean it up a little?\n    let formula = parseSentence(inside).text()\n    catcher.templates.push({\n      template: 'math',\n      formula: formula,\n      raw: inside,\n    })\n\n    //should we at least try to render it in plaintext? :/\n    if (formula && formula.length < 12) {\n      return formula\n    }\n\n    //return empty string to remove the template from the wiki text\n    return ''\n  })\n\n  //try chemistry version too\n  catcher.text = catcher.text.replace(/<chem([^>]*)>([\\s\\S]*?)<\\/chem>/g, (_, attrs, inside) => {\n    catcher.templates.push({\n      template: 'chem',\n      data: inside,\n    })\n\n    //return empty string to remove the template from the wiki text\n    return ''\n  })\n}\nexport default parseMath\n", "import parseGallery from './gallery.js'\nimport parseElection from './election.js'\nimport parseNBA from './nba.js'\nimport parseMlb from './mlb.js'\nimport parseMMA from './mma.js'\nimport parseMath from './math.js'\nimport Template from '../../template/Template.js'\n\n/**\n * parses out non standard templates\n *\n * Most templates are '{{template}}',\n * but then, some are '<template></template>' others are {{start}}...{{end}}\n * -> the templates here are of the second type.\n *\n * @private\n * @param {object} section\n * @param {object} doc\n * @returns {Object} wikitext\n */\nconst xmlTemplates = function (section, doc) {\n  const res = {\n    templates: [],\n    text: section._wiki,\n  }\n\n  parseElection(res, doc)\n  parseGallery(res, doc, section)\n  parseMath(res)\n  parseMlb(res)\n  parseMMA(res)\n  parseNBA(res)\n\n  // turn them into Template objects\n  res.templates = res.templates.map((obj) => new Template(obj))\n  return res\n}\n\nexport default xmlTemplates\n", "import toJSON from './toJson.js'\nimport setDefaults from '../_lib/setDefaults.js'\n// import parseHeading from './heading.js'\nimport parseTable from '../table/index.js'\nimport parseParagraphs from '../03-paragraph/index.js'\nimport parseTemplates from '../template/index.js'\nimport parseReferences from '../reference/index.js'\nimport parseStartEndTemplates from './start-to-end/index.js'\n\nconst defaults = {\n  tables: true,\n  references: true,\n  paragraphs: true,\n  templates: true,\n  infoboxes: true,\n}\n\n/**\n * the Section class represents the different sections of the article.\n * we look for the == title == syntax and split and parse the sections from there\n *\n * @class\n */\nclass Section {\n  /**\n   * the stuff between headings - 'History' section for example\n   *\n   * @param {object} data the data already gathered about the section\n   * @param {object} doc the document that this section belongs to\n   */\n  constructor(data, doc) {\n    let props = {\n      doc: doc,\n      title: data.title || '',\n      depth: data.depth,\n      wiki: data.wiki || '',\n      templates: [],\n      tables: [],\n      infoboxes: [],\n      references: [],\n      paragraphs: [],\n    }\n    Object.keys(props).forEach((k) => {\n      Object.defineProperty(this, '_' + k, {\n        enumerable: false,\n        writable: true,\n        value: props[k],\n      })\n    })\n\n    //parse-out <template></template>' and {{start}}...{{end}} templates\n    const startEndTemplates = parseStartEndTemplates(this, doc)\n    this._wiki = startEndTemplates.text\n    this._templates = this._templates.concat(startEndTemplates.templates)\n\n    //parse-out the <ref></ref> tags\n    parseReferences(this)\n    //parse-out all {{templates}}\n    parseTemplates(this, doc)\n\n    //parse the tables\n    parseTable(this)\n\n    //now parse all double-newlines\n    parseParagraphs(this, doc)\n  }\n\n  /**\n   * returns the title of a section. if no title is available then it returns empty string\n   *\n   * @returns {string} the title of the section\n   */\n  title() {\n    return this._title || ''\n  }\n\n  /**\n   * returns the index of the current section in the document\n   *\n   * @returns {number | null} the index of the current section in the document\n   */\n  index() {\n    if (!this._doc) {\n      return null\n    }\n    let index = this._doc.sections().indexOf(this)\n    if (index === -1) {\n      return null\n    }\n    return index\n  }\n\n  /**\n   * returns the depth (or indentation) of the section\n   * aka how many levels deep is this section located\n   *\n   * @returns {number} the depth of the section\n   */\n  depth() {\n    return this._depth\n  }\n\n  /**\n   * returns the depth (or indentation) of the section\n   * aka how many levels deep is this section located\n   *\n   * @returns {number} the depth of the section\n   */\n  indentation() {\n    return this.depth()\n  }\n\n  /**\n   * returns all sentences in the section\n   * if an clue is provided then it returns the sentence at clue-th index\n   *\n   * @returns {object | object[]} all sentences in an array or the clue-th sentence\n   */\n  sentences() {\n    return this.paragraphs().reduce((list, p) => {\n      return list.concat(p.sentences())\n    }, [])\n  }\n\n  /**\n   * returns all paragraphs in the section\n   * if an clue is provided then it returns the paragraph at clue-th index\n   *\n   * @returns {object | object[]} all paragraphs in an array or the clue-th paragraph\n   */\n  paragraphs() {\n    return this._paragraphs || []\n  }\n\n  /**\n   * returns all links in the section\n   * if an clue is provided and it is a number then it returns the link at clue-th index\n   * if an clue is provided and it is a string then it returns the link at the that content\n   *\n   * @param {number| string} [clue] the clue for selecting the link\n   * @returns {object | object[]} all links in an array or the clue-th link or the link with the content of clue\n   */\n  links(clue) {\n    let arr = []\n\n    this.infoboxes().forEach((templ) => {\n      arr.push(templ.links())\n    })\n\n    this.sentences().forEach((s) => {\n      arr.push(s.links())\n    })\n\n    this.tables().forEach((t) => {\n      arr.push(t.links())\n    })\n\n    this.lists().forEach((list) => {\n      arr.push(list.links())\n    })\n\n    arr = arr\n      .reduce((acc, val) => acc.concat(val), []) //flatten the array\n      .filter((val) => val !== undefined) //filter out all the undefined from the flattened empty arrays\n\n    if (typeof clue === 'string') {\n      let link = arr.find((o) => o.page().toLowerCase() === clue.toLowerCase())\n      return link === undefined ? [] : [link]\n    }\n\n    return arr\n  }\n\n  /**\n   * returns all tables in the section\n   * if an clue is provided then it returns the table at clue-th index\n   *\n   * @returns {object | object[]} all tables in an array or the clue-th infobox\n   */\n  tables() {\n    return this._tables || []\n  }\n\n  /**\n   * returns all templates in the section\n   * if an clue is provided and clue is a number then it returns the template at clue-th index\n   * if an clue is provided and clue is a string then it returns all template with that name\n   *\n   * @param {number|string} [clue] the clue for selecting the template\n   * @returns {object | object[]} all templates in an array or the clue-th template or all template name `clue`\n   */\n  templates(clue) {\n    let arr = this._templates || []\n    // arr = arr.map((t) => t.json())\n    if (typeof clue === 'string') {\n      clue = clue.toLowerCase()\n      return arr.filter((o) => o.data.template === clue || o.data.name === clue)\n    }\n\n    return arr\n  }\n\n  /**\n   * returns all infoboxes in the section\n   * if an clue is provided then it returns the infobox at clue-th index\n   *\n   * @param {number|string} [clue] the clue for selecting the infobox\n   * @returns {object | object[]} all infoboxes in an array or the clue-th infobox\n   */\n  infoboxes(clue) {\n    let arr = this._infoboxes || []\n    if (typeof clue === 'string') {\n      clue = clue.replace(/^infobox /i, '')\n      clue = clue.trim().toLowerCase()\n      return arr.filter((info) => info._type === clue)\n    }\n    return arr\n  }\n\n  /**\n   * returns all lists in the section\n   * if an clue is provided then it returns the list at clue-th index\n   *\n   * @returns {object | object[]} all lists in an array or the clue-th list\n   */\n  coordinates() {\n    let arr = [...this.templates('coord'), ...this.templates('coor')]\n    return arr.map((tmpl) => tmpl.json())\n  }\n\n  /**\n   * returns all lists in the section\n   * if an clue is provided then it returns the list at clue-th index\n   *\n   * @returns {object | object[]} all lists in an array or the clue-th list\n   */\n  lists() {\n    let arr = []\n    this.paragraphs().forEach((p) => {\n      arr = arr.concat(p.lists())\n    })\n    return arr\n  }\n\n  /**\n   * returns all interwiki links in the section\n   * if an clue is provided then it returns the interwiki link at clue-th index\n   *\n   * @returns {object | object[]} all interwiki links in an array or the clue-th interwiki link\n   */\n  interwiki() {\n    let arr = []\n    this.paragraphs().forEach((p) => {\n      arr = arr.concat(p.interwiki())\n    })\n    return arr\n  }\n\n  /**\n   * returns all images in the section\n   * if an clue is provided then it returns the image at clue-th index\n   *\n   * @returns {object | object[]} all images in an array or the clue-th image\n   */\n  images() {\n    let arr = []\n    this.paragraphs().forEach((p) => {\n      arr = arr.concat(p.images())\n    })\n    return arr\n  }\n\n  /**\n   * returns all references in the section\n   * if an clue is provided then it returns the reference at clue-th index\n   *\n   * @returns {object | object[]} all references in an array or the clue-th reference\n   */\n  references() {\n    return this._references || []\n  }\n\n  //transformations\n  /**\n   * Removes the section from the document\n   *\n   * @returns {null|object} the document without this section. or null if there is no document\n   */\n  remove() {\n    if (!this._doc) {\n      return null\n    }\n\n    let bads = {}\n    bads[this.title()] = true\n\n    //remove children too\n    this.children().forEach((sec) => (bads[sec.title()] = true))\n    let sections = this._doc.sections()\n    sections = sections.filter((sec) => bads.hasOwnProperty(sec.title()) !== true)\n    sections = sections.filter((sec) => bads.hasOwnProperty(sec.title()) !== true)\n\n    this._doc._sections = sections\n    return this._doc\n  }\n\n  //move-around sections like in jquery\n  /**\n   * returns the next sibling of this section\n   * if it can find one then it returns null\n   *\n   * @returns {Section|null} the next sibling\n   */\n  nextSibling() {\n    //if this section is not part of a document then we can go to the next part of the document\n    if (!this._doc) {\n      return null\n    }\n\n    //first we get the a list of sections and our own position in this list\n    let sections = this._doc.sections()\n    let index = this.index() || 0\n\n    //then we look trough the list looking for the next sibling\n    //aka we look the next item at the same depth as us\n    //so we start the loop at the next section in the list and go till the length of the list\n    for (let i = index + 1; i < sections.length; i++) {\n      //if the depth is smaller then the current depth then there is no next sibling\n      //aka the depth of the section at position i a level higher then this section then this section is the last section at this depth\n      if (sections[i].depth() < this.depth()) {\n        return null\n      }\n      //if the section has the same depth as the current section then it is the next sibling\n      if (sections[i].depth() === this.depth()) {\n        return sections[i]\n      }\n    }\n    //if the loop has no results then there is no next sibling and we are at the end of the file\n    return null\n  }\n\n  /**\n   * returns the next sibling of this section\n   * if it can find one then it returns null\n   *\n   * @returns {Section|null} the next sibling\n   */\n  next() {\n    return this.nextSibling()\n  }\n\n  /**\n   * returns the previous section\n   *\n   * @returns {Section|null} the previous section\n   */\n  lastSibling() {\n    if (!this._doc) {\n      return null\n    }\n    let sections = this._doc.sections()\n    let index = this.index() || 0\n    return sections[index - 1] || null\n  }\n\n  /**\n   * returns the previous section\n   *\n   * @returns {Section|null} the previous section\n   */\n  last() {\n    return this.lastSibling()\n  }\n\n  /**\n   * returns the previous section\n   *\n   * @returns {Section|null} the previous section\n   */\n  previousSibling() {\n    return this.lastSibling()\n  }\n\n  /**\n   * returns the previous section\n   *\n   * @returns {Section|null} the previous section\n   */\n  previous() {\n    return this.lastSibling()\n  }\n\n  /**\n   * returns all the children of a section\n   *\n   * If the clue is a string then it will return the child with that exact title\n   * Else if the clue is a number then it returns the child at that index\n   * Else it returns all the children\n   *\n   * @param {number | string} [clue] A title of a section or a index of a wanted section\n   * @returns {Section | Section[] | null} A section or a array of sections\n   */\n  children(clue) {\n    if (!this._doc) {\n      return null\n    }\n\n    let sections = this._doc.sections()\n    let index = this.index() || 0\n    let children = []\n\n    //(immediately preceding sections with higher depth)\n    if (sections[index + 1] && sections[index + 1].depth() > this.depth()) {\n      for (let i = index + 1; i < sections.length; i += 1) {\n        if (sections[i].depth() > this.depth()) {\n          children.push(sections[i])\n        } else {\n          break\n        }\n      }\n    }\n    if (typeof clue === 'string') {\n      return children.find((s) => s.title().toLowerCase() === clue.toLowerCase())\n    }\n    return children\n  }\n\n  /**\n   * returns all the children of a section\n   *\n   * If the clue is a string then it will return the child with that exact title\n   * Else if the clue is a number then it returns the child at that index\n   * Else it returns all the children\n   *\n   * @param {number | string} [clue] A title of a section or a index of a wanted section\n   * @returns {Section | Section[] | null} A section or a array of sections\n   */\n  sections(clue) {\n    return this.children(clue)\n  }\n\n  /**\n   * returns all the parent of a section\n   *\n   * @returns {Section | null} A section that is the parent of a section\n   */\n  parent() {\n    if (!this._doc) {\n      return null\n    }\n    let sections = this._doc.sections()\n    let index = this.index() || 0\n\n    for (let i = index; i >= 0; i -= 1) {\n      if (sections[i] && sections[i].depth() < this.depth()) {\n        return sections[i]\n      }\n    }\n\n    return null\n  }\n\n  //outputs\n\n  /**\n   * returns a plaintext version of the section\n   *\n   * @param {object} options options for the text transformation\n   * @returns {string} the section in text\n   */\n  text(options) {\n    options = setDefaults(options, defaults)\n    return this.paragraphs()\n      .map((p) => p.text(options))\n      .join('\\n\\n')\n  }\n  /**\n   * returns original wiki markup\n   *\n   * @returns {string} the original markup\n   */\n  wikitext() {\n    return this._wiki\n  }\n\n  /**\n   * returns a json version of the section\n   *\n   * @param {object} options keys to include in the resulting json\n   * @returns {object} the section in json\n   */\n  json(options) {\n    options = setDefaults(options, defaults)\n    return toJSON(this, options)\n  }\n}\nSection.prototype.citations = Section.prototype.references\n\n// aliases\nconst singular = {\n  sentences: 'sentence',\n  paragraphs: 'paragraph',\n  links: 'link',\n  tables: 'table',\n  templates: 'template',\n  infoboxes: 'infobox',\n  coordinates: 'coordinate',\n  lists: 'list',\n  images: 'image',\n  references: 'reference',\n  citations: 'citation',\n}\nObject.keys(singular).forEach((k) => {\n  let sing = singular[k]\n  Section.prototype[sing] = function (clue) {\n    let arr = this[k](clue)\n    if (typeof clue === 'number') {\n      return arr[clue]\n    }\n    return arr[0] || null\n  }\n})\nexport default Section\n", "import { trim_whitespace } from '../_lib/helpers.js'\nimport { fromText as parseSentence } from '../04-sentence/index.js'\nimport parseReferences from '../reference/index.js'\nimport getTemplates from '../template/find/01-nested.js'\nimport parseTemplates from '../template/parse/index.js'\nconst heading_reg = /^(={1,6})(.{1,200}?)={1,6}$/\nconst hasTemplate = /\\{\\{.+?\\}\\}/\n\nconst doInlineTemplates = function (wiki, doc) {\n  let list = getTemplates(wiki)\n  list.forEach((item) => {\n    let [txt] = parseTemplates(item, doc)\n    wiki = wiki.replace(item.body, txt)\n  })\n  return wiki\n}\n\n\n/**\n * @typedef fakeSection\n * @property {string} title\n * @property {null | number} depth\n * @property {string} wiki\n */\n\n/**\n * estimates the depth of a section and parses the title to a normal format\n *\n * @private\n * @param {fakeSection} section\n * @param {string} str\n * @param {Document} doc\n * @returns {fakeSection} section the depth in a object\n */\nconst parseHeading = function (section, str, doc) {\n  let m = str.match(heading_reg)\n  if (!m) {\n    section.title = ''\n    section.depth = 0\n    return section\n  }\n  let title = m[2] || ''\n  title = parseSentence(title).text()\n\n  //amazingly, you can see inline {{templates}} in this text, too\n  if (hasTemplate.test(title)) {\n    title = doInlineTemplates(title, doc)\n  }\n  //same for references (i know..)\n  let obj = { _wiki: title }\n  parseReferences(obj)\n  title = obj._wiki\n\n  //trim leading/trailing whitespace\n  title = trim_whitespace(title)\n  let depth = 0\n  if (m[1]) {\n    depth = m[1].length - 2\n  }\n  section.title = title\n  section.depth = depth\n  return section\n}\n\nexport default parseHeading\n", "import Section from './Section.js'\nimport { references } from '../_data/i18n.js'\n//interpret ==heading== lines\nimport parseHeading from './heading.js'\n\nconst isReference = new RegExp('^(' + references.join('|') + '):?', 'i')\nconst section_reg = /(?:\\n|^)(={2,6}.{1,200}?={2,6})/g\n\n\n/**\n * filters out the reference section and empty sections and\n *\n * @param {Section[]} sections\n * @returns {Section[]} all the section\n */\nconst removeReferenceSection = function (sections) {\n  return sections.filter((s, i) => {\n    if (isReference.test(s.title()) === true) {\n      if (s.paragraphs().length > 0) {\n        return true\n      }\n\n      //does it have some wacky templates?\n      if (s.templates().length > 0) {\n        return true\n      }\n\n      //what it has children? awkward\n      if (sections[i + 1] && sections[i + 1].depth() > s.depth()) {\n        sections[i + 1]._depth -= 1 //move it up a level?...\n      }\n      return false\n    }\n    return true\n  })\n}\n\n/**\n * this function splits the wiki texts on '=' and puts every part in a Section Object\n * it also pre processes the section text for the Section object\n * then it filters out the reference section\n *\n * @private\n * @param {object} doc the document that contains the wiki text\n * @returns {Section[]} the sections that are parsed out\n */\nconst parseSections = function (doc) {\n  let sections = []\n  let splits = doc._wiki.split(section_reg)\n\n  for (let i = 0; i < splits.length; i += 2) {\n    let heading = splits[i - 1] || ''\n    let wiki = splits[i] || ''\n\n    if (wiki === '' && heading === '') {\n      //usually an empty 'intro' section\n      continue\n    }\n\n    let data = {\n      title: '',\n      depth: null,\n      wiki: wiki,\n    }\n\n    //figure-out title and depth\n    parseHeading(data, heading, doc)\n\n    sections.push(new Section(data, doc))\n  }\n\n  //remove empty references section\n  return removeReferenceSection(sections)\n}\n\nexport default parseSections\n", "import { categories as _categories } from '../_data/i18n.js'\n\nconst cat_reg = new RegExp('\\\\[\\\\[(' + _categories.join('|') + '):(.{2,178}?)]](w{0,10})', 'gi')\nconst cat_remove_reg = new RegExp('^\\\\[\\\\[:?(' + _categories.join('|') + '):', 'gi')\n\nconst parse_categories = function (wiki) {\n  const categories = []\n  let tmp = wiki.match(cat_reg) //regular links\n  if (tmp) {\n    tmp.forEach(function (c) {\n      c = c.replace(cat_remove_reg, '')\n      c = c.replace(/\\|?[ *]?\\]\\]$/, '') //parse fancy ones..\n      c = c.replace(/\\|.*/, '') //everything after the '|' is metadata\n      if (c && !c.match(/[[\\]]/)) {\n        categories.push(c.trim())\n      }\n    })\n  }\n  const newWiki = wiki.replace(cat_reg, '')\n  return [categories, newWiki]\n}\nexport default parse_categories\n", "import sectionMap from './_sectionMap.js'\nimport toJSON from './toJson.js'\nimport isDisambig from './isDisambig.js'\nimport setDefaults from '../_lib/setDefaults.js'\nimport Image from '../image/Image.js'\nimport { isRedirect, parse } from './redirects.js'\nimport preProcess from './preProcess/index.js'\nimport parseSection from '../02-section/index.js'\nimport parseCategories from './categories.js'\n\nconst defaults = {\n  tables: true,\n  lists: true,\n  paragraphs: true,\n}\n\n/**\n * The document class is the main entry point of wtf_wikipedia.\n * this class represents an article of wikipedia.\n * from here you can go to the infoboxes or paragraphs\n *\n * @class\n */\nclass Document {\n  /**\n   * The constructor for the document class\n   * This function starts parsing the wiki text and sets the options in the class\n   *\n   * @param {string} [wiki] The wiki text\n   * @param {object} [options] The options for the parser\n   */\n  constructor(wiki, options) {\n    options = options || {}\n    this._options = options\n    let props = {\n      pageID: options.pageID || options.id || null,\n      namespace: options.namespace || options.ns || null,\n      lang: options.lang || options.language || null,\n      domain: options.domain || null,\n      title: options.title || null,\n      type: 'page',\n      redirectTo: null,\n      wikidata: options.wikidata || null,\n      wiki: wiki || '',\n      categories: [],\n      sections: [],\n      coordinates: [],\n      // userAgent is used for successive calls to the API\n      userAgent: options.userAgent || options['User-Agent'] || options['Api-User-Agent'] || 'User of the wtf_wikipedia library',\n      templateFallbackFn: options.templateFallbackFn || null,\n    }\n    // this._missing_templates = {} //for stats+debugging purposes\n\n    Object.keys(props).forEach((k) => {\n      Object.defineProperty(this, '_' + k, {\n        enumerable: false,\n        writable: true,\n        value: props[k],\n      })\n    })\n\n    //detect if page is just redirect, and return it\n    if (isRedirect(this._wiki) === true) {\n      this._type = 'redirect'\n      this._redirectTo = parse(this._wiki)\n      const [categories, newWiki] = parseCategories(this._wiki)\n      this._categories = categories\n      this._wiki = newWiki\n      return\n    }\n\n    //give ourselves a little head-start\n    this._wiki = preProcess(this._wiki)\n\n    //pull-out [[category:whatevers]]\n    const [categories, newWiki] = parseCategories(this._wiki)\n    this._categories = categories\n    this._wiki = newWiki\n\n    //parse all the headings, and their texts/sentences\n    this._sections = parseSection(this)\n  }\n\n  /**\n   * Getter and setter for the tile.\n   * If string is given then this function is a setter and sets the variable and returns the set value\n   * If the string is not given then it will check if the title is available\n   * If it is available it returns the title.\n   * Else it will look if the first sentence contains a bolded phrase and assumes that's the title and returns it\n   *\n   * @param {string} [str] The title that will be set\n   * @returns {null|string} The title found or given\n   */\n  title(str) {\n    //use like a setter\n    if (str !== undefined) {\n      this._title = str\n      return str\n    }\n    //if we have it already\n    if (this._title) {\n      return this._title\n    }\n    //guess the title of this page from first sentence bolding\n    let guess = null\n    let sen = this.sentences()[0]\n    if (sen) {\n      guess = sen.bold()\n    }\n    return guess\n  }\n\n  /**\n   * If an pageID is given then it sets the pageID and returns the given pageID\n   * Else if the pageID is already set it returns the pageID\n   *\n   * @param {number} [id] The pageID that will be set\n   * @returns {number|null} The given or found pageID\n   */\n  pageID(id) {\n    if (id !== undefined) {\n      this._pageID = id\n    }\n    return this._pageID || null\n  }\n\n  /**\n   * If an WikidataID is given then it sets the WikidataID and returns the given WikidataID\n   * Else if the WikidataID is already set it returns the WikidataID\n   *\n   * @param {string} [id] The WikidataID that will be set\n   * @returns {string|null} The given or found WikidataID\n   */\n  wikidata(id) {\n    if (id !== undefined) {\n      this._wikidata = id\n    }\n    return this._wikidata || null\n  }\n\n  /**\n   * If an domain is given then it sets the domain and returns the given domain\n   * Else if the domain is already set it returns the domain\n   *\n   * @param {string} [str] The domain that will be set\n   * @returns {string|null} The given or found domain\n   */\n  domain(str) {\n    if (str !== undefined) {\n      this._domain = str\n    }\n    return this._domain || null\n  }\n\n  /**\n   * If an language is given then it sets the language and returns the given language\n   * Else if the language is already set it returns the language\n   *\n   * @param {string} [lang] The language that will be set\n   * @returns {string|null} The given or found language\n   */\n  language(lang) {\n    if (lang !== undefined) {\n      this._lang = lang\n    }\n    return this._lang || null\n  }\n\n  /**\n   * Gets the url of the page\n   * If the language or domain is not available we substitute 'en' and 'wikipedia.org'\n   * Then we use the template of `https://${lang}.${domain}/wiki/${title}` to make the url\n   *\n   * @returns {string|null} The url of the page\n   */\n  url() {\n    let title = this.title()\n    if (!title) {\n      return null\n    }\n    let lang = this.language() || 'en'\n    let domain = this.domain() || 'wikipedia.org'\n    //replace blank to underscore\n    title = title.replace(/ /g, '_')\n    title = encodeURIComponent(title)\n    return `https://${lang}.${domain}/wiki/${title}`\n  }\n\n  /**\n   * If an namespace is given then it sets the namespace and returns the given namespace\n   * Else if the namespace is already set it returns the namespace\n   *\n   * @param {string} [ns] The namespace that will be set\n   * @returns {string|null} The given or found namespace\n   */\n  namespace(ns) {\n    if (ns !== undefined) {\n      this._namespace = ns\n    }\n    return this._namespace || null\n  }\n\n  /**\n   * Returns if the page is a redirect\n   *\n   * @returns {boolean} Is the page a redirect\n   */\n  isRedirect() {\n    return this._type === 'redirect'\n  }\n\n  /**\n   * Returns information about the page this page redirects to\n   *\n   * @returns {null|object} The redirected page\n   */\n  redirectTo() {\n    return this._redirectTo\n  }\n\n  /**\n   * This function finds out if a page is a disambiguation page\n   *\n   * @returns {boolean} Whether the page is a disambiguation page\n   */\n  isDisambiguation() {\n    return isDisambig(this)\n  }\n\n  /**\n   * If a clue is available return the category at that index\n   * Else return all categories\n   *\n   * @returns {string | string[]} The category at the provided index or all categories\n   */\n  categories(clue) {\n    let arr = this._categories || []\n    if (typeof clue === 'number') {\n      return [arr[clue]]\n    }\n    return arr\n  }\n\n  /**\n   * returns the sections of the document\n   *\n   * If the clue is a string then it will return the section with that exact title\n   * Else if the clue is a number then it returns the section at that index\n   * Else it returns all the sections\n   *\n   * @param {number | string} [clue] A title of a section or a index of a wanted section\n   * @returns {object | object[]} A section or a array of sections\n   */\n  sections(clue) {\n    let arr = this._sections || []\n    arr.forEach((sec) => {\n      // link-up parent and child\n      sec._doc = this\n    })\n\n    //grab a specific section, by its title\n    if (typeof clue === 'string') {\n      let str = clue.toLowerCase().trim()\n      return arr.filter((s) => {\n        return s.title().toLowerCase() === str\n      })\n    } else if (typeof clue === 'number') {\n      return [arr[clue]]\n    }\n    return arr\n  }\n\n  /**\n   * Returns the paragraphs in the document\n   *\n   * If the clue is a number then it returns the paragraph at that index\n   * Else it returns all paragraphs in an array\n   * @param {number | string} [clue] given index of a paragraph\n   * @returns {object | object[]} the selected paragraph or an array of all paragraphs\n   */\n  paragraphs(clue) {\n    let arr = []\n    this.sections().forEach((s) => {\n      arr = arr.concat(s.paragraphs())\n    })\n    if (typeof clue === 'number') {\n      return [arr[clue]]\n    }\n    return arr\n  }\n\n  /**\n   * if no clue is provided, it compiles an array of sentences in the wiki text.\n   * if the clue is provided it return the sentence at the provided index\n   * @param {number | string} [clue] given index of a sentence\n   * @returns {object[]|object} an array of sentences or a single sentence\n   */\n  sentences(clue) {\n    let arr = []\n    this.sections().forEach((sec) => {\n      arr = arr.concat(sec.sentences())\n    })\n    if (typeof clue === 'number') {\n      return [arr[clue]]\n    }\n    return arr\n  }\n\n  /**\n   * This function search the whole page, including the infobox and image gallery templates for images\n   * and then returns them in an array if no clue is provided.\n   * if an clue is profieded then it returns the image at the clue-th index\n   *\n   * @returns {Image[]|Image} a single image or an array of images\n   */\n  images(clue) {\n    let arr = sectionMap(this, 'images', null)\n    //grab image from infobox, first\n    this.infoboxes().forEach((info) => {\n      let img = info.image()\n      if (img) {\n        arr.unshift(img) //put it at the top\n      }\n    })\n    //look for 'gallery' templates, too\n    this.templates().forEach((obj) => {\n      if (obj.data.template === 'gallery') {\n        obj.data.images = obj.data.images || []\n        obj.data.images.forEach((img) => {\n          if (!(img instanceof Image)) {\n            img.language = this.language()\n            img.domain = this.domain()\n            img = new Image(img)\n          }\n          arr.push(img)\n        })\n      }\n    })\n    if (typeof clue === 'number') {\n      return [arr[clue]]\n    }\n    return arr\n  }\n\n  /**\n   * Return all links or if a clue is provided only the link at that index\n   *\n   * @param {number} [clue] the index of the wanted link\n   * @returns {string[]|string} all the links or the selected link\n   */\n  links(clue) {\n    return sectionMap(this, 'links', clue)\n  }\n\n  /**\n   * Return all inter wiki links or if a clue is provided only the inter wiki link at that index\n   *\n   * @param {number} [clue] the index of the wanted inter wiki link\n   * @returns {string[]|string} all the inter wiki links or the selected inter wiki link\n   */\n  interwiki(clue) {\n    return sectionMap(this, 'interwiki', clue)\n  }\n\n  /**\n   * If a clue is available return the list at that index\n   * Else return all lists\n   *\n   * @param {number} [clue] The index of the wanted list\n   * @returns {object | object[]} The list at the provided index or all lists\n   */\n  lists(clue) {\n    return sectionMap(this, 'lists', clue)\n  }\n\n  /**\n   * If a clue is available return the tables at that index\n   * Else return all tables\n   *\n   * @param {number} [clue] The index of the wanted table\n   * @returns {object | object[]} The table at the provided index or all tables\n   */\n  tables(clue) {\n    return sectionMap(this, 'tables', clue)\n  }\n\n  /**\n   * If a clue is available return the template at that index\n   * Else return all templates\n   *\n   * @param {number} [clue] The index of the wanted template\n   * @returns {object | object[]} The category at the provided index or all categories\n   */\n  templates(clue) {\n    return sectionMap(this, 'templates', clue)\n  }\n\n  /**\n   * If a clue is available return the references at that index\n   * Else return all references\n   *\n   * @param {number} [clue] The index of the wanted references\n   * @returns {object | object[]} The category at the provided index or all references\n   */\n  references(clue) {\n    return sectionMap(this, 'references', clue)\n  }\n\n  /**\n   * Returns the 0th or clue-th reference\n   *\n   * @param {number} [clue] The index of the wanted reference\n   * @returns {object|string|number} The reference at the provided index\n   */\n  citations(clue) {\n    return this.references(clue)\n  }\n\n  /**\n   * finds and returns all coordinates\n   * or if an clue is given, the coordinate at the index\n   *\n   * @param {number} [clue] the index of the coordinate returned\n   * @returns {object[]|object|null} if a clue is given, the coordinate of null, else an array of coordinates\n   */\n  coordinates(clue) {\n    return sectionMap(this, 'coordinates', clue)\n  }\n\n  /**\n   * If clue is unidentified then it returns all infoboxes\n   * If clue is a number then it returns the infobox at that index\n   * It always sorts the infoboxes by size\n   *\n   * @param {number} [clue] the index of the infobox you want to select\n   * @returns {object | object[]} the selected infobox or an array of infoboxes\n   */\n  infoboxes(clue) {\n    let arr = sectionMap(this, 'infoboxes', clue)\n    //sort them by biggest-first\n    arr = arr.sort((a, b) => {\n      if (Object.keys(a.data).length > Object.keys(b.data).length) {\n        return -1\n      }\n      return 1\n    })\n\n    return arr\n  }\n\n  /**\n   * return a plain text version of the wiki article\n   *\n   * @param {object} [options] the options for the parser\n   * @returns {string} the plain text version of the article\n   */\n  text(options) {\n    options = setDefaults(options, defaults)\n    //nah, skip these.\n    if (this.isRedirect() === true) {\n      return ''\n    }\n    let arr = this.sections().map((sec) => sec.text(options))\n    return arr.join('\\n\\n')\n  }\n\n  /**\n   * return a json version of the Document class\n   *\n   * @param {object} [options] options for the rendering\n   * @returns {object} this document as json\n   */\n  json(options) {\n    options = setDefaults(options, defaults)\n    return toJSON(this, options)\n  }\n\n  /**\n   * return original wiki markup\n   *\n   * @returns {string} markup text\n   */\n  wikitext() {\n    return this._wiki || ''\n  }\n\n  /**\n   * prints the title of every section\n   *\n   * @returns {Document} the document itself\n   */\n  debug() {\n    console.log('\\n')\n    this.sections().forEach((sec) => {\n      let indent = ' - '\n      for (let i = 0; i < sec.depth(); i += 1) {\n        indent = ' -' + indent\n      }\n      console.log(indent + (sec.title() || '(Intro)'))\n    })\n    return this\n  }\n\n  options() {\n    return this._options\n  }\n}\n\n// aliases\nconst singular = {\n  categories: 'category',\n  sections: 'section',\n  paragraphs: 'paragraph',\n  sentences: 'sentence',\n  images: 'image',\n  links: 'link',\n  // interwiki\n  lists: 'list',\n  tables: 'table',\n  templates: 'template',\n  references: 'reference',\n  citations: 'citation',\n  coordinates: 'coordinate',\n  infoboxes: 'infobox',\n}\nObject.keys(singular).forEach((k) => {\n  let sing = singular[k]\n  Document.prototype[sing] = function (clue) {\n    let arr = this[k](clue)\n    return arr[0] || null\n  }\n})\nDocument.prototype.lang = Document.prototype.language\nDocument.prototype.ns = Document.prototype.namespace\nDocument.prototype.plaintext = Document.prototype.text\nDocument.prototype.isDisambig = Document.prototype.isDisambiguation\nDocument.prototype.citations = Document.prototype.references\nDocument.prototype.redirectsTo = Document.prototype.redirectTo\nDocument.prototype.redirect = Document.prototype.redirectTo\nDocument.prototype.redirects = Document.prototype.redirectTo\n\nexport default Document\n", "import Document from '../01-document/Document.js'\nimport { isArray } from '../_lib/helpers.js'\n/**\n * this function puts all responses into proper Document objects\n *\n * @private\n * @param {Array} res\n * @param {string | number | Array<number> | Array<string>} title\n * @returns {null| Document | Document[]} null if there are no results or Document if there is one responses and Document array if there are multiple responses\n */\nconst parseDoc = function (res, title) {\n  // filter out undefined\n  res = res.filter((o) => o)\n\n\n  // put all the responses into Document formats\n  let docs = res.map((o) => {\n    return new Document(o.wiki, o.meta)\n  })\n\n  // if the list is empty than there are no results\n  if (docs.length === 0) {\n    return null\n  }\n\n  // if there is only one response then we can get it out of the array\n  if (!isArray(title) && docs.length === 1) {\n    return docs[0]\n  }\n\n  return docs\n}\nexport default parseDoc\n", "/**\n * factory for header options\n *\n * @private\n * @param {object} options\n * @returns {object} the generated options\n */\nconst makeHeaders = function (options) {\n  let agent =\n    options.userAgent || options['User-Agent'] || options['Api-User-Agent'] || 'User of the wtf_wikipedia library'\n\n  let origin\n  if (options.noOrigin) {\n    origin = ''\n  } else {\n    origin = options.origin || options.Origin || '*'\n  }\n\n  return {\n    method: 'GET',\n    headers: {\n      // 'Content-Type': 'application/json',\n      // 'Api-User-Agent': agent,\n      'User-Agent': agent,\n      Origin: origin,\n      'Accept-Encoding': 'gzip',\n    },\n    redirect: 'follow',\n  }\n}\nexport default makeHeaders\n", "export default '10.1.5'", "import unfetch from 'isomorphic-unfetch'\n\n/**\n * use the native client-side fetch function\n *\n * @private\n * @param {string} url the url that well be fetched\n * @param {Object} opts the options for fetch\n * @returns {Promise<any>} the response from fetch\n */\nconst request = function (url, opts) {\n  return unfetch(url, opts).then(function (res) {\n    return res.json()\n  }).catch((e) => {\n    console.error('\\n\\n=-=- http response error =-=-=-')\n    console.error(url)\n    console.error(e)\n    return {}\n  })\n}\nexport default request", "import fetch from './_fetch/index.js'\nimport version from './_version.js'\nimport Document from './01-document/Document.js'\n\n//the main 'factory' exported method\nconst wtf = function (wiki, options) {\n  return new Document(wiki, options)\n}\n\n//export classes for plugin development\nimport Doc from './01-document/Document.js'\nimport Section from './02-section/Section.js'\nimport Paragraph from './03-paragraph/Paragraph.js'\nimport Sentence from './04-sentence/Sentence.js'\nimport Image from './image/Image.js'\nimport Infobox from './infobox/Infobox.js'\nimport Link from './link/Link.js'\nimport List from './list/List.js'\nimport Reference from './reference/Reference.js'\nimport Table from './table/Table.js'\nimport Template from './template/Template.js'\nimport http from './_lib/fetch.js'\nimport templates from './template/custom/index.js'\nimport infoboxes from './infobox/_infoboxes.js'\n\nconst models = {\n  Doc,\n  Section,\n  Paragraph,\n  Sentence,\n  Image,\n  Infobox,\n  Link,\n  List,\n  Reference,\n  Table,\n  Template,\n  http,\n  wtf: wtf,\n}\n\nwtf.fetch = function (title, options, cb) {\n  return fetch(title, options, cb)\n}\nwtf.extend = function (fn) {\n  fn(models, templates, infoboxes)\n  return this\n}\nwtf.plugin = wtf.extend\nwtf.version = version\n\nexport default wtf\n", "import wtf from \"wtf_wikipedia\";\r\n\r\nconst fetch = async (query) => {\r\n    let doc = await wtf.fetch(query, {\r\n        domain: \"www.poewiki.net\",\r\n        noOrigin: true,\r\n        userAgent: \"Sidekick\",\r\n    });\r\n\r\n    console.log(\"JSON: \" + query);\r\n    console.log(doc.json());\r\n\r\n    return doc;\r\n};\r\n\r\nexport default async () => {\r\n    var oil = await fetch(\"Oil\");\r\n    var s = oil.sections(\"Tower enchantments available by anointing Rings\");\r\n    console.log(s);\r\n    // console.log(s.json());\r\n\r\n    var oil2 = await fetch(\"List of ring anointments\");\r\n};\r\n", "\r\nimport test from './test';\r\n\r\ntest();\r\n"],
  "mappings": "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CA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,IAEA,OAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,IAEA,cAAc;AAAA,MACZ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,IAEA,IAAI;AAAA,MACF;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA;AAAA,IACF;AAAA;AAAA,IAGA,MAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AA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IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,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",
  "names": ["url", "options", "Promise", "resolve", "reject", "request", "XMLHttpRequest", "keys", "all", "headers", "response", "ok", "status", "statusText", "responseURL", "text", "responseText", "json", "then", "JSON", "parse", "blob", "Blob", "clone", "entries", "get", "n", "toLowerCase", "has", "i", "open", "method", "onload", "getAllResponseHeaders", "replace", "m", "key", "value", "push", "onerror", "withCredentials", "credentials", "setRequestHeader", "send", "body", "arr", "list", "defaults", "defaults", "templates", "defaults", "toJson_default", "arr", "toJson_default", "interwiki_default", "interwiki_default", "keys", "defaults", "toJSON", "templates", "list", "toJson_default", "defaults", "methods", "defaults", "toJSON", "toJson_default", "methods", "arr", "toJson_default", "arr", "open", "parse_default", "parse_default", "arr", "parse_default", "toJson", "toJson_default", "defaults", "methods", "keys", "toJson_default", "list", "parse_default", "defaults", "toJson", "toJson_default", "defaults", "methods", "arr", "list", "toJson_default", "singular", "arr", "arr", "order", "cleanup", "order", "arr", "open", "arr", "defaults", "list", "methods", "list", "sub", "list", "list", "ignore", "infoboxes_default", "infoboxes_default", "templates", "templates", "year", "arr", "ignore", "w", "list", "templates", "languages_default", "templates", "flags_default", "templates", "languages_default", "flags_default", "templates", "templates", "functions_default", "list", "parser", "template", "order", "months", "templates", "functions_default", "templates", "list", "arr", "order", "template", "functions_default", "list", "templates", "days", "d", "arr", "month", "toText", "arr", "d", "list", "order", "toText", "year", "date", "months", "d", "list", "toText", "order", "year", "arr", "templates", "list", "list", "codes", "list", "round", "lib_default", "list", "lib_default", "arr", "functions_default", "lib_default", "templates", "parseTemplate", "arr", "parse_default", "toJson", "toJson_default", "normalize", "methods", "arr", "keys", "toJson_default", "methods", "arr", "methods", "list", "list", "parse_default", "templates", "arr", "templates", "parse_default", "headings", "parse_default", "headings", "parse_default", "defaults", "list", "arr", "toJson_default", "singular", "hasTemplate", "list", "parse_default", "categories_default", "defaults", "categories", "newWiki", "categories_default", "arr", "singular", "defaults", "unfetch", "import_isomorphic_unfetch", "unfetch", "fetch_default", "fetch_default", "infoboxes_default", "fetch"]
}
