@using Sidekick.Common.Platform
@using Sidekick.Common.Settings

@if (!ApplicationService.SupportsKeybinds)
{
    return;
}

<FormCheckbox Value="@EscapeClosesOverlays"
              ValueChanged="@EscapeClosesOverlaysChanged">
    @Resources["EscapeClosesOverlays"]
</FormCheckbox>

@inject IStringLocalizer<SettingsResources> Resources
@inject ISettingsService SettingsService
@inject IApplicationService ApplicationService

@code {

    private bool EscapeClosesOverlays { get; set; }

    protected override async Task OnInitializedAsync()
    {
        EscapeClosesOverlays = await SettingsService.GetBool(SettingKeys.EscapeClosesOverlays);
        SettingsService.OnSettingsChanged += OnSettingsChanged;

        await base.OnInitializedAsync();
    }

    private async Task EscapeClosesOverlaysChanged(bool value)
    {
        EscapeClosesOverlays = value;
        await SettingsService.Set(SettingKeys.EscapeClosesOverlays, value);
    }

    private async void OnSettingsChanged(string[] keys)
    {
        if (keys.Contains(SettingKeys.EscapeClosesOverlays))
        {
            EscapeClosesOverlays = await SettingsService.GetBool(SettingKeys.EscapeClosesOverlays);
            await InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        SettingsService.OnSettingsChanged -= OnSettingsChanged;
    }

}
