@using Sidekick.Common.Settings


<div class="flex items-start gap-2">
    <div class="grow">
        <FormSelect Label="@Resources["Zoom"]"
                    Value="@Zoom"
                    ValueChanged="ZoomChanged"
                    Options="Options" />
    </div>
    <div class="mt-9">
        <TooltipHint Text="@Resources["Zoom_Hint"]"></TooltipHint>
    </div>
</div>

@inject IStringLocalizer<SettingsResources> Resources
@inject ISettingsService SettingsService

@code {

    private string? Zoom { get; set; }

    private List<SelectOption> Options { get; set; } = [
        new()
        {
            Label = "75%",
            Value = "0.75",
        },
        new()
        {
            Label = "100%",
            Value = "1",
        },
        new()
        {
            Label = "125%",
            Value = "1.25",
        },
        new()
        {
            Label = "150%",
            Value = "1.5",
        },
        new()
        {
            Label = "175%",
            Value = "1.75",
        },
        new()
        {
            Label = "200%",
            Value = "2",
        },
    ];

    protected override async Task OnInitializedAsync()
    {
        Zoom = await SettingsService.GetString(SettingKeys.Zoom);
        SettingsService.OnSettingsChanged += OnSettingsChanged;

        await base.OnInitializedAsync();
    }

    private async Task ZoomChanged(string? value)
    {
        Zoom = value;
        await SettingsService.Set(SettingKeys.Zoom, value);
    }

    private async void OnSettingsChanged(string[] keys)
    {
        if (keys.Contains(SettingKeys.Zoom))
        {
            Zoom = await SettingsService.GetString(SettingKeys.Zoom);
            await InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        SettingsService.OnSettingsChanged -= OnSettingsChanged;
    }

}


