@using Sidekick.Common.Game.Languages
@using Sidekick.Common.Settings

@if (!Visible)
{
    return;
}

<FormCheckbox Value="@UseInvariantTradeResults"
              ValueChanged="@UseInvariantTradeResultsChanged">
    <div class="flex gap-2">
        @Resources["UseInvariantForTradeResults"]
        <TooltipHint Text="@Resources["UseInvariantForTradeResultsTip"]" />
    </div>
</FormCheckbox>

@inject IStringLocalizer<SettingsResources> Resources
@inject IGameLanguageProvider LanguageProvider
@inject ISettingsService SettingsService
@implements IDisposable

@code {

    private bool UseInvariantTradeResults { get; set; }

    private bool Visible { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Visible = !LanguageProvider.IsEnglish();
        SettingsService.OnSettingsChanged += SettingsServiceOnOnSettingsChanged;
        UseInvariantTradeResults = await SettingsService.GetBool(SettingKeys.UseInvariantTradeResults);
        await base.OnInitializedAsync();
    }

    private void SettingsServiceOnOnSettingsChanged()
    {
        Visible = !LanguageProvider.IsEnglish();
        InvokeAsync(StateHasChanged);
    }

    private async Task UseInvariantTradeResultsChanged(bool value)
    {
        UseInvariantTradeResults = value;
        await SettingsService.Set(SettingKeys.UseInvariantTradeResults, value);
    }

    public void Dispose()
    {
        SettingsService.OnSettingsChanged -= SettingsServiceOnOnSettingsChanged;
    }

}
