@using Sidekick.Apis.Poe
@using Sidekick.Apis.Poe.Trade.Models
@using Sidekick.Common.Cache
@using Sidekick.Common.Extensions
@using Sidekick.Common.Game
@using Sidekick.Common.Settings

<div class="flex items-start gap-2">
    <div class="grow">
        <FormSelect Label="@Resources["Character_League"]"
        Value="@LeagueId"
        ValueChanged="LeagueChanged"
        Options="Options"/>
    </div>
    <div class="mt-9">
        <TooltipHint
        Text="@Resources["League_Hint"]"></TooltipHint>
    </div>
</div>

@inject IStringLocalizer<SettingsResources> Resources
@inject ISettingsService SettingsService
@inject ILeagueProvider LeagueProvider
@inject ICacheProvider CacheProvider
@inject NavigationManager NavigationManager

@code {

    [Parameter]
    public bool AutoRefresh { get; set; } = true;

    private string? LeagueId { get; set; }

    private List<SelectOption> Options { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        LeagueId = await SettingsService.GetString(SettingKeys.LeagueId);
        await RefreshOptions();
        await base.OnInitializedAsync();
    }

    public async Task RefreshOptions()
    {
        var leagues = await LeagueProvider.GetList(true);
        Options = leagues
                  .GroupBy(x => x.Id)
                  .Select(
                      x => new SelectOption()
                          {
                              Value = x.First().Id,
                              Label = x.First().Text,
                              Group = Resources[x.First().Game.ToString()]
                          })
                  .ToList();
}

    private async Task LeagueChanged(string? value)
    {
        var currentGame = LeagueId.GetGameFromLeagueId();
        var newGame = value.GetGameFromLeagueId();

        LeagueId = value;
        await SettingsService.Set(SettingKeys.LeagueId, value);

        if (AutoRefresh && currentGame != newGame)
        {
            await CacheProvider.Clear();
            NavigationManager.NavigateTo("/initialize");
        }
    }

}
