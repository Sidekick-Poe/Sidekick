
<FormInput OnFocus="Focus"
           OnBlur="Blur"
           Label="@Label"
           Value="@InputValue"
           AdditionalClasses="cursor-default caret-transparent"
           spellcheck="false">
    <AdornmentContent>
        <ButtonSecondary OnClick="Delete">@Resources["Reset"]</ButtonSecondary>
    </AdornmentContent>
</FormInput>

@using Sidekick.Common.Platform
@implements IDisposable

@inject IStringLocalizer<SettingsResources> Resources
@inject IKeyboardProvider Keyboard

@code {

    private static Guid? CurrentEditorId { get; set; }

    private static event Action? CurrentEditorChanged;

    [Parameter]
    public required string Label { get; set; }

    [Parameter]
    public string? Value { get; set; }

    [Parameter]
    public EventCallback<string?> ValueChanged { get; set; }

    private Guid Id { get; } = Guid.NewGuid();

    private bool Active => CurrentEditorId == Id;

    private string? InputValue
    {
        get
        {
            if (Active)
            {
                return Resources["Key_Active"];
            }

            return string.IsNullOrEmpty(Value) ? Resources["Key_Unset"]: Value;
        }
    }

    protected override void OnInitialized()
    {
        Keyboard.OnKeyDown += OnKeyDown;
        CurrentEditorChanged += StateHasChanged;
        base.OnInitialized();
    }

    public void Focus()
    {
        CurrentEditorId = Id;
        CurrentEditorChanged?.Invoke();
    }

    public void Blur()
    {
        CurrentEditorId = null;
        CurrentEditorChanged?.Invoke();
    }

    private void OnKeyDown(string key)
    {
        InvokeAsync(
            async () =>
            {
                if (!Active)
                {
                    return;
                }

                if (key != "Esc")
                {
                    await ValueChanged.InvokeAsync(key);
                }

                CurrentEditorId = null;
                CurrentEditorChanged?.Invoke();
                StateHasChanged();
            });
    }

    public async Task Delete()
    {
        CurrentEditorId = null;
        CurrentEditorChanged?.Invoke();
        await ValueChanged.InvokeAsync("");
    }

    public void Dispose()
    {
        Keyboard.OnKeyDown -= OnKeyDown;
        CurrentEditorChanged -= StateHasChanged;
    }

}
