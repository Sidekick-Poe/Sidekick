@using Sidekick.Common.Platform
@using Sidekick.Common.Blazor.Settings
@implements IDisposable

<div>
    @if (!string.IsNullOrEmpty(Label))
    {
        <label for="@Id"
               class="flex gap-1 mb-1 text-base font-medium dark:text-zinc-300">
            @Label
            @if (Tooltip is not null)
            {
                <Tooltip Text="@Tooltip"/>
            }
        </label>
    }

    <div class="flex flex-nowrap items-center gap-1">
        <button id="@Id"
                class="min-w-40 p-2 text-left cursor-pointer select-none @UiClasses.FormInputClasses"
                tabindex="-1"
                @onfocus="Focus"
                @onblur="Blur">
            <KeybindDisplay Keybind="@InputValue"/>
        </button>

        @if (ShowClearButton)
        {
            <ButtonIcon OnClick="Clear" title="@Resources["Clear"]">
                <Icon Svg="@UiIcons.Clear"/>
            </ButtonIcon>
        }

        @AdornmentContent
    </div>

    @if (IsDuplicated)
    {
        <label class="mt-1 text-base font-medium text-amber-500 flex items-center flex-nowrap gap-2">
            <Icon Svg="@UiIcons.Warning" Size="@UiIconSize.Medium"/>
            <TextWithKeybinds Text="@Resources["Keybind_Already_In_Use"]" Keybinds="[DuplicatedKey]"/>
        </label>
    }
</div>

@inject IStringLocalizer<SettingsResources> Resources
@inject IKeyboardProvider Keyboard
@inject IJSRuntime JsRuntime

@code {

    [Parameter]
    public required string Label { get; set; }

    [Parameter]
    public string? Tooltip { get; set; }

    [Parameter]
    public string? Value { get; set; }

    [Parameter]
    public EventCallback<string?> ValueChanged { get; set; }

    [Parameter]
    public RenderFragment? AdornmentContent { get; set; }

    private bool IsActive { get; set; }

    private IJSObjectReference? Module { get; set; }

    private static event Action? CurrentEditorChanged;

    private bool ShowClearButton => !string.IsNullOrWhiteSpace(Value);

    protected string Id { get; } = UiUtilities.GenerateId();

    private bool IsDuplicated { get; set; } = false;

    private string? DuplicatedKey { get; set; } = null;

    private string? InputValue
    {
        get
        {
            if (IsActive)
            {
                return Resources["Key_Active"];
            }

            return string.IsNullOrEmpty(Value) ? Resources["Key_Unset"] : Value;
        }
    }

    protected override void OnInitialized()
    {
        Keyboard.OnKeyDown += OnKeyDown;
        CurrentEditorChanged += StateHasChanged;
        base.OnInitialized();
    }

    private async Task RemoveFocusAsync()
    {
        Module = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/Sidekick.Common.Blazor/Settings/Components/KeybindEditorInternal.razor.js");
        await Module.InvokeVoidAsync("removeFocus", Id);
    }

    public void Focus()
    {
        IsActive = true;
        CurrentEditorChanged?.Invoke();
    }

    public void Blur()
    {
        IsActive = false;
        CurrentEditorChanged?.Invoke();
    }

    private void OnKeyDown(string key)
    {
        InvokeAsync(async () =>
        {
            if (!IsActive)
            {
                return;
            }

            if (key != "Esc")
            {
                if (key == Value)
                {
                    IsDuplicated = false;
                }
                else if (Keyboard.UsedKeybinds.Contains(key))
                {
                    DuplicatedKey = key;
                    IsDuplicated = true;
                }
                else
                {
                    IsDuplicated = false;
                    await ValueChanged.InvokeAsync(key);
                }
            }

            await RemoveFocusAsync();
            IsActive = false;
            CurrentEditorChanged?.Invoke();
            StateHasChanged();
        });
    }

    public async Task Clear()
    {
        IsDuplicated = false;
        IsActive = false;
        CurrentEditorChanged?.Invoke();
        await ValueChanged.InvokeAsync("");
    }

    public void Dispose()
    {
        Keyboard.OnKeyDown -= OnKeyDown;
        CurrentEditorChanged -= StateHasChanged;
    }

}
