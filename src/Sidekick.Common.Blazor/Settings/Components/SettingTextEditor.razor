@using Sidekick.Common.Blazor.Settings
@using Sidekick.Common.Settings

<FormInput Label="@Label"
           Value="@Value"
           ValueChanged="@ValueChanged"
           Tooltip="@Tooltip">
    <AdornmentContent>
        @if (ShowClearButton)
        {
            <ButtonIcon OnClick="Clear" title="@Resources["Clear"]">
                <Icon Svg="@UiIcons.Clear"/>
            </ButtonIcon>
        }
        @if (ShowResetButton)
        {
            <ButtonIcon OnClick="Reset" title="@Resources["Reset"]">
                <Icon Svg="@UiIcons.Reset"/>
            </ButtonIcon>
        }
    </AdornmentContent>
</FormInput>

@inject ISettingsService SettingsService
@inject IStringLocalizer<SettingsResources> Resources
@implements IDisposable

@code {

    [Parameter]
    public required string Label { get; set; }

    [Parameter]
    public required string SettingKey { get; set; }

    [Parameter]
    public string? Tooltip { get; set; }

    private bool ShowClearButton => !string.IsNullOrWhiteSpace(Value);

    private bool ShowResetButton { get; set; }

    private string? Value { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Value = await SettingsService.GetString(SettingKey);
        ShowResetButton = await SettingsService.IsSettingModified(SettingKey);

        SettingsService.OnSettingsChanged += OnSettingsChanged;

        await base.OnInitializedAsync();
    }

    private async Task ValueChanged(string? value)
    {
        Value = value;

        await SettingsService.Set(SettingKey, value);
    }

    private async void OnSettingsChanged(string[] keys)
    {
        if (keys.Contains(SettingKey))
        {
            Value = await SettingsService.GetString(SettingKey);
            ShowResetButton = await SettingsService.IsSettingModified(SettingKey);

            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task Clear()
    {
        Value = string.Empty;

        await SettingsService.Set(SettingKey, Value);
    }

    private async Task Reset()
    {
        await SettingsService.DeleteSetting(SettingKey);
    }

    public void Dispose()
    {
        SettingsService.OnSettingsChanged -= OnSettingsChanged;
    }

}
