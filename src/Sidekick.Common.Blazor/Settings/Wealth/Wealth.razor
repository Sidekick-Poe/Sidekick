@page "/settings/wealth"
@using Sidekick.Common.Settings
@using System.Diagnostics;
@using Sidekick.Apis.Poe.Authentication
@using Sidekick.Apis.Poe.Stash
@using Sidekick.Apis.Poe.Stash.Models
@using Sidekick.Common.Blazor.Authentication
@using Sidekick.Common.Blazor.Components
@layout MainWindowLayout
@inherits Sidekick.Common.Ui.Views.SidekickView

@if (Enabled)
{
    <AuthenticationStatusBar/>
}

<AppContainer>
    <Heading2 Class="mb-3">Wealth Tracker</Heading2>
    <TextBase>
        The Sidekick Wealth Tracker is meant to help players track their overall wealth progress over time.
    </TextBase>

    <LayoutDivider/>

    <Heading2 Class="mb-3">Beta Feature!</Heading2>
    <TextBase>Wealth Tracker is an experimental feature and development is still ongoing. Feel free to provide feedback on our Discord server or on Github.</TextBase>

    <LayoutDivider/>

    @if (!Enabled)
    {
        <Heading2 Class="mb-3">Authentication Process</Heading2>
        <TextBase Class="mb-1">Sidekick is registered with GGG to allow the use of the Path Of Exile API.</TextBase>

        <ul class="text-gray-500 list-disc dark:text-gray-400 mb-1 ml-6">
            <li>Sidekick will request administrative access on your computer. Sidekick needs this to securely receive Oauth data from GGG.</li>
            <li>You will then be asked to authenticate on Path of Exile' website.</li>
            <li>You will be asked to authorize the Sidekick application.</li>
        </ul>

        <TextCaption>
            Read more information from the Path of Exile developer website.
            <a href="https://www.pathofexile.com/developer/docs/authorization">https://www.pathofexile.com/developer/docs/authorization</a>
        </TextCaption>

        <LayoutDivider/>

        <div class="flex justify-center">
            <ButtonPrimary OnClick="ToggleWealthTracker">
                @Resources["Enable Wealth Tracker"]
            </ButtonPrimary>
        </div>
    }
    else
    {
        <Heading2 Class="mb-3">@Resources["Keybindings"]</Heading2>
        <KeyOpenWealthEditor/>

        <LayoutDivider/>

        @if (StashTabs != null)
        {
            <Heading2 Class="mb-3">@Resources["Stash Tabs"]</Heading2>
            <TextBase Class="mb-1">@Resources["Note that selecting too many tabs may result in a worse experience and refresh rate due to the high number of requests."]</TextBase>
            <TextBase Class="mb-3">@Resources["Selecting the unique items or map stash tabs are not recommended due to very low performance on these tabs."]</TextBase>

            foreach (var stashTab in StashTabs)
            {
                <FormCheckbox Value="IsChecked(stashTab)"
                              ValueChanged="() => Toggle(stashTab)">
                    @stashTab.Name
                </FormCheckbox>
            }
        }
        else
        {
            <div class="my-3">
                <ProgressBar Indeterminate="true"/>
            </div>
        }

        <div class="flex justify-center mt-3">
            <ButtonPrimary OnClick="ToggleWealthTracker">
                @Resources["Disable Wealth Tracker"]
            </ButtonPrimary>
        </div>
    }
</AppContainer>

@implements IDisposable
@inject IAuthenticationService AuthenticationService
@inject IStashService StashService
@inject ISettingsService SettingsService
@inject IStringLocalizer<SettingsResources> Resources

@code {

    private bool Enabled { get; set; }

    private List<string> SelectedTabs { get; set; } =
    [
    ];

    private List<StashTab>? StashTabs { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Enabled = await SettingsService.GetBool(SettingKeys.WealthEnabled);
        SelectedTabs = (await SettingsService.GetString(SettingKeys.WealthTrackedTabs))
                       ?.Split(',')
                       .ToList()
                       ??
                       [
                       ];
        AuthenticationService.OnStateChanged += OnAuthenticationChanged;
        OnAuthenticationChanged();

        if (Enabled)
        {
            await LoadStashTabs();
        }

        await base.OnInitializedAsync();
    }

    private async Task ToggleWealthTracker()
    {
        Enabled = !Enabled;
        await SettingsService.Set(SettingKeys.WealthEnabled, Enabled);

        if (Enabled)
        {
            var startInfo = new ProcessStartInfo(@"Sidekick.Protocol.exe")
            {
                Verb = "runas",
                UseShellExecute = true,
            };

            Process.Start(startInfo);

            await LoadStashTabs();
        }
    }

    private async Task LoadStashTabs()
    {
        await AuthenticationService.Authenticate();
        StashTabs = await StashService.GetStashTabList();
        StateHasChanged();
    }

    private void OnAuthenticationChanged()
    {
        _ = InvokeAsync(
            async () =>
            {
                if (await AuthenticationService.GetCurrentState() == AuthenticationState.Authenticated)
                {
                    await LoadStashTabs();
                }
            });
    }

    private bool IsChecked(StashTab tab) => SelectedTabs.Contains(tab.Id);

    private async Task Toggle(StashTab tab)
    {
        if (IsChecked(tab))
        {
            SelectedTabs.Remove(tab.Id);
        }
        else
        {
            SelectedTabs.Add(tab.Id);
        }

        await SettingsService.Set(SettingKeys.WealthTrackedTabs, string.Join(',', SelectedTabs));
    }

    public void Dispose()
    {
        AuthenticationService.OnStateChanged -= OnAuthenticationChanged;
    }

}
