@using Sidekick.Common.Settings
@using Sidekick.Common.Blazor.Settings.Components

@foreach (var chatSetting in ChatSettings)
{
    <div class="border border-solid dark:border-stone-800 p-3 mb-3">
        <div class="grid grid-cols-12 gap-2">
            <div class="col-span-6">
                <FormInput Label="@Resources["Chat_Command"]" Value="@chatSetting.Command"
                    ValueChanged="(v) => CommandChanged(chatSetting, v)" />
            </div>
            <div class="col-span-6">
                <KeybindEditor Value="@chatSetting.Key" ValueChanged="(v) => KeyChanged(chatSetting, v)"
                    Label="@Resources["Keybind"]" />
            </div>
        </div>

        <div class="flex items-center justify-between">
            <FormCheckbox Value="chatSetting.Submit" ValueChanged="() => ToggleSubmit(chatSetting)">
                @Resources["Chat_Submit_The_Command"]
            </FormCheckbox>
            <ButtonPrimary OnClick="() => Remove(chatSetting)">
                @Resources["Chat_Commands_Remove"]
            </ButtonPrimary>
        </div>
    </div>
}

<FormFieldset>
    <div class="flex justify-between">
        <ButtonSecondary OnClick="RestoreDefaults">
            @Resources["Chat_Restore_Defaults"]
        </ButtonSecondary>
        <ButtonPrimary OnClick="Add">
            @Resources["Chat_Add_New_Command"]
        </ButtonPrimary>
    </div>
</FormFieldset>

@inject IStringLocalizer<SettingsResources> Resources
@inject ISettingsService SettingsService

@code {

    private List<ChatSetting> ChatSettings { get; set; } = [];
    protected override async Task OnInitializedAsync()
    {
        ChatSettings = await SettingsService.GetObject<List<ChatSetting>>(SettingKeys.ChatCommands) ?? [];
        await base.OnInitializedAsync();
    }

    private async Task Remove(ChatSetting chatSetting)
    {
        ChatSettings.Remove(chatSetting);
        await Save();
    }

    private async Task Add()
    {
        ChatSettings.Add(new ChatSetting("", "", true));
        await Save();
    }

    private async Task KeyChanged(ChatSetting chatSetting, string? key)
    {
        chatSetting.Key = key;
        await Save();
    }

    private async Task CommandChanged(ChatSetting chatSetting, string? command)
    {
        chatSetting.Command = command;
        await Save();
    }

    private async Task ToggleSubmit(ChatSetting chatSetting)
    {
        chatSetting.Submit = !chatSetting.Submit;
        await Save();
    }

    private async Task RestoreDefaults()
    {
        ChatSettings = [.. DefaultSettings.ChatCommands];
        await Save();
    }

    protected async Task Save()
    {
        await SettingsService.Set(SettingKeys.ChatCommands, ChatSettings);
    }

}
