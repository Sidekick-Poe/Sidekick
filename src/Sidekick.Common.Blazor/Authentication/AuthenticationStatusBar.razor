@using Sidekick.Apis.Poe.Account.Authentication
@using Sidekick.Common.Settings

@if (CurrentState == AuthenticationState.Authenticated)
{
    <AlertInfo>
        <div class="flex flex-wrap items-center justify-between gap-2">
            <div class="ma-1">You are authenticated for the next @TokenRemainingString.</div>
            <ButtonPrimary OnClick="() => AuthenticationService.Authenticate(true)">Re-authenticate</ButtonPrimary>
        </div>
    </AlertInfo>
    <ProgressBar Square="true" Percent="TokenPercentRemaining"/>
}
else if (CurrentState == AuthenticationState.InProgress)
{
    <AlertInfo>
        <TextBase>You are currently authenticating.</TextBase>
    </AlertInfo>
    <ProgressBar Square="true" Indeterminate="true"/>
}
else if (CurrentState == AuthenticationState.Unauthenticated)
{
    <AlertError>
        <div class="flex flex-wrap items-center justify-between gap-2">
            <TextBase>You are unauthenticated.</TextBase>
            <ButtonPrimary OnClick="() => AuthenticationService.Authenticate(true)">Authenticate</ButtonPrimary>
        </div>
    </AlertError>
}

@implements IDisposable
@inject IAuthenticationService AuthenticationService
@inject ISettingsService SettingsService

@code {
    private Timer? refreshTimer;

    private AuthenticationState CurrentState { get; set; }

    private int TokenPercentRemaining { get; set; }

    private string? TokenRemainingString { get; set; }

    protected override void OnInitialized()
    {
        AuthenticationService.OnStateChanged += OnChanged;

        refreshTimer = new Timer(
            _ => { OnChanged(); },
            null,
            TimeSpan.Zero,
            TimeSpan.FromMinutes(1));

        OnChanged();
        base.OnInitialized();
    }

    private void OnChanged()
    {
        InvokeAsync(
            async () =>
            {
                CurrentState = await AuthenticationService.GetCurrentState();

                var bearerExpiration = await SettingsService.GetDateTime(SettingKeys.BearerExpiration);
                if (bearerExpiration == null)
                {
                    TokenPercentRemaining = 0;
                    TokenRemainingString = "";
                }
                else
                {
                    var remainingTime = bearerExpiration - DateTimeOffset.Now;
                    TokenPercentRemaining = (int)((remainingTime.Value.TotalMinutes
                                                   / TimeSpan.FromHours(10)
                                                             .TotalMinutes)
                                                  * 100);
                    TokenRemainingString = $"{remainingTime.Value.Hours:00}:{remainingTime.Value.Minutes:00}";
                }

                StateHasChanged();
            });
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
        AuthenticationService.OnStateChanged -= OnChanged;
    }

}
