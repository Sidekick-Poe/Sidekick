@page "/update"
@page "/"
@using System.Diagnostics
@using Sidekick.Common.Updater
@using Sidekick.Common.Browser
@using Sidekick.Common.Exceptions
@using Velopack
@using Sidekick.Common.Platform

<LayoutSimple>
    <TopContent>
        <AppLogo/>
    </TopContent>

    <ChildContent>
        @if (Exception != null)
        {
            <AlertException Exception="Exception"/>
        }
        else if (UpdateInfo == null)
        {
            <AppFullContainer>
                <Heading3 Class="mb-2 text-center">@Resources["Checking_For_Updates"]</Heading3>
                <ProgressBar Indeterminate="true"/>
            </AppFullContainer>
        }
        else if (Updating)
        {
            <AppFullContainer>
                <Heading3 Class="mb-2 text-center">@Resources["Updating"]</Heading3>
                <ProgressBar Indeterminate="true"/>
            </AppFullContainer>
        }
        else
        {
            <AppFullContainer>
                <Heading1 Class="mb-4 text-center">@Resources["New_Update_Alert"]</Heading1>
                @if (!string.IsNullOrEmpty(UpdateInfo.TargetFullRelease.NotesHTML) || UpdateInfo.DeltasToTarget.Any(x => !string.IsNullOrEmpty(x.NotesHTML)))
                {
                    <div class="text-left">
                        @GetNotes(UpdateInfo.TargetFullRelease)
                        @foreach (var delta in UpdateInfo.DeltasToTarget)
                        {
                            @GetNotes(delta)
                        }
                    </div>
                }
                else
                {
                    <div class="mb-3 text-center">
                        @Resources["NoChangelog"]
                    </div>
                    <div class="text-center">
                        <ButtonSecondary OnClick="OpenWebsite">@Resources["Open_Website"]</ButtonSecondary>
                    </div>
                }
            </AppFullContainer>
        }
    </ChildContent>

    <BottomContent>
        <div class="px-3 py-2 flex justify-center gap-2">
            <ButtonSecondary OnClick="Exit">@Resources["Exit"]</ButtonSecondary>
            @if (!Updating)
            {
                <ButtonSecondary OnClick="Continue">@Resources["Skip"]</ButtonSecondary>
            }

            @if (UpdateInfo != null && !Updating)
            {
                <ButtonPrimary OnClick="Download">@Resources["Update"]</ButtonPrimary>
            }
        </div>
    </BottomContent>
</LayoutSimple>

@inject ILogger<Update> Logger
@inject IStringLocalizer<Update> Resources
@inject IApplicationService ApplicationService
@inject IAutoUpdater AutoUpdater
@inject IBrowserProvider BrowserProvider
@inject ICurrentView CurrentView
@inject NavigationManager NavigationManager

@code {

    private bool Updating { get; set; }

    private UpdateInfo? UpdateInfo { get; set; }

    private SidekickException? Exception { get; set; }

    private RenderFragment GetNotes(VelopackAsset asset) => @<FormFieldset Legend="@($"Version {asset.Version}")">
                                                                <div
                                                                    class="[&_h1]:text-xl [&_h1]:mb-2 [&_h2]:text-lg [&_h2]:mb-2 [&_h3]:text-base [&_h3]:mb-1 [&_h4]:text-lg [&_h5]:text-lg [&_h6]:text-lg [&_ul]:list-disc [&_ul]:pl-4">
                                                                    @((MarkupString)asset.NotesHTML)
                                                                </div>
                                                            </FormFieldset>;

    protected override async Task OnInitializedAsync()
    {
        CurrentView.Initialize(new ViewOptions()
        {
            Title = Resources["Update"],
            Width = 400,
            Height = 220,
        });
        await base.OnInitializedAsync();

        try
        {
            if (Debugger.IsAttached)
            {
                // Comment the following line to get the update view to stick when debugging.
                Continue();
                return;
            }

            if (AutoUpdater.IsUpdaterInstalled())
            {
                UpdateInfo = await AutoUpdater.CheckForUpdates();

                if (UpdateInfo is null)
                {
                    // There's no available updates
                    NavigationManager.NavigateTo("/setup");
                }
                else
                {
                    CurrentView.Initialize(new ViewOptions()
                    {
                        Title = Resources["Update"],
                        Width = 400,
                        Height = 500,
                    });
                }
            }
            else
            {
                Logger.LogWarning("[AutoUpdater] UpdateManager is not installed.");
                NavigationManager.NavigateTo("/setup");
            }
        }
        catch (SidekickException e)
        {
            Exception = e;
        }
    }

    public void Continue()
    {
        if (NavigationManager.Uri.Contains("/update"))
        {
            CurrentView.Close();
        }
        else
        {
            NavigationManager.NavigateTo("/setup");
        }
    }

    public async Task Download()
    {
        if (UpdateInfo == null) throw new SidekickException("Could not apply the update successfully.");

        try
        {
            Updating = true;
            StateHasChanged();

            await AutoUpdater.UpdateAndRestart(UpdateInfo);
            Updating = false;
            StateHasChanged();
        }
        catch (SidekickException e)
        {
            Exception = e;
            StateHasChanged();
        }
    }

    public void OpenWebsite()
    {
        BrowserProvider.OpenSidekickWebsite();
    }

    public void Exit()
    {
        ApplicationService.Shutdown();
    }

}
