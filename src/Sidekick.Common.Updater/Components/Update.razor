@page "/update"
@page "/"
@using System.Diagnostics
@using Sidekick.Common.Updater
@using Sidekick.Common.Browser
@using Sidekick.Common.Exceptions
@using Velopack
@using Sidekick.Common.Platform
@inherits Sidekick.Common.Ui.Views.SidekickView

<AppTitle Title="@Resources["Update"]"/>
<LayoutSimple>
    <TopContent>
        <AppLogo/>
    </TopContent>

    <ChildContent>
        @if (Error)
        {
            <AlertError>@Resources["Update_Cant_Download"]</AlertError>
        }
        else if (NewLauncher)
        {
            <AppContainer>
                <Heading3 Class="mb-2 text-center">@Resources["NewLauncher"]</Heading3>
                <TextBase
                    Class="text-center">@Resources["NewLauncherText"]</TextBase>
            </AppContainer>
        }
        else if (UpdateInfo == null)
        {
            <AppContainer>
                <Heading3 Class="mb-2 text-center">@Resources["Checking_For_Updates"]</Heading3>
                <ProgressBar Indeterminate="true"/>
            </AppContainer>
        }
        else if (Updating)
        {
            <AppContainer>
                <Heading3 Class="mb-2 text-center">@Resources["Updating"]</Heading3>
                <ProgressBar Indeterminate="true"/>
            </AppContainer>
        }
        else
        {
            <AppContainer>
                <Heading1 Class="mb-3 text-center">@Resources["New_Update_Alert"]</Heading1>
                @if (!string.IsNullOrEmpty(UpdateInfo.TargetFullRelease.NotesHTML) || UpdateInfo.DeltasToTarget.Any(x => !string.IsNullOrEmpty(x.NotesHTML)))
                {
                    <div class="text-left">
                        @((MarkupString)UpdateInfo.TargetFullRelease.NotesHTML)
                        @foreach (var delta in UpdateInfo.DeltasToTarget)
                        {
                            @((MarkupString)delta.NotesHTML)
                        }
                    </div>
                }
                else
                {
                    <div class="mb-3 text-center">
                        @Resources["NoChangelog"]
                    </div>
                    <div class="text-center">
                        <ButtonSecondary OnClick="OpenWebsite">@Resources["Open_Website"]</ButtonSecondary>
                    </div>
                }
            </AppContainer>
        }
    </ChildContent>

    <BottomContent>
        <div class="px-3 py-2 flex justify-center gap-2">
            @if (NewLauncher)
            {
                <ButtonSecondary OnClick="Exit">@Resources["Exit"]</ButtonSecondary>
                <ButtonSecondary OnClick="Continue">@Resources["Continue"]</ButtonSecondary>
                <ButtonPrimary OnClick="OpenWebsite">@Resources["Open_Website"]</ButtonPrimary>
            }
            else
            {
                <ButtonSecondary OnClick="Exit">@Resources["Exit"]</ButtonSecondary>
                @if (!Updating)
                {
                    <ButtonSecondary OnClick="Continue">@Resources["Continue"]</ButtonSecondary>
                }

                @if (UpdateInfo != null && !Updating)
                {
                    <ButtonPrimary OnClick="DownloadAndUpdate">@Resources["Download_And_Install"]</ButtonPrimary>
                }
            }
        </div>
    </BottomContent>
</LayoutSimple>

@inject ILogger<Update> Logger
@inject IStringLocalizer<Update> Resources
@inject IApplicationService ApplicationService
@inject IAutoUpdater AutoUpdater
@inject IBrowserProvider BrowserProvider

@code {

    private bool Error { get; set; }

    private bool NewLauncher { get; set; }

    private bool Updating { get; set; }

    private UpdateInfo? UpdateInfo { get; set; }

    public override SidekickViewType ViewType => SidekickViewType.Modal;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (Debugger.IsAttached)
        {
            // Comment the following line to get the update view to stick when debugging.
            Continue();
            return;
        }

        try
        {
            UpdateInfo = await AutoUpdater.CheckForUpdates();
            if (UpdateInfo == null)
            {
                NavigationManager.NavigateTo("/setup");
            }
            else
            {
                CurrentView.SetSize(height: 400);
            }
        }
        catch (Exception ex)
        {
            if (ex.Message == "Cannot perform this operation in an application which is not installed.")
            {
                NewLauncher = true;
            }
            else
            {
                Logger.LogError(ex.Message);
                Error = true;
                StateHasChanged();
            }
        }
    }

    public void Continue()
    {
        if (NavigationManager.Uri.Contains("/update"))
        {
            CurrentView.Close();
        }
        else
        {
            NavigationManager.NavigateTo("/setup");
        }
    }

    public async Task DownloadAndUpdate()
    {
        if (UpdateInfo == null) throw new SidekickException("Could not apply the update successfully.");

        Updating = true;
        StateHasChanged();

        try
        {
            await AutoUpdater.UpdateAndRestart(UpdateInfo);
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            throw new SidekickException("Could not apply the update successfully.");
        }
    }

    public void OpenWebsite()
    {
        BrowserProvider.OpenSidekickWebsite();
    }

    public void Exit()
    {
        ApplicationService.Shutdown();
    }

}
